{
	"id": "d7394a02a4940fae1b2dde01900f7429",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.29",
	"solcLongVersion": "0.8.29+commit.ab55807c",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/RHEMVote.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.26;\r\n\r\nimport \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\";\r\n\r\ncontract RHEMVote is Initializable, ERC20Upgradeable {\r\n    function initialize(address communityWallet) public initializer {\r\n        require(communityWallet != address(0), \"Invalid community wallet\");\r\n        __ERC20_init(\"RHEM Vote\", \"RVOTE\");\r\n        _mint(communityWallet, 100_000_000 * 10**18);\r\n    }\r\n}"
			},
			"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
			},
			"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/RHEMVote.sol": {
				"RHEMVote": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "communityWallet",
									"type": "address"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/RHEMVote.sol\":346:658  contract RHEMVote is Initializable, ERC20Upgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  revert(0x00, 0x00)\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/RHEMVote.sol\":346:658  contract RHEMVote is Initializable, ERC20Upgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      revert(0x00, 0x00)\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_13\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xc4d66de8\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_12\n      jumpi\n      revert(0x00, 0x00)\n    tag_13:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      revert(0x00, 0x00)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3011:3155  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n      mload(0x40)\n      tag_16\n      swap2\n      swap1\n      tag_17\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_18\n      tag_19\n      calldatasize\n      0x04\n      tag_20\n      jump\t// in\n    tag_19:\n      tag_21\n      jump\t// in\n    tag_18:\n      mload(0x40)\n        /* \"#utility.yul\":1085:1099   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1078:1100   */\n      iszero\n        /* \"#utility.yul\":1060:1101   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1048:1050   */\n      0x20\n        /* \"#utility.yul\":1033:1051   */\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_16\n        /* \"#utility.yul\":920:1107   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4191:4343  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4322:4336  $._totalSupply */\n      sload(0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4191:4343  function totalSupply() public view virtual returns (uint256) {... */\n    tag_24:\n      mload(0x40)\n        /* \"#utility.yul\":1258:1283   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1246:1248   */\n      0x20\n        /* \"#utility.yul\":1231:1249   */\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4191:4343  function totalSupply() public view virtual returns (uint256) {... */\n      tag_16\n        /* \"#utility.yul\":1112:1289   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6251:6495  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_18\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4049:4131  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4122:4124  18 */\n      0x12\n        /* \"#utility.yul\":1815:1851   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1803:1805   */\n      0x20\n        /* \"#utility.yul\":1788:1806   */\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4049:4131  function decimals() public view virtual returns (uint8) {... */\n      tag_16\n        /* \"#utility.yul\":1673:1857   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4401:4572  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_8:\n      tag_24\n      tag_38\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_38:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4545:4565  $._balances[account] */\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4466:4473  uint256 */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4545:4565  $._balances[account] */\n      swap1\n      dup2\n      mstore\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4401:4572  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3268:3416  function symbol() public view virtual returns (string memory) {... */\n    tag_9:\n      tag_14\n      tag_43\n      jump\t// in\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4767:4945  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_10:\n      tag_18\n      tag_46\n      calldatasize\n      0x04\n      tag_20\n      jump\t// in\n    tag_46:\n      tag_47\n      jump\t// in\n        /* \"contracts/RHEMVote.sol\":406:655  function initialize(address communityWallet) public initializer {... */\n    tag_11:\n      tag_49\n      tag_50\n      calldatasize\n      0x04\n      tag_39\n      jump\t// in\n    tag_50:\n      tag_51\n      jump\t// in\n    tag_49:\n      stop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5003:5198  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_12:\n      tag_24\n      tag_53\n      calldatasize\n      0x04\n      tag_54\n      jump\t// in\n    tag_53:\n      tag_55\n      jump\t// in\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3011:3155  function name() public view virtual returns (string memory) {... */\n    tag_15:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3141:3148  $._name */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3134:3148  return $._name */\n      dup1\n      sload\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3056:3069  string memory */\n      0x60\n      swap2\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2359:2379  ERC20StorageLocation */\n      swap2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3134:3148  return $._name */\n      tag_60\n      swap1\n      tag_61\n      jump\t// in\n    tag_60:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_62\n      swap1\n      tag_61\n      jump\t// in\n    tag_62:\n      dup1\n      iszero\n      tag_63\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_64\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_63)\n    tag_64:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_65:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_65\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_63:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      pop\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3011:3155  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_21:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5578:5582  bool */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5632:5663  _approve(owner, spender, value) */\n      tag_69\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      dup2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5648:5655  spender */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5657:5662  value */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5632:5640  _approve */\n      tag_70\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5632:5663  _approve(owner, spender, value) */\n      jump\t// in\n    tag_69:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5680:5684  true */\n      0x01\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5673:5684  return true */\n      swap2\n      pop\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5505:5691  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_66:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6251:6495  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_31:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6338:6342  bool */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6394:6431  _spendAllowance(from, spender, value) */\n      tag_75\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6410:6414  from */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      dup3\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6425:6430  value */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6394:6409  _spendAllowance */\n      tag_76\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6394:6431  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_75:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6441:6467  _transfer(from, to, value) */\n      tag_77\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6451:6455  from */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6457:6459  to */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6461:6466  value */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6441:6450  _transfer */\n      tag_78\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6441:6467  _transfer(from, to, value) */\n      jump\t// in\n    tag_77:\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6484:6488  true */\n      0x01\n      swap5\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6251:6495  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3268:3416  function symbol() public view virtual returns (string memory) {... */\n    tag_43:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3400:3409  $._symbol */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3393:3409  return $._symbol */\n      dup1\n      sload\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3315:3328  string memory */\n      0x60\n      swap2\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2359:2379  ERC20StorageLocation */\n      swap2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":3393:3409  return $._symbol */\n      tag_60\n      swap1\n      tag_61\n      jump\t// in\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4767:4945  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_47:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4836:4840  bool */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4890:4917  _transfer(owner, to, value) */\n      tag_69\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      dup2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4907:4909  to */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4911:4916  value */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4890:4899  _transfer */\n      tag_78\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":4890:4917  _transfer(owner, to, value) */\n      jump\t// in\n        /* \"contracts/RHEMVote.sol\":406:655  function initialize(address communityWallet) public initializer {... */\n    tag_51:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":8870:8891  INITIALIZABLE_STORAGE */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      dup1\n      sload\n      shl(0x40, 0x01)\n      dup2\n      div\n      0xff\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4301:4317  !$._initializing */\n      iszero\n      swap1\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4348:4362  $._initialized */\n      0xffffffffffffffff\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4158:4188  InitializableStorage storage $ */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4726:4742  initialized == 0 */\n      dup2\n      iszero\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n      dup1\n      iszero\n      tag_95\n      jumpi\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4746:4760  isTopLevelCall */\n      dup3\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n    tag_95:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4706:4760  bool initialSetup = initialized == 0 && isTopLevelCall */\n      swap1\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4770:4787  bool construction */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4790:4801  initialized */\n      dup3\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4790:4806  initialized == 1 */\n      0xffffffffffffffff\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4805:4806  1 */\n      0x01\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4790:4806  initialized == 1 */\n      eq\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n      dup1\n      iszero\n      tag_96\n      jumpi\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4818:4822  this */\n      address\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4810:4835  address(this).code.length */\n      extcodesize\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4810:4840  address(this).code.length == 0 */\n      iszero\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n    tag_96:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4770:4840  bool construction = initialized == 1 && address(this).code.length == 0 */\n      swap1\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4856:4868  initialSetup */\n      dup2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4855:4868  !initialSetup */\n      iszero\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n      dup1\n      iszero\n      tag_97\n      jumpi\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4873:4885  construction */\n      dup1\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4872:4885  !construction */\n      iszero\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n    tag_97:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n      iszero\n      tag_98\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4908:4931  InvalidInitialization() */\n      mload(0x40)\n      shl(0xe0, 0xf92ee8a9)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n    tag_98:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4951:4969  $._initialized = 1 */\n      dup5\n      sload\n      not(0xffffffffffffffff)\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4968:4969  1 */\n      0x01\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4951:4969  $._initialized = 1 */\n      or\n      dup6\n      sstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n      dup4\n      iszero\n      tag_99\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":5013:5035  $._initializing = true */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      shl(0x40, 0x01)\n      or\n      dup6\n      sstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n    tag_99:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/RHEMVote.sol\":489:518  communityWallet != address(0) */\n      dup7\n      and\n        /* \"contracts/RHEMVote.sol\":481:547  require(communityWallet != address(0), \"Invalid community wallet\") */\n      tag_101\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2905:2907   */\n      0x20\n        /* \"contracts/RHEMVote.sol\":481:547  require(communityWallet != address(0), \"Invalid community wallet\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2887:2908   */\n      mstore\n        /* \"#utility.yul\":2944:2946   */\n      0x18\n        /* \"#utility.yul\":2924:2942   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2917:2947   */\n      mstore\n        /* \"#utility.yul\":2983:3009   */\n      0x496e76616c696420636f6d6d756e6974792077616c6c65740000000000000000\n        /* \"#utility.yul\":2963:2981   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2956:3010   */\n      mstore\n        /* \"#utility.yul\":3027:3045   */\n      0x64\n      add\n        /* \"contracts/RHEMVote.sol\":481:547  require(communityWallet != address(0), \"Invalid community wallet\") */\n    tag_102:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_101:\n        /* \"contracts/RHEMVote.sol\":558:592  __ERC20_init(\"RHEM Vote\", \"RVOTE\") */\n      tag_104\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x09\n      dup2\n      mstore\n      0x20\n      add\n      shl(0xb8, 0x5248454d20566f7465)\n      dup2\n      mstore\n      pop\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x05\n      dup2\n      mstore\n      0x20\n      add\n      shl(0xd8, 0x52564f5445)\n      dup2\n      mstore\n      pop\n        /* \"contracts/RHEMVote.sol\":558:570  __ERC20_init */\n      tag_105\n        /* \"contracts/RHEMVote.sol\":558:592  __ERC20_init(\"RHEM Vote\", \"RVOTE\") */\n      jump\t// in\n    tag_104:\n        /* \"contracts/RHEMVote.sol\":603:647  _mint(communityWallet, 100_000_000 * 10**18) */\n      tag_106\n        /* \"contracts/RHEMVote.sol\":609:624  communityWallet */\n      dup7\n        /* \"contracts/RHEMVote.sol\":626:646  100_000_000 * 10**18 */\n      0x52b7d2dcc80cd2e4000000\n        /* \"contracts/RHEMVote.sol\":603:608  _mint */\n      tag_107\n        /* \"contracts/RHEMVote.sol\":603:647  _mint(communityWallet, 100_000_000 * 10**18) */\n      jump\t// in\n    tag_106:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":5070:5084  isTopLevelCall */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n      iszero\n      tag_108\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":5100:5123  $._initializing = false */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      dup6\n      sstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":3209:3259   */\n      dup2\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n      swap1\n        /* \"#utility.yul\":3197:3199   */\n      0x20\n        /* \"#utility.yul\":3182:3200   */\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n    tag_108:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":4092:5173  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/RHEMVote.sol\":406:655  function initialize(address communityWallet) public initializer {... */\n      pop\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5003:5198  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_55:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5162:5182  $._allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5083:5090  uint256 */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5162:5182  $._allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5162:5175  $._allowances */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace01\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5162:5182  $._allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5162:5191  $._allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":5003:5198  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":10264:10392  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_70:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":10348:10385  _approve(owner, spender, value, true) */\n      tag_116\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":10357:10362  owner */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":10364:10371  spender */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":10373:10378  value */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":10380:10384  true */\n      0x01\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":10348:10356  _approve */\n      tag_117\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":10348:10385  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_116:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":10264:10392  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11993:12470  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_76:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12092:12116  uint256 currentAllowance */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12119:12144  allowance(owner, spender) */\n      tag_119\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12129:12134  owner */\n      dup5\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12136:12143  spender */\n      dup5\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12119:12128  allowance */\n      tag_55\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12119:12144  allowance(owner, spender) */\n      jump\t// in\n    tag_119:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12092:12144  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12158:12174  currentAllowance */\n      dup2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12158:12195  currentAllowance != type(uint256).max */\n      eq\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12154:12464  if (currentAllowance != type(uint256).max) {... */\n      tag_124\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12234:12239  value */\n      dup2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12215:12231  currentAllowance */\n      dup2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12215:12239  currentAllowance < value */\n      lt\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12211:12341  if (currentAllowance < value) {... */\n      iszero\n      tag_121\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12266:12326  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      shl(0xe1, 0x7dc7a0d9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3490:3522   */\n      dup5\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12266:12326  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3472:3523   */\n      mstore\n        /* \"#utility.yul\":3539:3557   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":3532:3566   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":3582:3600   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":3575:3609   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":3445:3463   */\n      0x64\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12266:12326  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      tag_102\n        /* \"#utility.yul\":3270:3615   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12211:12341  if (currentAllowance < value) {... */\n    tag_121:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12382:12439  _approve(owner, spender, currentAllowance - value, false) */\n      tag_124\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12391:12396  owner */\n      dup5\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12398:12405  spender */\n      dup5\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12426:12431  value */\n      dup5\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12407:12423  currentAllowance */\n      dup5\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12407:12431  currentAllowance - value */\n      sub\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12433:12438  false */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12382:12390  _approve */\n      tag_117\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12382:12439  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_124:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":12082:12470  {... */\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11993:12470  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6868:7168  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_78:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6951:6969  from == address(0) */\n      dup4\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6947:7033  if (from == address(0)) {... */\n      tag_126\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6992:7022  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7019:7020  0 */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6992:7022  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3766:3817   */\n      mstore\n        /* \"#utility.yul\":3739:3757   */\n      0x24\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6992:7022  ERC20InvalidSender(address(0)) */\n      tag_102\n        /* \"#utility.yul\":3620:3823   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":6947:7033  if (from == address(0)) {... */\n    tag_126:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7046:7062  to == address(0) */\n      dup3\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7042:7128  if (to == address(0)) {... */\n      tag_129\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7085:7117  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7114:7115  0 */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7085:7117  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3766:3817   */\n      mstore\n        /* \"#utility.yul\":3739:3757   */\n      0x24\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7085:7117  ERC20InvalidReceiver(address(0)) */\n      tag_102\n        /* \"#utility.yul\":3620:3823   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7042:7128  if (to == address(0)) {... */\n    tag_129:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7137:7161  _update(from, to, value) */\n      tag_116\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7145:7149  from */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7151:7153  to */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7155:7160  value */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7137:7144  _update */\n      tag_132\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7137:7161  _update(from, to, value) */\n      jump\t// in\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2577:2724  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_105:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_135\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_136\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_135:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2679:2717  __ERC20_init_unchained(name_, symbol_) */\n      tag_138\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2702:2707  name_ */\n      dup3\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2709:2716  symbol_ */\n      dup3\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2679:2701  __ERC20_init_unchained */\n      tag_139\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2679:2717  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n    tag_138:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2577:2724  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8996:9204  function _mint(address account, uint256 value) internal {... */\n    tag_107:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9066:9087  account == address(0) */\n      dup3\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9062:9153  if (account == address(0)) {... */\n      tag_141\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9110:9142  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9139:9140  0 */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9110:9142  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3766:3817   */\n      mstore\n        /* \"#utility.yul\":3739:3757   */\n      0x24\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9110:9142  ERC20InvalidReceiver(address(0)) */\n      tag_102\n        /* \"#utility.yul\":3620:3823   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9062:9153  if (account == address(0)) {... */\n    tag_141:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9162:9197  _update(address(0), account, value) */\n      tag_138\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9178:9179  0 */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9182:9189  account */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9191:9196  value */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9162:9169  _update */\n      tag_132\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":9162:9197  _update(address(0), account, value) */\n      jump\t// in\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11224:11711  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_117:\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11389:11408  owner == address(0) */\n      dup6\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11385:11474  if (owner == address(0)) {... */\n      tag_146\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11431:11463  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11460:11461  0 */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11431:11463  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3766:3817   */\n      mstore\n        /* \"#utility.yul\":3739:3757   */\n      0x24\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11431:11463  ERC20InvalidApprover(address(0)) */\n      tag_102\n        /* \"#utility.yul\":3620:3823   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11385:11474  if (owner == address(0)) {... */\n    tag_146:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11487:11508  spender == address(0) */\n      dup5\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11483:11573  if (spender == address(0)) {... */\n      tag_148\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11531:11562  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11559:11560  0 */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11531:11562  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3766:3817   */\n      mstore\n        /* \"#utility.yul\":3739:3757   */\n      0x24\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11531:11562  ERC20InvalidSpender(address(0)) */\n      tag_102\n        /* \"#utility.yul\":3620:3823   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11483:11573  if (spender == address(0)) {... */\n    tag_148:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11582:11602  $._allowances[owner] */\n      dup1\n      dup7\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11582:11595  $._allowances */\n      0x01\n      dup4\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11582:11602  $._allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11582:11611  $._allowances[owner][spender] */\n      swap4\n      dup9\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11582:11619  $._allowances[owner][spender] = value */\n      dup4\n      swap1\n      sstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11629:11705  if (emitEvent) {... */\n      dup2\n      iszero\n      tag_150\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11679:11686  spender */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11672:11677  owner */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11688:11693  value */\n      dup6\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_151\n      swap2\n        /* \"#utility.yul\":1258:1283   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1246:1248   */\n      0x20\n        /* \"#utility.yul\":1231:1249   */\n      add\n      swap1\n        /* \"#utility.yul\":1112:1289   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11663:11694  Approval(owner, spender, value) */\n    tag_151:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11629:11705  if (emitEvent) {... */\n    tag_150:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11322:11711  {... */\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":11224:11711  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7483:8653  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_132:\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7625:7643  from == address(0) */\n      dup5\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7621:8167  if (from == address(0)) {... */\n      tag_154\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7779:7784  value */\n      dup2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7761:7762  $ */\n      dup2\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7761:7775  $._totalSupply */\n      0x02\n      add\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7761:7784  $._totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_155\n      swap2\n      swap1\n      tag_156\n      jump\t// in\n    tag_155:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7621:8167  if (from == address(0)) {... */\n      tag_157\n      swap1\n      pop\n      jump\n    tag_154:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7837:7854  $._balances[from] */\n      dup5\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7815:7834  uint256 fromBalance */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7837:7854  $._balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup3\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7872:7891  fromBalance < value */\n      dup3\n      dup2\n      lt\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7868:7983  if (fromBalance < value) {... */\n      iszero\n      tag_158\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7918:7968  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3490:3522   */\n      dup7\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7918:7968  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3472:3523   */\n      mstore\n        /* \"#utility.yul\":3539:3557   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":3532:3566   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":3582:3600   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":3575:3609   */\n      dup5\n      swap1\n      mstore\n        /* \"#utility.yul\":3445:3463   */\n      0x64\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7918:7968  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_102\n        /* \"#utility.yul\":3270:3615   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7868:7983  if (fromBalance < value) {... */\n    tag_158:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8103:8120  $._balances[from] */\n      dup6\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8103:8114  $._balances */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8103:8120  $._balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup4\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8123:8142  fromBalance - value */\n      swap1\n      dup4\n      swap1\n      sub\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8103:8142  $._balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7621:8167  if (from == address(0)) {... */\n    tag_157:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8181:8197  to == address(0) */\n      dup4\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8177:8606  if (to == address(0)) {... */\n      tag_160\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8344:8358  $._totalSupply */\n      0x02\n      dup2\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8344:8367  $._totalSupply -= value */\n      dup1\n      sload\n      dup4\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8177:8606  if (to == address(0)) {... */\n      jump(tag_161)\n    tag_160:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8557:8572  $._balances[to] */\n      dup4\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8557:8568  $._balances */\n      0x00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8557:8572  $._balances[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup3\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8557:8581  $._balances[to] += value */\n      dup1\n      sload\n      dup4\n      add\n      swap1\n      sstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8177:8606  if (to == address(0)) {... */\n    tag_161:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8636:8638  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8630:8634  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8640:8645  value */\n      dup5\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n      mload(0x40)\n      tag_162\n      swap2\n        /* \"#utility.yul\":1258:1283   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1246:1248   */\n      0x20\n        /* \"#utility.yul\":1231:1249   */\n      add\n      swap1\n        /* \"#utility.yul\":1112:1289   */\n      jump\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":8621:8646  Transfer(from, to, value) */\n    tag_162:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7558:8653  {... */\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":7483:8653  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":7084:7225  function _checkInitializing() internal view virtual {... */\n    tag_136:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":8870:8891  INITIALIZABLE_STORAGE */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":8560:8600  _getInitializableStorage()._initializing */\n      sload\n      shl(0x40, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":7146:7219  if (!_isInitializing()) {... */\n      tag_166\n      jumpi\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":7191:7208  NotInitializing() */\n      mload(0x40)\n      shl(0xe3, 0x1afcd79f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":7146:7219  if (!_isInitializing()) {... */\n    tag_166:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":7084:7225  function _checkInitializing() internal view virtual {... */\n      jump\t// out\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2730:2946  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_139:\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_168\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_136\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_168:\n      mload(0x00)\n      codecopy(0x00, data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2895:2902  $._name */\n      0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2895:2910  $._name = name_ */\n      tag_171\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2905:2910  name_ */\n      dup5\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2895:2902  $._name */\n      dup3\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2895:2910  $._name = name_ */\n      tag_172\n      jump\t// in\n    tag_171:\n      pop\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2920:2929  $._symbol */\n      0x04\n      dup2\n      add\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2920:2939  $._symbol = symbol_ */\n      tag_124\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2932:2939  symbol_ */\n      dup4\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2920:2929  $._symbol */\n      dup3\n        /* \"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":2920:2939  $._symbol = symbol_ */\n      tag_172\n      jump\t// in\n        /* \"#utility.yul\":14:432   */\n    tag_17:\n        /* \"#utility.yul\":163:165   */\n      0x20\n        /* \"#utility.yul\":152:161   */\n      dup2\n        /* \"#utility.yul\":145:166   */\n      mstore\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":195:201   */\n      dup3\n        /* \"#utility.yul\":189:202   */\n      mload\n        /* \"#utility.yul\":238:244   */\n      dup1\n        /* \"#utility.yul\":233:235   */\n      0x20\n        /* \"#utility.yul\":222:231   */\n      dup5\n        /* \"#utility.yul\":218:236   */\n      add\n        /* \"#utility.yul\":211:245   */\n      mstore\n        /* \"#utility.yul\":297:303   */\n      dup1\n        /* \"#utility.yul\":292:294   */\n      0x20\n        /* \"#utility.yul\":284:290   */\n      dup6\n        /* \"#utility.yul\":280:295   */\n      add\n        /* \"#utility.yul\":275:277   */\n      0x40\n        /* \"#utility.yul\":264:273   */\n      dup6\n        /* \"#utility.yul\":260:278   */\n      add\n        /* \"#utility.yul\":254:304   */\n      mcopy\n        /* \"#utility.yul\":353:354   */\n      0x00\n        /* \"#utility.yul\":348:350   */\n      0x40\n        /* \"#utility.yul\":339:345   */\n      dup3\n        /* \"#utility.yul\":328:337   */\n      dup6\n        /* \"#utility.yul\":324:346   */\n      add\n        /* \"#utility.yul\":320:351   */\n      add\n        /* \"#utility.yul\":313:355   */\n      mstore\n        /* \"#utility.yul\":423:425   */\n      0x40\n        /* \"#utility.yul\":416:418   */\n      0x1f\n        /* \"#utility.yul\":412:419   */\n      not\n        /* \"#utility.yul\":407:409   */\n      0x1f\n        /* \"#utility.yul\":399:405   */\n      dup4\n        /* \"#utility.yul\":395:410   */\n      add\n        /* \"#utility.yul\":391:420   */\n      and\n        /* \"#utility.yul\":380:389   */\n      dup5\n        /* \"#utility.yul\":376:421   */\n      add\n        /* \"#utility.yul\":372:426   */\n      add\n        /* \"#utility.yul\":364:426   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":14:432   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":437:610   */\n    tag_176:\n        /* \"#utility.yul\":505:525   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":554:585   */\n      dup2\n      and\n        /* \"#utility.yul\":544:586   */\n      dup2\n      eq\n        /* \"#utility.yul\":534:604   */\n      tag_184\n      jumpi\n        /* \"#utility.yul\":600:601   */\n      0x00\n        /* \"#utility.yul\":597:598   */\n      0x00\n        /* \"#utility.yul\":590:602   */\n      revert\n        /* \"#utility.yul\":534:604   */\n    tag_184:\n        /* \"#utility.yul\":437:610   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":615:915   */\n    tag_20:\n        /* \"#utility.yul\":683:689   */\n      0x00\n        /* \"#utility.yul\":691:697   */\n      0x00\n        /* \"#utility.yul\":744:746   */\n      0x40\n        /* \"#utility.yul\":732:741   */\n      dup4\n        /* \"#utility.yul\":723:730   */\n      dup6\n        /* \"#utility.yul\":719:742   */\n      sub\n        /* \"#utility.yul\":715:747   */\n      slt\n        /* \"#utility.yul\":712:764   */\n      iszero\n      tag_186\n      jumpi\n        /* \"#utility.yul\":760:761   */\n      0x00\n        /* \"#utility.yul\":757:758   */\n      0x00\n        /* \"#utility.yul\":750:762   */\n      revert\n        /* \"#utility.yul\":712:764   */\n    tag_186:\n        /* \"#utility.yul\":783:812   */\n      tag_187\n        /* \"#utility.yul\":802:811   */\n      dup4\n        /* \"#utility.yul\":783:812   */\n      tag_176\n      jump\t// in\n    tag_187:\n        /* \"#utility.yul\":773:812   */\n      swap5\n        /* \"#utility.yul\":881:883   */\n      0x20\n        /* \"#utility.yul\":866:884   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":853:885   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":615:915   */\n      jump\t// out\n        /* \"#utility.yul\":1294:1668   */\n    tag_30:\n        /* \"#utility.yul\":1371:1377   */\n      0x00\n        /* \"#utility.yul\":1379:1385   */\n      0x00\n        /* \"#utility.yul\":1387:1393   */\n      0x00\n        /* \"#utility.yul\":1440:1442   */\n      0x60\n        /* \"#utility.yul\":1428:1437   */\n      dup5\n        /* \"#utility.yul\":1419:1426   */\n      dup7\n        /* \"#utility.yul\":1415:1438   */\n      sub\n        /* \"#utility.yul\":1411:1443   */\n      slt\n        /* \"#utility.yul\":1408:1460   */\n      iszero\n      tag_191\n      jumpi\n        /* \"#utility.yul\":1456:1457   */\n      0x00\n        /* \"#utility.yul\":1453:1454   */\n      0x00\n        /* \"#utility.yul\":1446:1458   */\n      revert\n        /* \"#utility.yul\":1408:1460   */\n    tag_191:\n        /* \"#utility.yul\":1479:1508   */\n      tag_192\n        /* \"#utility.yul\":1498:1507   */\n      dup5\n        /* \"#utility.yul\":1479:1508   */\n      tag_176\n      jump\t// in\n    tag_192:\n        /* \"#utility.yul\":1469:1508   */\n      swap3\n      pop\n        /* \"#utility.yul\":1527:1565   */\n      tag_193\n        /* \"#utility.yul\":1561:1563   */\n      0x20\n        /* \"#utility.yul\":1550:1559   */\n      dup6\n        /* \"#utility.yul\":1546:1564   */\n      add\n        /* \"#utility.yul\":1527:1565   */\n      tag_176\n      jump\t// in\n    tag_193:\n        /* \"#utility.yul\":1294:1668   */\n      swap3\n      swap6\n        /* \"#utility.yul\":1517:1565   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1634:1636   */\n      0x40\n        /* \"#utility.yul\":1619:1637   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1606:1638   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1294:1668   */\n      jump\t// out\n        /* \"#utility.yul\":1862:2048   */\n    tag_39:\n        /* \"#utility.yul\":1921:1927   */\n      0x00\n        /* \"#utility.yul\":1974:1976   */\n      0x20\n        /* \"#utility.yul\":1962:1971   */\n      dup3\n        /* \"#utility.yul\":1953:1960   */\n      dup5\n        /* \"#utility.yul\":1949:1972   */\n      sub\n        /* \"#utility.yul\":1945:1977   */\n      slt\n        /* \"#utility.yul\":1942:1994   */\n      iszero\n      tag_196\n      jumpi\n        /* \"#utility.yul\":1990:1991   */\n      0x00\n        /* \"#utility.yul\":1987:1988   */\n      0x00\n        /* \"#utility.yul\":1980:1992   */\n      revert\n        /* \"#utility.yul\":1942:1994   */\n    tag_196:\n        /* \"#utility.yul\":2013:2042   */\n      tag_197\n        /* \"#utility.yul\":2032:2041   */\n      dup3\n        /* \"#utility.yul\":2013:2042   */\n      tag_176\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":2003:2042   */\n      swap4\n        /* \"#utility.yul\":1862:2048   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2053:2313   */\n    tag_54:\n        /* \"#utility.yul\":2121:2127   */\n      0x00\n        /* \"#utility.yul\":2129:2135   */\n      0x00\n        /* \"#utility.yul\":2182:2184   */\n      0x40\n        /* \"#utility.yul\":2170:2179   */\n      dup4\n        /* \"#utility.yul\":2161:2168   */\n      dup6\n        /* \"#utility.yul\":2157:2180   */\n      sub\n        /* \"#utility.yul\":2153:2185   */\n      slt\n        /* \"#utility.yul\":2150:2202   */\n      iszero\n      tag_199\n      jumpi\n        /* \"#utility.yul\":2198:2199   */\n      0x00\n        /* \"#utility.yul\":2195:2196   */\n      0x00\n        /* \"#utility.yul\":2188:2200   */\n      revert\n        /* \"#utility.yul\":2150:2202   */\n    tag_199:\n        /* \"#utility.yul\":2221:2250   */\n      tag_200\n        /* \"#utility.yul\":2240:2249   */\n      dup4\n        /* \"#utility.yul\":2221:2250   */\n      tag_176\n      jump\t// in\n    tag_200:\n        /* \"#utility.yul\":2211:2250   */\n      swap2\n      pop\n        /* \"#utility.yul\":2269:2307   */\n      tag_201\n        /* \"#utility.yul\":2303:2305   */\n      0x20\n        /* \"#utility.yul\":2292:2301   */\n      dup5\n        /* \"#utility.yul\":2288:2306   */\n      add\n        /* \"#utility.yul\":2269:2307   */\n      tag_176\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":2259:2307   */\n      swap1\n      pop\n        /* \"#utility.yul\":2053:2313   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2318:2698   */\n    tag_61:\n        /* \"#utility.yul\":2397:2398   */\n      0x01\n        /* \"#utility.yul\":2393:2405   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2440:2452   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2461:2522   */\n      tag_203\n      jumpi\n        /* \"#utility.yul\":2515:2519   */\n      0x7f\n        /* \"#utility.yul\":2507:2513   */\n      dup3\n        /* \"#utility.yul\":2503:2520   */\n      and\n        /* \"#utility.yul\":2493:2520   */\n      swap2\n      pop\n        /* \"#utility.yul\":2461:2522   */\n    tag_203:\n        /* \"#utility.yul\":2568:2570   */\n      0x20\n        /* \"#utility.yul\":2560:2566   */\n      dup3\n        /* \"#utility.yul\":2557:2571   */\n      lt\n        /* \"#utility.yul\":2537:2555   */\n      dup2\n        /* \"#utility.yul\":2534:2572   */\n      sub\n        /* \"#utility.yul\":2531:2692   */\n      tag_204\n      jumpi\n        /* \"#utility.yul\":2614:2624   */\n      0x4e487b71\n        /* \"#utility.yul\":2609:2612   */\n      0xe0\n        /* \"#utility.yul\":2605:2625   */\n      shl\n        /* \"#utility.yul\":2602:2603   */\n      0x00\n        /* \"#utility.yul\":2595:2626   */\n      mstore\n        /* \"#utility.yul\":2649:2653   */\n      0x22\n        /* \"#utility.yul\":2646:2647   */\n      0x04\n        /* \"#utility.yul\":2639:2654   */\n      mstore\n        /* \"#utility.yul\":2677:2681   */\n      0x24\n        /* \"#utility.yul\":2674:2675   */\n      0x00\n        /* \"#utility.yul\":2667:2682   */\n      revert\n        /* \"#utility.yul\":2531:2692   */\n    tag_204:\n      pop\n        /* \"#utility.yul\":2318:2698   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3828:4050   */\n    tag_156:\n        /* \"#utility.yul\":3893:3902   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3914:3924   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":3911:4044   */\n      iszero\n      tag_66\n      jumpi\n        /* \"#utility.yul\":3966:3976   */\n      0x4e487b71\n        /* \"#utility.yul\":3961:3964   */\n      0xe0\n        /* \"#utility.yul\":3957:3977   */\n      shl\n        /* \"#utility.yul\":3954:3955   */\n      0x00\n        /* \"#utility.yul\":3947:3978   */\n      mstore\n        /* \"#utility.yul\":4001:4005   */\n      0x11\n        /* \"#utility.yul\":3998:3999   */\n      0x04\n        /* \"#utility.yul\":3991:4006   */\n      mstore\n        /* \"#utility.yul\":4029:4033   */\n      0x24\n        /* \"#utility.yul\":4026:4027   */\n      0x00\n        /* \"#utility.yul\":4019:4034   */\n      revert\n        /* \"#utility.yul\":4055:4182   */\n    tag_177:\n        /* \"#utility.yul\":4116:4126   */\n      0x4e487b71\n        /* \"#utility.yul\":4111:4114   */\n      0xe0\n        /* \"#utility.yul\":4107:4127   */\n      shl\n        /* \"#utility.yul\":4104:4105   */\n      0x00\n        /* \"#utility.yul\":4097:4128   */\n      mstore\n        /* \"#utility.yul\":4147:4151   */\n      0x41\n        /* \"#utility.yul\":4144:4145   */\n      0x04\n        /* \"#utility.yul\":4137:4152   */\n      mstore\n        /* \"#utility.yul\":4171:4175   */\n      0x24\n        /* \"#utility.yul\":4168:4169   */\n      0x00\n        /* \"#utility.yul\":4161:4176   */\n      revert\n        /* \"#utility.yul\":4313:4831   */\n    tag_179:\n        /* \"#utility.yul\":4415:4417   */\n      0x1f\n        /* \"#utility.yul\":4410:4413   */\n      dup3\n        /* \"#utility.yul\":4407:4418   */\n      gt\n        /* \"#utility.yul\":4404:4825   */\n      iszero\n      tag_116\n      jumpi\n        /* \"#utility.yul\":4451:4456   */\n      dup1\n        /* \"#utility.yul\":4448:4449   */\n      0x00\n        /* \"#utility.yul\":4441:4457   */\n      mstore\n        /* \"#utility.yul\":4495:4499   */\n      0x20\n        /* \"#utility.yul\":4492:4493   */\n      0x00\n        /* \"#utility.yul\":4482:4500   */\n      keccak256\n        /* \"#utility.yul\":4565:4567   */\n      0x1f\n        /* \"#utility.yul\":4553:4563   */\n      dup5\n        /* \"#utility.yul\":4549:4568   */\n      add\n        /* \"#utility.yul\":4546:4547   */\n      0x05\n        /* \"#utility.yul\":4542:4569   */\n      shr\n        /* \"#utility.yul\":4536:4540   */\n      dup2\n        /* \"#utility.yul\":4532:4570   */\n      add\n        /* \"#utility.yul\":4601:4605   */\n      0x20\n        /* \"#utility.yul\":4589:4599   */\n      dup6\n        /* \"#utility.yul\":4586:4606   */\n      lt\n        /* \"#utility.yul\":4583:4630   */\n      iszero\n      tag_215\n      jumpi\n      pop\n        /* \"#utility.yul\":4624:4628   */\n      dup1\n        /* \"#utility.yul\":4583:4630   */\n    tag_215:\n        /* \"#utility.yul\":4679:4681   */\n      0x1f\n        /* \"#utility.yul\":4674:4677   */\n      dup5\n        /* \"#utility.yul\":4670:4682   */\n      add\n        /* \"#utility.yul\":4667:4668   */\n      0x05\n        /* \"#utility.yul\":4663:4683   */\n      shr\n        /* \"#utility.yul\":4657:4661   */\n      dup3\n        /* \"#utility.yul\":4653:4684   */\n      add\n        /* \"#utility.yul\":4643:4684   */\n      swap2\n      pop\n        /* \"#utility.yul\":4734:4815   */\n    tag_216:\n        /* \"#utility.yul\":4752:4754   */\n      dup2\n        /* \"#utility.yul\":4745:4750   */\n      dup2\n        /* \"#utility.yul\":4742:4755   */\n      lt\n        /* \"#utility.yul\":4734:4815   */\n      iszero\n      tag_150\n      jumpi\n        /* \"#utility.yul\":4811:4812   */\n      0x00\n        /* \"#utility.yul\":4797:4813   */\n      dup2\n      sstore\n        /* \"#utility.yul\":4778:4779   */\n      0x01\n        /* \"#utility.yul\":4767:4780   */\n      add\n        /* \"#utility.yul\":4734:4815   */\n      jump(tag_216)\n        /* \"#utility.yul\":5007:6306   */\n    tag_172:\n        /* \"#utility.yul\":5133:5136   */\n      dup2\n        /* \"#utility.yul\":5127:5137   */\n      mload\n        /* \"#utility.yul\":5160:5178   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":5152:5158   */\n      dup2\n        /* \"#utility.yul\":5149:5179   */\n      gt\n        /* \"#utility.yul\":5146:5202   */\n      iszero\n      tag_222\n      jumpi\n        /* \"#utility.yul\":5182:5200   */\n      tag_222\n      tag_177\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":5211:5308   */\n      tag_223\n        /* \"#utility.yul\":5301:5307   */\n      dup2\n        /* \"#utility.yul\":5261:5299   */\n      tag_224\n        /* \"#utility.yul\":5293:5297   */\n      dup5\n        /* \"#utility.yul\":5287:5298   */\n      sload\n        /* \"#utility.yul\":5261:5299   */\n      tag_61\n      jump\t// in\n    tag_224:\n        /* \"#utility.yul\":5255:5259   */\n      dup5\n        /* \"#utility.yul\":5211:5308   */\n      tag_179\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":5357:5361   */\n      0x20\n        /* \"#utility.yul\":5388:5390   */\n      0x1f\n        /* \"#utility.yul\":5377:5391   */\n      dup3\n      gt\n        /* \"#utility.yul\":5405:5406   */\n      0x01\n        /* \"#utility.yul\":5400:6049   */\n      dup2\n      eq\n      tag_226\n      jumpi\n        /* \"#utility.yul\":6093:6094   */\n      0x00\n        /* \"#utility.yul\":6110:6116   */\n      dup4\n        /* \"#utility.yul\":6107:6196   */\n      iszero\n      tag_227\n      jumpi\n      pop\n        /* \"#utility.yul\":6162:6181   */\n      dup5\n      dup3\n      add\n        /* \"#utility.yul\":6156:6182   */\n      mload\n        /* \"#utility.yul\":6107:6196   */\n    tag_227:\n      not(0x00)\n        /* \"#utility.yul\":4964:4965   */\n      0x03\n        /* \"#utility.yul\":4960:4971   */\n      dup6\n      swap1\n      shl\n        /* \"#utility.yul\":4956:4980   */\n      shr\n        /* \"#utility.yul\":4952:4981   */\n      not\n        /* \"#utility.yul\":4942:4982   */\n      and\n        /* \"#utility.yul\":4988:4989   */\n      0x01\n        /* \"#utility.yul\":4984:4995   */\n      dup5\n      swap1\n      shl\n        /* \"#utility.yul\":4939:4996   */\n      or\n        /* \"#utility.yul\":6209:6290   */\n      dup5\n      sstore\n        /* \"#utility.yul\":5370:6300   */\n      jump(tag_150)\n        /* \"#utility.yul\":5400:6049   */\n    tag_226:\n        /* \"#utility.yul\":4260:4261   */\n      0x00\n        /* \"#utility.yul\":4253:4267   */\n      dup5\n      dup2\n      mstore\n        /* \"#utility.yul\":4297:4301   */\n      0x20\n        /* \"#utility.yul\":4284:4302   */\n      dup2\n      keccak256\n      not(0x1f)\n        /* \"#utility.yul\":5436:5456   */\n      dup6\n      and\n      swap2\n        /* \"#utility.yul\":5554:5776   */\n    tag_230:\n        /* \"#utility.yul\":5568:5575   */\n      dup3\n        /* \"#utility.yul\":5565:5566   */\n      dup2\n        /* \"#utility.yul\":5562:5576   */\n      lt\n        /* \"#utility.yul\":5554:5776   */\n      iszero\n      tag_232\n      jumpi\n        /* \"#utility.yul\":5650:5669   */\n      dup8\n      dup6\n      add\n        /* \"#utility.yul\":5644:5670   */\n      mload\n        /* \"#utility.yul\":5629:5671   */\n      dup3\n      sstore\n        /* \"#utility.yul\":5757:5761   */\n      0x20\n        /* \"#utility.yul\":5742:5762   */\n      swap5\n      dup6\n      add\n      swap5\n        /* \"#utility.yul\":5710:5711   */\n      0x01\n        /* \"#utility.yul\":5698:5712   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"#utility.yul\":5584:5596   */\n      add\n        /* \"#utility.yul\":5554:5776   */\n      jump(tag_230)\n    tag_232:\n        /* \"#utility.yul\":5558:5561   */\n      pop\n        /* \"#utility.yul\":5804:5810   */\n      dup5\n        /* \"#utility.yul\":5795:5802   */\n      dup3\n        /* \"#utility.yul\":5792:5811   */\n      lt\n        /* \"#utility.yul\":5789:5990   */\n      iszero\n      tag_233\n      jumpi\n        /* \"#utility.yul\":5865:5884   */\n      dup7\n      dup5\n      add\n        /* \"#utility.yul\":5859:5885   */\n      mload\n      not(0x00)\n        /* \"#utility.yul\":5948:5949   */\n      0x03\n        /* \"#utility.yul\":5944:5958   */\n      dup8\n      swap1\n      shl\n        /* \"#utility.yul\":5960:5963   */\n      0xf8\n        /* \"#utility.yul\":5940:5964   */\n      and\n        /* \"#utility.yul\":5936:5973   */\n      shr\n        /* \"#utility.yul\":5932:5974   */\n      not\n        /* \"#utility.yul\":5917:5975   */\n      and\n        /* \"#utility.yul\":5902:5976   */\n      dup2\n      sstore\n        /* \"#utility.yul\":5789:5990   */\n    tag_233:\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":6036:6037   */\n      0x01\n        /* \"#utility.yul\":6020:6034   */\n      swap1\n      dup2\n      shl\n        /* \"#utility.yul\":6016:6038   */\n      add\n        /* \"#utility.yul\":6003:6039   */\n      swap1\n      sstore\n      pop\n        /* \"#utility.yul\":5007:6306   */\n      jump\t// out\n    stop\n    data_3874827173e8df9f34323b12b251d1d3c53926ce129e30a0d69f1d47c277041b 52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00\n\n    auxdata: 0xa264697066735822122068907af953dc9a836a664d7f0a328e8d1d810148587e0be7bafb63237201c08564736f6c634300081d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f5ffd5b50610b8e8061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061009b575f3560e01c806370a082311161006357806370a082311461013357806395d89b4114610167578063a9059cbb1461016f578063c4d66de814610182578063dd62ed3e14610197575f5ffd5b806306fdde031461009f578063095ea7b3146100bd57806318160ddd146100e057806323b872dd14610111578063313ce56714610124575b5f5ffd5b6100a76101aa565b6040516100b491906108cb565b60405180910390f35b6100d06100cb36600461091b565b61026a565b60405190151581526020016100b4565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02545b6040519081526020016100b4565b6100d061011f366004610943565b610283565b604051601281526020016100b4565b61010361014136600461097d565b6001600160a01b03165f9081525f516020610b395f395f51905f52602052604090205490565b6100a76102a6565b6100d061017d36600461091b565b6102e4565b61019561019036600461097d565b6102f1565b005b6101036101a536600461099d565b6104ae565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0380546060915f516020610b395f395f51905f52916101e8906109ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610214906109ce565b801561025f5780601f106102365761010080835404028352916020019161025f565b820191905f5260205f20905b81548152906001019060200180831161024257829003601f168201915b505050505091505090565b5f336102778185856104f7565b60019150505b92915050565b5f33610290858285610509565b61029b85858561056c565b506001949350505050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060915f516020610b395f395f51905f52916101e8906109ce565b5f3361027781858561056c565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff165f811580156103365750825b90505f8267ffffffffffffffff1660011480156103525750303b155b905081158015610360575080155b1561037e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156103a857845460ff60401b1916600160401b1785555b6001600160a01b0386166104035760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420636f6d6d756e6974792077616c6c6574000000000000000060448201526064015b60405180910390fd5b61044b604051806040016040528060098152602001685248454d20566f746560b81b8152506040518060400160405280600581526020016452564f544560d81b8152506105c9565b610460866a52b7d2dcc80cd2e40000006105df565b83156104a657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6001600160a01b039182165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b6105048383836001610613565b505050565b5f61051484846104ae565b90505f198114610566578181101561055857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103fa565b61056684848484035f610613565b50505050565b6001600160a01b03831661059557604051634b637e8f60e11b81525f60048201526024016103fa565b6001600160a01b0382166105be5760405163ec442f0560e01b81525f60048201526024016103fa565b6105048383836106f7565b6105d1610830565b6105db828261087b565b5050565b6001600160a01b0382166106085760405163ec442f0560e01b81525f60048201526024016103fa565b6105db5f83836106f7565b5f516020610b395f395f51905f526001600160a01b03851661064a5760405163e602df0560e01b81525f60048201526024016103fa565b6001600160a01b03841661067357604051634a1406b160e11b81525f60048201526024016103fa565b6001600160a01b038086165f908152600183016020908152604080832093881683529290522083905581156106f057836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516106e791815260200190565b60405180910390a35b5050505050565b5f516020610b395f395f51905f526001600160a01b0384166107315781816002015f8282546107269190610a06565b909155506107a19050565b6001600160a01b0384165f90815260208290526040902054828110156107835760405163391434e360e21b81526001600160a01b038616600482015260248101829052604481018490526064016103fa565b6001600160a01b0385165f9081526020839052604090209083900390555b6001600160a01b0383166107bf5760028101805483900390556107dd565b6001600160a01b0383165f9081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161082291815260200190565b60405180910390a350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661087957604051631afcd79f60e31b815260040160405180910390fd5b565b610883610830565b5f516020610b395f395f51905f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace036108bc8482610a7d565b50600481016105668382610a7d565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610916575f5ffd5b919050565b5f5f6040838503121561092c575f5ffd5b61093583610900565b946020939093013593505050565b5f5f5f60608486031215610955575f5ffd5b61095e84610900565b925061096c60208501610900565b929592945050506040919091013590565b5f6020828403121561098d575f5ffd5b61099682610900565b9392505050565b5f5f604083850312156109ae575f5ffd5b6109b783610900565b91506109c560208401610900565b90509250929050565b600181811c908216806109e257607f821691505b602082108103610a0057634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561027d57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b601f82111561050457805f5260205f20601f840160051c81016020851015610a5e5750805b601f840160051c820191505b818110156106f0575f8155600101610a6a565b815167ffffffffffffffff811115610a9757610a97610a25565b610aab81610aa584546109ce565b84610a39565b6020601f821160018114610add575f8315610ac65750848201515b5f19600385901b1c1916600184901b1784556106f0565b5f84815260208120601f198516915b82811015610b0c5787850151825560209485019460019092019101610aec565b5084821015610b2957868401515f19600387901b60f8161c191681555b50505050600190811b0190555056fe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00a264697066735822122068907af953dc9a836a664d7f0a328e8d1d810148587e0be7bafb63237201c08564736f6c634300081d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH2 0xB8E DUP1 PUSH2 0x1C PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9B JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x197 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x124 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xA7 PUSH2 0x1AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD0 PUSH2 0xCB CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x26A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH2 0xD0 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0x943 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA7 PUSH2 0x2A6 JUMP JUMPDEST PUSH2 0xD0 PUSH2 0x17D CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x2E4 JUMP JUMPDEST PUSH2 0x195 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x97D JUMP JUMPDEST PUSH2 0x2F1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x103 PUSH2 0x1A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x99D JUMP JUMPDEST PUSH2 0x4AE JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 PUSH2 0x1E8 SWAP1 PUSH2 0x9CE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x214 SWAP1 PUSH2 0x9CE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x25F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x236 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x25F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x242 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x277 DUP2 DUP6 DUP6 PUSH2 0x4F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x290 DUP6 DUP3 DUP6 PUSH2 0x509 JUMP JUMPDEST PUSH2 0x29B DUP6 DUP6 DUP6 PUSH2 0x56C JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE04 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 PUSH2 0x1E8 SWAP1 PUSH2 0x9CE JUMP JUMPDEST PUSH0 CALLER PUSH2 0x277 DUP2 DUP6 DUP6 PUSH2 0x56C JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x336 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x352 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x360 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x37E JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x3A8 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x403 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6D6D756E6974792077616C6C65740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x44B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x5248454D20566F7465 PUSH1 0xB8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x52564F5445 PUSH1 0xD8 SHL DUP2 MSTORE POP PUSH2 0x5C9 JUMP JUMPDEST PUSH2 0x460 DUP7 PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x5DF JUMP JUMPDEST DUP4 ISZERO PUSH2 0x4A6 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE01 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x504 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x613 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x514 DUP5 DUP5 PUSH2 0x4AE JUMP JUMPDEST SWAP1 POP PUSH0 NOT DUP2 EQ PUSH2 0x566 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH2 0x566 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x613 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x595 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BE JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH2 0x504 DUP4 DUP4 DUP4 PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x5D1 PUSH2 0x830 JUMP JUMPDEST PUSH2 0x5DB DUP3 DUP3 PUSH2 0x87B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x608 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH2 0x5DB PUSH0 DUP4 DUP4 PUSH2 0x6F7 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x64A JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x673 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP4 SWAP1 SSTORE DUP2 ISZERO PUSH2 0x6F0 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0x6E7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x731 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x726 SWAP2 SWAP1 PUSH2 0xA06 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x7A1 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x783 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP4 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7BF JUMPI PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x822 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x879 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x883 PUSH2 0x830 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 PUSH2 0x8BC DUP5 DUP3 PUSH2 0xA7D JUMP JUMPDEST POP PUSH1 0x4 DUP2 ADD PUSH2 0x566 DUP4 DUP3 PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x916 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x92C JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x935 DUP4 PUSH2 0x900 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x955 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x95E DUP5 PUSH2 0x900 JUMP JUMPDEST SWAP3 POP PUSH2 0x96C PUSH1 0x20 DUP6 ADD PUSH2 0x900 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x98D JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x996 DUP3 PUSH2 0x900 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9AE JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9B7 DUP4 PUSH2 0x900 JUMP JUMPDEST SWAP2 POP PUSH2 0x9C5 PUSH1 0x20 DUP5 ADD PUSH2 0x900 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x9E2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xA00 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x27D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x504 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0xA5E JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6F0 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xA6A JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA97 JUMPI PUSH2 0xA97 PUSH2 0xA25 JUMP JUMPDEST PUSH2 0xAAB DUP2 PUSH2 0xAA5 DUP5 SLOAD PUSH2 0x9CE JUMP JUMPDEST DUP5 PUSH2 0xA39 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0xADD JUMPI PUSH0 DUP4 ISZERO PUSH2 0xAC6 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x6F0 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB0C JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xAEC JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0xB29 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID MSTORE 0xC6 ORIGIN SELFBALANCE RJUMPI 0xF47D 0xB1 SWAP14 TLOAD RJUMP 0x4600 ADDRESS 0xC4 SWAP8 CREATE PUSH8 0xCA4CEBF71BA98EEA 0xDA 0xBE KECCAK256 0xBA 0xCE STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x907AF953DC9A836A66 0x4D PUSH32 0xA328E8D1D810148587E0BE7BAFB63237201C08564736F6C634300081D003300 ",
							"sourceMap": "346:312:3:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__ERC20_init_603": {
									"entryPoint": 1481,
									"id": 603,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20_init_unchained_631": {
									"entryPoint": 2171,
									"id": 631,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_approve_1035": {
									"entryPoint": 1271,
									"id": 1035,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1103": {
									"entryPoint": 1555,
									"id": 1103,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkInitializing_457": {
									"entryPoint": 2096,
									"id": 457,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getERC20Storage_587": {
									"entryPoint": null,
									"id": 587,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getInitializableStorage_534": {
									"entryPoint": null,
									"id": 534,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_isInitializing_525": {
									"entryPoint": null,
									"id": 525,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_984": {
									"entryPoint": 1503,
									"id": 984,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1180": {
									"entryPoint": null,
									"id": 1180,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_1151": {
									"entryPoint": 1289,
									"id": 1151,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_859": {
									"entryPoint": 1388,
									"id": 859,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_951": {
									"entryPoint": 1783,
									"id": 951,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_756": {
									"entryPoint": 1198,
									"id": 756,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_780": {
									"entryPoint": 618,
									"id": 780,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_708": {
									"entryPoint": null,
									"id": 708,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_672": {
									"entryPoint": null,
									"id": 672,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@initialize_280": {
									"entryPoint": 753,
									"id": 280,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@name_647": {
									"entryPoint": 426,
									"id": 647,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_663": {
									"entryPoint": 678,
									"id": 663,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_688": {
									"entryPoint": null,
									"id": 688,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_812": {
									"entryPoint": 643,
									"id": 812,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_732": {
									"entryPoint": 740,
									"id": 732,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 2304,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2429,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2461,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 2371,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2331,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2251,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0e6aa9e82df9ed735f6dba8fe33ecac07fe34e5696eb7e317a220817b24d3a2b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2566,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 2617,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 2685,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 2510,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 2597,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:6308:7",
										"nodeType": "YulBlock",
										"src": "0:6308:7",
										"statements": [
											{
												"nativeSrc": "6:3:7",
												"nodeType": "YulBlock",
												"src": "6:3:7",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "135:297:7",
													"nodeType": "YulBlock",
													"src": "135:297:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "152:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "152:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "163:2:7",
																		"nodeType": "YulLiteral",
																		"src": "163:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "145:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "145:6:7"
																},
																"nativeSrc": "145:21:7",
																"nodeType": "YulFunctionCall",
																"src": "145:21:7"
															},
															"nativeSrc": "145:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "145:21:7"
														},
														{
															"nativeSrc": "175:27:7",
															"nodeType": "YulVariableDeclaration",
															"src": "175:27:7",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "195:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "195:6:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "189:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "189:5:7"
																},
																"nativeSrc": "189:13:7",
																"nodeType": "YulFunctionCall",
																"src": "189:13:7"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "179:6:7",
																	"nodeType": "YulTypedName",
																	"src": "179:6:7",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "222:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "222:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "233:2:7",
																				"nodeType": "YulLiteral",
																				"src": "233:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "218:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "218:3:7"
																		},
																		"nativeSrc": "218:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "218:18:7"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "238:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "238:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "211:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "211:6:7"
																},
																"nativeSrc": "211:34:7",
																"nodeType": "YulFunctionCall",
																"src": "211:34:7"
															},
															"nativeSrc": "211:34:7",
															"nodeType": "YulExpressionStatement",
															"src": "211:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "264:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "264:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "275:2:7",
																				"nodeType": "YulLiteral",
																				"src": "275:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "260:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "260:3:7"
																		},
																		"nativeSrc": "260:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "260:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "284:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "284:6:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "292:2:7",
																				"nodeType": "YulLiteral",
																				"src": "292:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "280:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "280:3:7"
																		},
																		"nativeSrc": "280:15:7",
																		"nodeType": "YulFunctionCall",
																		"src": "280:15:7"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "297:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "297:6:7"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "254:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "254:5:7"
																},
																"nativeSrc": "254:50:7",
																"nodeType": "YulFunctionCall",
																"src": "254:50:7"
															},
															"nativeSrc": "254:50:7",
															"nodeType": "YulExpressionStatement",
															"src": "254:50:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "328:9:7",
																						"nodeType": "YulIdentifier",
																						"src": "328:9:7"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "339:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "339:6:7"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "324:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "324:3:7"
																				},
																				"nativeSrc": "324:22:7",
																				"nodeType": "YulFunctionCall",
																				"src": "324:22:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "348:2:7",
																				"nodeType": "YulLiteral",
																				"src": "348:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "320:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "320:3:7"
																		},
																		"nativeSrc": "320:31:7",
																		"nodeType": "YulFunctionCall",
																		"src": "320:31:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "353:1:7",
																		"nodeType": "YulLiteral",
																		"src": "353:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "313:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "313:6:7"
																},
																"nativeSrc": "313:42:7",
																"nodeType": "YulFunctionCall",
																"src": "313:42:7"
															},
															"nativeSrc": "313:42:7",
															"nodeType": "YulExpressionStatement",
															"src": "313:42:7"
														},
														{
															"nativeSrc": "364:62:7",
															"nodeType": "YulAssignment",
															"src": "364:62:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "380:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "380:9:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "399:6:7",
																								"nodeType": "YulIdentifier",
																								"src": "399:6:7"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "407:2:7",
																								"nodeType": "YulLiteral",
																								"src": "407:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "395:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "395:3:7"
																						},
																						"nativeSrc": "395:15:7",
																						"nodeType": "YulFunctionCall",
																						"src": "395:15:7"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "416:2:7",
																								"nodeType": "YulLiteral",
																								"src": "416:2:7",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "412:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "412:3:7"
																						},
																						"nativeSrc": "412:7:7",
																						"nodeType": "YulFunctionCall",
																						"src": "412:7:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "391:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "391:3:7"
																				},
																				"nativeSrc": "391:29:7",
																				"nodeType": "YulFunctionCall",
																				"src": "391:29:7"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "376:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "376:3:7"
																		},
																		"nativeSrc": "376:45:7",
																		"nodeType": "YulFunctionCall",
																		"src": "376:45:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "423:2:7",
																		"nodeType": "YulLiteral",
																		"src": "423:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "372:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "372:3:7"
																},
																"nativeSrc": "372:54:7",
																"nodeType": "YulFunctionCall",
																"src": "372:54:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "364:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "364:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "14:418:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "104:9:7",
														"nodeType": "YulTypedName",
														"src": "104:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "115:6:7",
														"nodeType": "YulTypedName",
														"src": "115:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "126:4:7",
														"nodeType": "YulTypedName",
														"src": "126:4:7",
														"type": ""
													}
												],
												"src": "14:418:7"
											},
											{
												"body": {
													"nativeSrc": "486:124:7",
													"nodeType": "YulBlock",
													"src": "486:124:7",
													"statements": [
														{
															"nativeSrc": "496:29:7",
															"nodeType": "YulAssignment",
															"src": "496:29:7",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "518:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "518:6:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "505:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "505:12:7"
																},
																"nativeSrc": "505:20:7",
																"nodeType": "YulFunctionCall",
																"src": "505:20:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "496:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "496:5:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "588:16:7",
																"nodeType": "YulBlock",
																"src": "588:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "597:1:7",
																					"nodeType": "YulLiteral",
																					"src": "597:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "600:1:7",
																					"nodeType": "YulLiteral",
																					"src": "600:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "590:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "590:6:7"
																			},
																			"nativeSrc": "590:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "590:12:7"
																		},
																		"nativeSrc": "590:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "590:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "547:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "547:5:7"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "558:5:7",
																						"nodeType": "YulIdentifier",
																						"src": "558:5:7"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "573:3:7",
																										"nodeType": "YulLiteral",
																										"src": "573:3:7",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "578:1:7",
																										"nodeType": "YulLiteral",
																										"src": "578:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "569:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "569:3:7"
																								},
																								"nativeSrc": "569:11:7",
																								"nodeType": "YulFunctionCall",
																								"src": "569:11:7"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "582:1:7",
																								"nodeType": "YulLiteral",
																								"src": "582:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "565:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "565:3:7"
																						},
																						"nativeSrc": "565:19:7",
																						"nodeType": "YulFunctionCall",
																						"src": "565:19:7"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "554:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "554:3:7"
																				},
																				"nativeSrc": "554:31:7",
																				"nodeType": "YulFunctionCall",
																				"src": "554:31:7"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "544:2:7",
																			"nodeType": "YulIdentifier",
																			"src": "544:2:7"
																		},
																		"nativeSrc": "544:42:7",
																		"nodeType": "YulFunctionCall",
																		"src": "544:42:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "537:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "537:6:7"
																},
																"nativeSrc": "537:50:7",
																"nodeType": "YulFunctionCall",
																"src": "537:50:7"
															},
															"nativeSrc": "534:70:7",
															"nodeType": "YulIf",
															"src": "534:70:7"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "437:173:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "465:6:7",
														"nodeType": "YulTypedName",
														"src": "465:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "476:5:7",
														"nodeType": "YulTypedName",
														"src": "476:5:7",
														"type": ""
													}
												],
												"src": "437:173:7"
											},
											{
												"body": {
													"nativeSrc": "702:213:7",
													"nodeType": "YulBlock",
													"src": "702:213:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "748:16:7",
																"nodeType": "YulBlock",
																"src": "748:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "757:1:7",
																					"nodeType": "YulLiteral",
																					"src": "757:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "760:1:7",
																					"nodeType": "YulLiteral",
																					"src": "760:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "750:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "750:6:7"
																			},
																			"nativeSrc": "750:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "750:12:7"
																		},
																		"nativeSrc": "750:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "750:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "723:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "723:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "732:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "732:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "719:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "719:3:7"
																		},
																		"nativeSrc": "719:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "719:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "744:2:7",
																		"nodeType": "YulLiteral",
																		"src": "744:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "715:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "715:3:7"
																},
																"nativeSrc": "715:32:7",
																"nodeType": "YulFunctionCall",
																"src": "715:32:7"
															},
															"nativeSrc": "712:52:7",
															"nodeType": "YulIf",
															"src": "712:52:7"
														},
														{
															"nativeSrc": "773:39:7",
															"nodeType": "YulAssignment",
															"src": "773:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "802:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "802:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "783:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "783:18:7"
																},
																"nativeSrc": "783:29:7",
																"nodeType": "YulFunctionCall",
																"src": "783:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "773:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "773:6:7"
																}
															]
														},
														{
															"nativeSrc": "821:14:7",
															"nodeType": "YulVariableDeclaration",
															"src": "821:14:7",
															"value": {
																"kind": "number",
																"nativeSrc": "834:1:7",
																"nodeType": "YulLiteral",
																"src": "834:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "825:5:7",
																	"nodeType": "YulTypedName",
																	"src": "825:5:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "844:41:7",
															"nodeType": "YulAssignment",
															"src": "844:41:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "870:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "870:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "881:2:7",
																				"nodeType": "YulLiteral",
																				"src": "881:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "866:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "866:3:7"
																		},
																		"nativeSrc": "866:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "866:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "853:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "853:12:7"
																},
																"nativeSrc": "853:32:7",
																"nodeType": "YulFunctionCall",
																"src": "853:32:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "844:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "844:5:7"
																}
															]
														},
														{
															"nativeSrc": "894:15:7",
															"nodeType": "YulAssignment",
															"src": "894:15:7",
															"value": {
																"name": "value",
																"nativeSrc": "904:5:7",
																"nodeType": "YulIdentifier",
																"src": "904:5:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "894:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "894:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "615:300:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "660:9:7",
														"nodeType": "YulTypedName",
														"src": "660:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "671:7:7",
														"nodeType": "YulTypedName",
														"src": "671:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "683:6:7",
														"nodeType": "YulTypedName",
														"src": "683:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "691:6:7",
														"nodeType": "YulTypedName",
														"src": "691:6:7",
														"type": ""
													}
												],
												"src": "615:300:7"
											},
											{
												"body": {
													"nativeSrc": "1015:92:7",
													"nodeType": "YulBlock",
													"src": "1015:92:7",
													"statements": [
														{
															"nativeSrc": "1025:26:7",
															"nodeType": "YulAssignment",
															"src": "1025:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1037:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1037:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1048:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1048:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1033:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1033:3:7"
																},
																"nativeSrc": "1033:18:7",
																"nodeType": "YulFunctionCall",
																"src": "1033:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1025:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "1025:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1067:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1067:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1092:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "1092:6:7"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1085:6:7",
																					"nodeType": "YulIdentifier",
																					"src": "1085:6:7"
																				},
																				"nativeSrc": "1085:14:7",
																				"nodeType": "YulFunctionCall",
																				"src": "1085:14:7"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1078:6:7",
																			"nodeType": "YulIdentifier",
																			"src": "1078:6:7"
																		},
																		"nativeSrc": "1078:22:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1078:22:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1060:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1060:6:7"
																},
																"nativeSrc": "1060:41:7",
																"nodeType": "YulFunctionCall",
																"src": "1060:41:7"
															},
															"nativeSrc": "1060:41:7",
															"nodeType": "YulExpressionStatement",
															"src": "1060:41:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "920:187:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "984:9:7",
														"nodeType": "YulTypedName",
														"src": "984:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "995:6:7",
														"nodeType": "YulTypedName",
														"src": "995:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1006:4:7",
														"nodeType": "YulTypedName",
														"src": "1006:4:7",
														"type": ""
													}
												],
												"src": "920:187:7"
											},
											{
												"body": {
													"nativeSrc": "1213:76:7",
													"nodeType": "YulBlock",
													"src": "1213:76:7",
													"statements": [
														{
															"nativeSrc": "1223:26:7",
															"nodeType": "YulAssignment",
															"src": "1223:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1235:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1235:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1246:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1246:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1231:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1231:3:7"
																},
																"nativeSrc": "1231:18:7",
																"nodeType": "YulFunctionCall",
																"src": "1231:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1223:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "1223:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1265:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1265:9:7"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1276:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "1276:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1258:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1258:6:7"
																},
																"nativeSrc": "1258:25:7",
																"nodeType": "YulFunctionCall",
																"src": "1258:25:7"
															},
															"nativeSrc": "1258:25:7",
															"nodeType": "YulExpressionStatement",
															"src": "1258:25:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1112:177:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1182:9:7",
														"nodeType": "YulTypedName",
														"src": "1182:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1193:6:7",
														"nodeType": "YulTypedName",
														"src": "1193:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1204:4:7",
														"nodeType": "YulTypedName",
														"src": "1204:4:7",
														"type": ""
													}
												],
												"src": "1112:177:7"
											},
											{
												"body": {
													"nativeSrc": "1398:270:7",
													"nodeType": "YulBlock",
													"src": "1398:270:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "1444:16:7",
																"nodeType": "YulBlock",
																"src": "1444:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1453:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1453:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1456:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1456:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1446:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1446:6:7"
																			},
																			"nativeSrc": "1446:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1446:12:7"
																		},
																		"nativeSrc": "1446:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "1446:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1419:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "1419:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1428:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1428:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1415:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1415:3:7"
																		},
																		"nativeSrc": "1415:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1415:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1440:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1440:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1411:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1411:3:7"
																},
																"nativeSrc": "1411:32:7",
																"nodeType": "YulFunctionCall",
																"src": "1411:32:7"
															},
															"nativeSrc": "1408:52:7",
															"nodeType": "YulIf",
															"src": "1408:52:7"
														},
														{
															"nativeSrc": "1469:39:7",
															"nodeType": "YulAssignment",
															"src": "1469:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1498:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1498:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1479:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "1479:18:7"
																},
																"nativeSrc": "1479:29:7",
																"nodeType": "YulFunctionCall",
																"src": "1479:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1469:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1469:6:7"
																}
															]
														},
														{
															"nativeSrc": "1517:48:7",
															"nodeType": "YulAssignment",
															"src": "1517:48:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1550:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1550:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1561:2:7",
																				"nodeType": "YulLiteral",
																				"src": "1561:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1546:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1546:3:7"
																		},
																		"nativeSrc": "1546:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1546:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1527:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "1527:18:7"
																},
																"nativeSrc": "1527:38:7",
																"nodeType": "YulFunctionCall",
																"src": "1527:38:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1517:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1517:6:7"
																}
															]
														},
														{
															"nativeSrc": "1574:14:7",
															"nodeType": "YulVariableDeclaration",
															"src": "1574:14:7",
															"value": {
																"kind": "number",
																"nativeSrc": "1587:1:7",
																"nodeType": "YulLiteral",
																"src": "1587:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1578:5:7",
																	"nodeType": "YulTypedName",
																	"src": "1578:5:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1597:41:7",
															"nodeType": "YulAssignment",
															"src": "1597:41:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1623:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1623:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1634:2:7",
																				"nodeType": "YulLiteral",
																				"src": "1634:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1619:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1619:3:7"
																		},
																		"nativeSrc": "1619:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1619:18:7"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1606:12:7",
																	"nodeType": "YulIdentifier",
																	"src": "1606:12:7"
																},
																"nativeSrc": "1606:32:7",
																"nodeType": "YulFunctionCall",
																"src": "1606:32:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1597:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "1597:5:7"
																}
															]
														},
														{
															"nativeSrc": "1647:15:7",
															"nodeType": "YulAssignment",
															"src": "1647:15:7",
															"value": {
																"name": "value",
																"nativeSrc": "1657:5:7",
																"nodeType": "YulIdentifier",
																"src": "1657:5:7"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1647:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1647:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "1294:374:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1348:9:7",
														"nodeType": "YulTypedName",
														"src": "1348:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1359:7:7",
														"nodeType": "YulTypedName",
														"src": "1359:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1371:6:7",
														"nodeType": "YulTypedName",
														"src": "1371:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1379:6:7",
														"nodeType": "YulTypedName",
														"src": "1379:6:7",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1387:6:7",
														"nodeType": "YulTypedName",
														"src": "1387:6:7",
														"type": ""
													}
												],
												"src": "1294:374:7"
											},
											{
												"body": {
													"nativeSrc": "1770:87:7",
													"nodeType": "YulBlock",
													"src": "1770:87:7",
													"statements": [
														{
															"nativeSrc": "1780:26:7",
															"nodeType": "YulAssignment",
															"src": "1780:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1792:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1792:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1803:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1803:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1788:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1788:3:7"
																},
																"nativeSrc": "1788:18:7",
																"nodeType": "YulFunctionCall",
																"src": "1788:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1780:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "1780:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1822:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "1822:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1837:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1837:6:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1845:4:7",
																				"nodeType": "YulLiteral",
																				"src": "1845:4:7",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1833:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1833:3:7"
																		},
																		"nativeSrc": "1833:17:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1833:17:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1815:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "1815:6:7"
																},
																"nativeSrc": "1815:36:7",
																"nodeType": "YulFunctionCall",
																"src": "1815:36:7"
															},
															"nativeSrc": "1815:36:7",
															"nodeType": "YulExpressionStatement",
															"src": "1815:36:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "1673:184:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1739:9:7",
														"nodeType": "YulTypedName",
														"src": "1739:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1750:6:7",
														"nodeType": "YulTypedName",
														"src": "1750:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1761:4:7",
														"nodeType": "YulTypedName",
														"src": "1761:4:7",
														"type": ""
													}
												],
												"src": "1673:184:7"
											},
											{
												"body": {
													"nativeSrc": "1932:116:7",
													"nodeType": "YulBlock",
													"src": "1932:116:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "1978:16:7",
																"nodeType": "YulBlock",
																"src": "1978:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1987:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1987:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1990:1:7",
																					"nodeType": "YulLiteral",
																					"src": "1990:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1980:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "1980:6:7"
																			},
																			"nativeSrc": "1980:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "1980:12:7"
																		},
																		"nativeSrc": "1980:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "1980:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1953:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "1953:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1962:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "1962:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1949:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "1949:3:7"
																		},
																		"nativeSrc": "1949:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "1949:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1974:2:7",
																		"nodeType": "YulLiteral",
																		"src": "1974:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1945:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "1945:3:7"
																},
																"nativeSrc": "1945:32:7",
																"nodeType": "YulFunctionCall",
																"src": "1945:32:7"
															},
															"nativeSrc": "1942:52:7",
															"nodeType": "YulIf",
															"src": "1942:52:7"
														},
														{
															"nativeSrc": "2003:39:7",
															"nodeType": "YulAssignment",
															"src": "2003:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2032:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2032:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2013:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "2013:18:7"
																},
																"nativeSrc": "2013:29:7",
																"nodeType": "YulFunctionCall",
																"src": "2013:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2003:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2003:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "1862:186:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1898:9:7",
														"nodeType": "YulTypedName",
														"src": "1898:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1909:7:7",
														"nodeType": "YulTypedName",
														"src": "1909:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1921:6:7",
														"nodeType": "YulTypedName",
														"src": "1921:6:7",
														"type": ""
													}
												],
												"src": "1862:186:7"
											},
											{
												"body": {
													"nativeSrc": "2140:173:7",
													"nodeType": "YulBlock",
													"src": "2140:173:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "2186:16:7",
																"nodeType": "YulBlock",
																"src": "2186:16:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2195:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2195:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2198:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2198:1:7",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2188:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2188:6:7"
																			},
																			"nativeSrc": "2188:12:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2188:12:7"
																		},
																		"nativeSrc": "2188:12:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2188:12:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2161:7:7",
																				"nodeType": "YulIdentifier",
																				"src": "2161:7:7"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2170:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "2170:9:7"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2157:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2157:3:7"
																		},
																		"nativeSrc": "2157:23:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2157:23:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2182:2:7",
																		"nodeType": "YulLiteral",
																		"src": "2182:2:7",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2153:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2153:3:7"
																},
																"nativeSrc": "2153:32:7",
																"nodeType": "YulFunctionCall",
																"src": "2153:32:7"
															},
															"nativeSrc": "2150:52:7",
															"nodeType": "YulIf",
															"src": "2150:52:7"
														},
														{
															"nativeSrc": "2211:39:7",
															"nodeType": "YulAssignment",
															"src": "2211:39:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2240:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2240:9:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2221:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "2221:18:7"
																},
																"nativeSrc": "2221:29:7",
																"nodeType": "YulFunctionCall",
																"src": "2221:29:7"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2211:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2211:6:7"
																}
															]
														},
														{
															"nativeSrc": "2259:48:7",
															"nodeType": "YulAssignment",
															"src": "2259:48:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2292:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "2292:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2303:2:7",
																				"nodeType": "YulLiteral",
																				"src": "2303:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2288:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2288:3:7"
																		},
																		"nativeSrc": "2288:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2288:18:7"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2269:18:7",
																	"nodeType": "YulIdentifier",
																	"src": "2269:18:7"
																},
																"nativeSrc": "2269:38:7",
																"nodeType": "YulFunctionCall",
																"src": "2269:38:7"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "2259:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2259:6:7"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "2053:260:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2098:9:7",
														"nodeType": "YulTypedName",
														"src": "2098:9:7",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2109:7:7",
														"nodeType": "YulTypedName",
														"src": "2109:7:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2121:6:7",
														"nodeType": "YulTypedName",
														"src": "2121:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2129:6:7",
														"nodeType": "YulTypedName",
														"src": "2129:6:7",
														"type": ""
													}
												],
												"src": "2053:260:7"
											},
											{
												"body": {
													"nativeSrc": "2373:325:7",
													"nodeType": "YulBlock",
													"src": "2373:325:7",
													"statements": [
														{
															"nativeSrc": "2383:22:7",
															"nodeType": "YulAssignment",
															"src": "2383:22:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2397:1:7",
																		"nodeType": "YulLiteral",
																		"src": "2397:1:7",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "2400:4:7",
																		"nodeType": "YulIdentifier",
																		"src": "2400:4:7"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "2393:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2393:3:7"
																},
																"nativeSrc": "2393:12:7",
																"nodeType": "YulFunctionCall",
																"src": "2393:12:7"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "2383:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2383:6:7"
																}
															]
														},
														{
															"nativeSrc": "2414:38:7",
															"nodeType": "YulVariableDeclaration",
															"src": "2414:38:7",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "2444:4:7",
																		"nodeType": "YulIdentifier",
																		"src": "2444:4:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2450:1:7",
																		"nodeType": "YulLiteral",
																		"src": "2450:1:7",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2440:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "2440:3:7"
																},
																"nativeSrc": "2440:12:7",
																"nodeType": "YulFunctionCall",
																"src": "2440:12:7"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "2418:18:7",
																	"nodeType": "YulTypedName",
																	"src": "2418:18:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2491:31:7",
																"nodeType": "YulBlock",
																"src": "2491:31:7",
																"statements": [
																	{
																		"nativeSrc": "2493:27:7",
																		"nodeType": "YulAssignment",
																		"src": "2493:27:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "2507:6:7",
																					"nodeType": "YulIdentifier",
																					"src": "2507:6:7"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2515:4:7",
																					"nodeType": "YulLiteral",
																					"src": "2515:4:7",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "2503:3:7",
																				"nodeType": "YulIdentifier",
																				"src": "2503:3:7"
																			},
																			"nativeSrc": "2503:17:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2503:17:7"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "2493:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2493:6:7"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2471:18:7",
																		"nodeType": "YulIdentifier",
																		"src": "2471:18:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2464:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2464:6:7"
																},
																"nativeSrc": "2464:26:7",
																"nodeType": "YulFunctionCall",
																"src": "2464:26:7"
															},
															"nativeSrc": "2461:61:7",
															"nodeType": "YulIf",
															"src": "2461:61:7"
														},
														{
															"body": {
																"nativeSrc": "2581:111:7",
																"nodeType": "YulBlock",
																"src": "2581:111:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2602:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2602:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "2609:3:7",
																							"nodeType": "YulLiteral",
																							"src": "2609:3:7",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2614:10:7",
																							"nodeType": "YulLiteral",
																							"src": "2614:10:7",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "2605:3:7",
																						"nodeType": "YulIdentifier",
																						"src": "2605:3:7"
																					},
																					"nativeSrc": "2605:20:7",
																					"nodeType": "YulFunctionCall",
																					"src": "2605:20:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2595:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2595:6:7"
																			},
																			"nativeSrc": "2595:31:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2595:31:7"
																		},
																		"nativeSrc": "2595:31:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2595:31:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2646:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2646:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2649:4:7",
																					"nodeType": "YulLiteral",
																					"src": "2649:4:7",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2639:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2639:6:7"
																			},
																			"nativeSrc": "2639:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2639:15:7"
																		},
																		"nativeSrc": "2639:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2639:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2674:1:7",
																					"nodeType": "YulLiteral",
																					"src": "2674:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2677:4:7",
																					"nodeType": "YulLiteral",
																					"src": "2677:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2667:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2667:6:7"
																			},
																			"nativeSrc": "2667:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "2667:15:7"
																		},
																		"nativeSrc": "2667:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "2667:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "2537:18:7",
																		"nodeType": "YulIdentifier",
																		"src": "2537:18:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "2560:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "2560:6:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2568:2:7",
																				"nodeType": "YulLiteral",
																				"src": "2568:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "2557:2:7",
																			"nodeType": "YulIdentifier",
																			"src": "2557:2:7"
																		},
																		"nativeSrc": "2557:14:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2557:14:7"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "2534:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "2534:2:7"
																},
																"nativeSrc": "2534:38:7",
																"nodeType": "YulFunctionCall",
																"src": "2534:38:7"
															},
															"nativeSrc": "2531:161:7",
															"nodeType": "YulIf",
															"src": "2531:161:7"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "2318:380:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "2353:4:7",
														"nodeType": "YulTypedName",
														"src": "2353:4:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "2362:6:7",
														"nodeType": "YulTypedName",
														"src": "2362:6:7",
														"type": ""
													}
												],
												"src": "2318:380:7"
											},
											{
												"body": {
													"nativeSrc": "2877:174:7",
													"nodeType": "YulBlock",
													"src": "2877:174:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2894:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "2894:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2905:2:7",
																		"nodeType": "YulLiteral",
																		"src": "2905:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2887:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2887:6:7"
																},
																"nativeSrc": "2887:21:7",
																"nodeType": "YulFunctionCall",
																"src": "2887:21:7"
															},
															"nativeSrc": "2887:21:7",
															"nodeType": "YulExpressionStatement",
															"src": "2887:21:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2928:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "2928:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2939:2:7",
																				"nodeType": "YulLiteral",
																				"src": "2939:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2924:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2924:3:7"
																		},
																		"nativeSrc": "2924:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2924:18:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2944:2:7",
																		"nodeType": "YulLiteral",
																		"src": "2944:2:7",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2917:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2917:6:7"
																},
																"nativeSrc": "2917:30:7",
																"nodeType": "YulFunctionCall",
																"src": "2917:30:7"
															},
															"nativeSrc": "2917:30:7",
															"nodeType": "YulExpressionStatement",
															"src": "2917:30:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2967:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "2967:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2978:2:7",
																				"nodeType": "YulLiteral",
																				"src": "2978:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2963:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "2963:3:7"
																		},
																		"nativeSrc": "2963:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "2963:18:7"
																	},
																	{
																		"hexValue": "496e76616c696420636f6d6d756e6974792077616c6c6574",
																		"kind": "string",
																		"nativeSrc": "2983:26:7",
																		"nodeType": "YulLiteral",
																		"src": "2983:26:7",
																		"type": "",
																		"value": "Invalid community wallet"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2956:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "2956:6:7"
																},
																"nativeSrc": "2956:54:7",
																"nodeType": "YulFunctionCall",
																"src": "2956:54:7"
															},
															"nativeSrc": "2956:54:7",
															"nodeType": "YulExpressionStatement",
															"src": "2956:54:7"
														},
														{
															"nativeSrc": "3019:26:7",
															"nodeType": "YulAssignment",
															"src": "3019:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3031:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3031:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3042:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3042:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3027:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3027:3:7"
																},
																"nativeSrc": "3027:18:7",
																"nodeType": "YulFunctionCall",
																"src": "3027:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3019:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "3019:4:7"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0e6aa9e82df9ed735f6dba8fe33ecac07fe34e5696eb7e317a220817b24d3a2b__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "2703:348:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2854:9:7",
														"nodeType": "YulTypedName",
														"src": "2854:9:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2868:4:7",
														"nodeType": "YulTypedName",
														"src": "2868:4:7",
														"type": ""
													}
												],
												"src": "2703:348:7"
											},
											{
												"body": {
													"nativeSrc": "3164:101:7",
													"nodeType": "YulBlock",
													"src": "3164:101:7",
													"statements": [
														{
															"nativeSrc": "3174:26:7",
															"nodeType": "YulAssignment",
															"src": "3174:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3186:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3186:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3197:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3197:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3182:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3182:3:7"
																},
																"nativeSrc": "3182:18:7",
																"nodeType": "YulFunctionCall",
																"src": "3182:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3174:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "3174:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3216:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3216:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3231:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3231:6:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3239:18:7",
																				"nodeType": "YulLiteral",
																				"src": "3239:18:7",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3227:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3227:3:7"
																		},
																		"nativeSrc": "3227:31:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3227:31:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3209:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3209:6:7"
																},
																"nativeSrc": "3209:50:7",
																"nodeType": "YulFunctionCall",
																"src": "3209:50:7"
															},
															"nativeSrc": "3209:50:7",
															"nodeType": "YulExpressionStatement",
															"src": "3209:50:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
												"nativeSrc": "3056:209:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3133:9:7",
														"nodeType": "YulTypedName",
														"src": "3133:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3144:6:7",
														"nodeType": "YulTypedName",
														"src": "3144:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3155:4:7",
														"nodeType": "YulTypedName",
														"src": "3155:4:7",
														"type": ""
													}
												],
												"src": "3056:209:7"
											},
											{
												"body": {
													"nativeSrc": "3427:188:7",
													"nodeType": "YulBlock",
													"src": "3427:188:7",
													"statements": [
														{
															"nativeSrc": "3437:26:7",
															"nodeType": "YulAssignment",
															"src": "3437:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3449:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3449:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3460:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3460:2:7",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3445:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3445:3:7"
																},
																"nativeSrc": "3445:18:7",
																"nodeType": "YulFunctionCall",
																"src": "3445:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3437:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "3437:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3479:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3479:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3494:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3494:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3510:3:7",
																								"nodeType": "YulLiteral",
																								"src": "3510:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3515:1:7",
																								"nodeType": "YulLiteral",
																								"src": "3515:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3506:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "3506:3:7"
																						},
																						"nativeSrc": "3506:11:7",
																						"nodeType": "YulFunctionCall",
																						"src": "3506:11:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3519:1:7",
																						"nodeType": "YulLiteral",
																						"src": "3519:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3502:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "3502:3:7"
																				},
																				"nativeSrc": "3502:19:7",
																				"nodeType": "YulFunctionCall",
																				"src": "3502:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3490:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3490:3:7"
																		},
																		"nativeSrc": "3490:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3490:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3472:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3472:6:7"
																},
																"nativeSrc": "3472:51:7",
																"nodeType": "YulFunctionCall",
																"src": "3472:51:7"
															},
															"nativeSrc": "3472:51:7",
															"nodeType": "YulExpressionStatement",
															"src": "3472:51:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3543:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3543:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3554:2:7",
																				"nodeType": "YulLiteral",
																				"src": "3554:2:7",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3539:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3539:3:7"
																		},
																		"nativeSrc": "3539:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3539:18:7"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "3559:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "3559:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3532:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3532:6:7"
																},
																"nativeSrc": "3532:34:7",
																"nodeType": "YulFunctionCall",
																"src": "3532:34:7"
															},
															"nativeSrc": "3532:34:7",
															"nodeType": "YulExpressionStatement",
															"src": "3532:34:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3586:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "3586:9:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3597:2:7",
																				"nodeType": "YulLiteral",
																				"src": "3597:2:7",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3582:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3582:3:7"
																		},
																		"nativeSrc": "3582:18:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3582:18:7"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "3602:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "3602:6:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3575:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3575:6:7"
																},
																"nativeSrc": "3575:34:7",
																"nodeType": "YulFunctionCall",
																"src": "3575:34:7"
															},
															"nativeSrc": "3575:34:7",
															"nodeType": "YulExpressionStatement",
															"src": "3575:34:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "3270:345:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3380:9:7",
														"nodeType": "YulTypedName",
														"src": "3380:9:7",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3391:6:7",
														"nodeType": "YulTypedName",
														"src": "3391:6:7",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3399:6:7",
														"nodeType": "YulTypedName",
														"src": "3399:6:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3407:6:7",
														"nodeType": "YulTypedName",
														"src": "3407:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3418:4:7",
														"nodeType": "YulTypedName",
														"src": "3418:4:7",
														"type": ""
													}
												],
												"src": "3270:345:7"
											},
											{
												"body": {
													"nativeSrc": "3721:102:7",
													"nodeType": "YulBlock",
													"src": "3721:102:7",
													"statements": [
														{
															"nativeSrc": "3731:26:7",
															"nodeType": "YulAssignment",
															"src": "3731:26:7",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3743:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3743:9:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3754:2:7",
																		"nodeType": "YulLiteral",
																		"src": "3754:2:7",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3739:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3739:3:7"
																},
																"nativeSrc": "3739:18:7",
																"nodeType": "YulFunctionCall",
																"src": "3739:18:7"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3731:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "3731:4:7"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3773:9:7",
																		"nodeType": "YulIdentifier",
																		"src": "3773:9:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3788:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3788:6:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3804:3:7",
																								"nodeType": "YulLiteral",
																								"src": "3804:3:7",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3809:1:7",
																								"nodeType": "YulLiteral",
																								"src": "3809:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3800:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "3800:3:7"
																						},
																						"nativeSrc": "3800:11:7",
																						"nodeType": "YulFunctionCall",
																						"src": "3800:11:7"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3813:1:7",
																						"nodeType": "YulLiteral",
																						"src": "3813:1:7",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3796:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "3796:3:7"
																				},
																				"nativeSrc": "3796:19:7",
																				"nodeType": "YulFunctionCall",
																				"src": "3796:19:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3784:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "3784:3:7"
																		},
																		"nativeSrc": "3784:32:7",
																		"nodeType": "YulFunctionCall",
																		"src": "3784:32:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3766:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "3766:6:7"
																},
																"nativeSrc": "3766:51:7",
																"nodeType": "YulFunctionCall",
																"src": "3766:51:7"
															},
															"nativeSrc": "3766:51:7",
															"nodeType": "YulExpressionStatement",
															"src": "3766:51:7"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "3620:203:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3690:9:7",
														"nodeType": "YulTypedName",
														"src": "3690:9:7",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3701:6:7",
														"nodeType": "YulTypedName",
														"src": "3701:6:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3712:4:7",
														"nodeType": "YulTypedName",
														"src": "3712:4:7",
														"type": ""
													}
												],
												"src": "3620:203:7"
											},
											{
												"body": {
													"nativeSrc": "3876:174:7",
													"nodeType": "YulBlock",
													"src": "3876:174:7",
													"statements": [
														{
															"nativeSrc": "3886:16:7",
															"nodeType": "YulAssignment",
															"src": "3886:16:7",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3897:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "3897:1:7"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "3900:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "3900:1:7"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3893:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3893:3:7"
																},
																"nativeSrc": "3893:9:7",
																"nodeType": "YulFunctionCall",
																"src": "3893:9:7"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "3886:3:7",
																	"nodeType": "YulIdentifier",
																	"src": "3886:3:7"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3933:111:7",
																"nodeType": "YulBlock",
																"src": "3933:111:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3954:1:7",
																					"nodeType": "YulLiteral",
																					"src": "3954:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "3961:3:7",
																							"nodeType": "YulLiteral",
																							"src": "3961:3:7",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "3966:10:7",
																							"nodeType": "YulLiteral",
																							"src": "3966:10:7",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "3957:3:7",
																						"nodeType": "YulIdentifier",
																						"src": "3957:3:7"
																					},
																					"nativeSrc": "3957:20:7",
																					"nodeType": "YulFunctionCall",
																					"src": "3957:20:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3947:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3947:6:7"
																			},
																			"nativeSrc": "3947:31:7",
																			"nodeType": "YulFunctionCall",
																			"src": "3947:31:7"
																		},
																		"nativeSrc": "3947:31:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "3947:31:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3998:1:7",
																					"nodeType": "YulLiteral",
																					"src": "3998:1:7",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4001:4:7",
																					"nodeType": "YulLiteral",
																					"src": "4001:4:7",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3991:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "3991:6:7"
																			},
																			"nativeSrc": "3991:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "3991:15:7"
																		},
																		"nativeSrc": "3991:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "3991:15:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4026:1:7",
																					"nodeType": "YulLiteral",
																					"src": "4026:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4029:4:7",
																					"nodeType": "YulLiteral",
																					"src": "4029:4:7",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4019:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "4019:6:7"
																			},
																			"nativeSrc": "4019:15:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4019:15:7"
																		},
																		"nativeSrc": "4019:15:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "4019:15:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "3917:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "3917:1:7"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "3920:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "3920:3:7"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3914:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "3914:2:7"
																},
																"nativeSrc": "3914:10:7",
																"nodeType": "YulFunctionCall",
																"src": "3914:10:7"
															},
															"nativeSrc": "3911:133:7",
															"nodeType": "YulIf",
															"src": "3911:133:7"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "3828:222:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "3859:1:7",
														"nodeType": "YulTypedName",
														"src": "3859:1:7",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "3862:1:7",
														"nodeType": "YulTypedName",
														"src": "3862:1:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "3868:3:7",
														"nodeType": "YulTypedName",
														"src": "3868:3:7",
														"type": ""
													}
												],
												"src": "3828:222:7"
											},
											{
												"body": {
													"nativeSrc": "4087:95:7",
													"nodeType": "YulBlock",
													"src": "4087:95:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4104:1:7",
																		"nodeType": "YulLiteral",
																		"src": "4104:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4111:3:7",
																				"nodeType": "YulLiteral",
																				"src": "4111:3:7",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4116:10:7",
																				"nodeType": "YulLiteral",
																				"src": "4116:10:7",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "4107:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4107:3:7"
																		},
																		"nativeSrc": "4107:20:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4107:20:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4097:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4097:6:7"
																},
																"nativeSrc": "4097:31:7",
																"nodeType": "YulFunctionCall",
																"src": "4097:31:7"
															},
															"nativeSrc": "4097:31:7",
															"nodeType": "YulExpressionStatement",
															"src": "4097:31:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4144:1:7",
																		"nodeType": "YulLiteral",
																		"src": "4144:1:7",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4147:4:7",
																		"nodeType": "YulLiteral",
																		"src": "4147:4:7",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4137:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4137:6:7"
																},
																"nativeSrc": "4137:15:7",
																"nodeType": "YulFunctionCall",
																"src": "4137:15:7"
															},
															"nativeSrc": "4137:15:7",
															"nodeType": "YulExpressionStatement",
															"src": "4137:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4168:1:7",
																		"nodeType": "YulLiteral",
																		"src": "4168:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4171:4:7",
																		"nodeType": "YulLiteral",
																		"src": "4171:4:7",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "4161:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4161:6:7"
																},
																"nativeSrc": "4161:15:7",
																"nodeType": "YulFunctionCall",
																"src": "4161:15:7"
															},
															"nativeSrc": "4161:15:7",
															"nodeType": "YulExpressionStatement",
															"src": "4161:15:7"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "4055:127:7",
												"nodeType": "YulFunctionDefinition",
												"src": "4055:127:7"
											},
											{
												"body": {
													"nativeSrc": "4243:65:7",
													"nodeType": "YulBlock",
													"src": "4243:65:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4260:1:7",
																		"nodeType": "YulLiteral",
																		"src": "4260:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "4263:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "4263:3:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4253:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "4253:6:7"
																},
																"nativeSrc": "4253:14:7",
																"nodeType": "YulFunctionCall",
																"src": "4253:14:7"
															},
															"nativeSrc": "4253:14:7",
															"nodeType": "YulExpressionStatement",
															"src": "4253:14:7"
														},
														{
															"nativeSrc": "4276:26:7",
															"nodeType": "YulAssignment",
															"src": "4276:26:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "4294:1:7",
																		"nodeType": "YulLiteral",
																		"src": "4294:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4297:4:7",
																		"nodeType": "YulLiteral",
																		"src": "4297:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "4284:9:7",
																	"nodeType": "YulIdentifier",
																	"src": "4284:9:7"
																},
																"nativeSrc": "4284:18:7",
																"nodeType": "YulFunctionCall",
																"src": "4284:18:7"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "4276:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "4276:4:7"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nativeSrc": "4187:121:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "4226:3:7",
														"nodeType": "YulTypedName",
														"src": "4226:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "4234:4:7",
														"nodeType": "YulTypedName",
														"src": "4234:4:7",
														"type": ""
													}
												],
												"src": "4187:121:7"
											},
											{
												"body": {
													"nativeSrc": "4394:437:7",
													"nodeType": "YulBlock",
													"src": "4394:437:7",
													"statements": [
														{
															"body": {
																"nativeSrc": "4427:398:7",
																"nodeType": "YulBlock",
																"src": "4427:398:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4448:1:7",
																					"nodeType": "YulLiteral",
																					"src": "4448:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"name": "array",
																					"nativeSrc": "4451:5:7",
																					"nodeType": "YulIdentifier",
																					"src": "4451:5:7"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "4441:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "4441:6:7"
																			},
																			"nativeSrc": "4441:16:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4441:16:7"
																		},
																		"nativeSrc": "4441:16:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "4441:16:7"
																	},
																	{
																		"nativeSrc": "4470:30:7",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4470:30:7",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4492:1:7",
																					"nodeType": "YulLiteral",
																					"src": "4492:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4495:4:7",
																					"nodeType": "YulLiteral",
																					"src": "4495:4:7",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nativeSrc": "4482:9:7",
																				"nodeType": "YulIdentifier",
																				"src": "4482:9:7"
																			},
																			"nativeSrc": "4482:18:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4482:18:7"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nativeSrc": "4474:4:7",
																				"nodeType": "YulTypedName",
																				"src": "4474:4:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4513:57:7",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4513:57:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "4536:4:7",
																					"nodeType": "YulIdentifier",
																					"src": "4536:4:7"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4546:1:7",
																							"nodeType": "YulLiteral",
																							"src": "4546:1:7",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nativeSrc": "4553:10:7",
																									"nodeType": "YulIdentifier",
																									"src": "4553:10:7"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "4565:2:7",
																									"nodeType": "YulLiteral",
																									"src": "4565:2:7",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "4549:3:7",
																								"nodeType": "YulIdentifier",
																								"src": "4549:3:7"
																							},
																							"nativeSrc": "4549:19:7",
																							"nodeType": "YulFunctionCall",
																							"src": "4549:19:7"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "4542:3:7",
																						"nodeType": "YulIdentifier",
																						"src": "4542:3:7"
																					},
																					"nativeSrc": "4542:27:7",
																					"nodeType": "YulFunctionCall",
																					"src": "4542:27:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4532:3:7",
																				"nodeType": "YulIdentifier",
																				"src": "4532:3:7"
																			},
																			"nativeSrc": "4532:38:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4532:38:7"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "4517:11:7",
																				"nodeType": "YulTypedName",
																				"src": "4517:11:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "4607:23:7",
																			"nodeType": "YulBlock",
																			"src": "4607:23:7",
																			"statements": [
																				{
																					"nativeSrc": "4609:19:7",
																					"nodeType": "YulAssignment",
																					"src": "4609:19:7",
																					"value": {
																						"name": "data",
																						"nativeSrc": "4624:4:7",
																						"nodeType": "YulIdentifier",
																						"src": "4624:4:7"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "4609:11:7",
																							"nodeType": "YulIdentifier",
																							"src": "4609:11:7"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "4589:10:7",
																					"nodeType": "YulIdentifier",
																					"src": "4589:10:7"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4601:4:7",
																					"nodeType": "YulLiteral",
																					"src": "4601:4:7",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "4586:2:7",
																				"nodeType": "YulIdentifier",
																				"src": "4586:2:7"
																			},
																			"nativeSrc": "4586:20:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4586:20:7"
																		},
																		"nativeSrc": "4583:47:7",
																		"nodeType": "YulIf",
																		"src": "4583:47:7"
																	},
																	{
																		"nativeSrc": "4643:41:7",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4643:41:7",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "4657:4:7",
																					"nodeType": "YulIdentifier",
																					"src": "4657:4:7"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "4667:1:7",
																							"nodeType": "YulLiteral",
																							"src": "4667:1:7",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "4674:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "4674:3:7"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "4679:2:7",
																									"nodeType": "YulLiteral",
																									"src": "4679:2:7",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "4670:3:7",
																								"nodeType": "YulIdentifier",
																								"src": "4670:3:7"
																							},
																							"nativeSrc": "4670:12:7",
																							"nodeType": "YulFunctionCall",
																							"src": "4670:12:7"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "4663:3:7",
																						"nodeType": "YulIdentifier",
																						"src": "4663:3:7"
																					},
																					"nativeSrc": "4663:20:7",
																					"nodeType": "YulFunctionCall",
																					"src": "4663:20:7"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4653:3:7",
																				"nodeType": "YulIdentifier",
																				"src": "4653:3:7"
																			},
																			"nativeSrc": "4653:31:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4653:31:7"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "4647:2:7",
																				"nodeType": "YulTypedName",
																				"src": "4647:2:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4697:24:7",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4697:24:7",
																		"value": {
																			"name": "deleteStart",
																			"nativeSrc": "4710:11:7",
																			"nodeType": "YulIdentifier",
																			"src": "4710:11:7"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nativeSrc": "4701:5:7",
																				"nodeType": "YulTypedName",
																				"src": "4701:5:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "4795:20:7",
																			"nodeType": "YulBlock",
																			"src": "4795:20:7",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "4804:5:7",
																								"nodeType": "YulIdentifier",
																								"src": "4804:5:7"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "4811:1:7",
																								"nodeType": "YulLiteral",
																								"src": "4811:1:7",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nativeSrc": "4797:6:7",
																							"nodeType": "YulIdentifier",
																							"src": "4797:6:7"
																						},
																						"nativeSrc": "4797:16:7",
																						"nodeType": "YulFunctionCall",
																						"src": "4797:16:7"
																					},
																					"nativeSrc": "4797:16:7",
																					"nodeType": "YulExpressionStatement",
																					"src": "4797:16:7"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "4745:5:7",
																					"nodeType": "YulIdentifier",
																					"src": "4745:5:7"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "4752:2:7",
																					"nodeType": "YulIdentifier",
																					"src": "4752:2:7"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "4742:2:7",
																				"nodeType": "YulIdentifier",
																				"src": "4742:2:7"
																			},
																			"nativeSrc": "4742:13:7",
																			"nodeType": "YulFunctionCall",
																			"src": "4742:13:7"
																		},
																		"nativeSrc": "4734:81:7",
																		"nodeType": "YulForLoop",
																		"post": {
																			"nativeSrc": "4756:26:7",
																			"nodeType": "YulBlock",
																			"src": "4756:26:7",
																			"statements": [
																				{
																					"nativeSrc": "4758:22:7",
																					"nodeType": "YulAssignment",
																					"src": "4758:22:7",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "4771:5:7",
																								"nodeType": "YulIdentifier",
																								"src": "4771:5:7"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "4778:1:7",
																								"nodeType": "YulLiteral",
																								"src": "4778:1:7",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "4767:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "4767:3:7"
																						},
																						"nativeSrc": "4767:13:7",
																						"nodeType": "YulFunctionCall",
																						"src": "4767:13:7"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nativeSrc": "4758:5:7",
																							"nodeType": "YulIdentifier",
																							"src": "4758:5:7"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nativeSrc": "4738:3:7",
																			"nodeType": "YulBlock",
																			"src": "4738:3:7",
																			"statements": []
																		},
																		"src": "4734:81:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "4410:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "4410:3:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4415:2:7",
																		"nodeType": "YulLiteral",
																		"src": "4415:2:7",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4407:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "4407:2:7"
																},
																"nativeSrc": "4407:11:7",
																"nodeType": "YulFunctionCall",
																"src": "4407:11:7"
															},
															"nativeSrc": "4404:421:7",
															"nodeType": "YulIf",
															"src": "4404:421:7"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "4313:518:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "4366:5:7",
														"nodeType": "YulTypedName",
														"src": "4366:5:7",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "4373:3:7",
														"nodeType": "YulTypedName",
														"src": "4373:3:7",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "4378:10:7",
														"nodeType": "YulTypedName",
														"src": "4378:10:7",
														"type": ""
													}
												],
												"src": "4313:518:7"
											},
											{
												"body": {
													"nativeSrc": "4921:81:7",
													"nodeType": "YulBlock",
													"src": "4921:81:7",
													"statements": [
														{
															"nativeSrc": "4931:65:7",
															"nodeType": "YulAssignment",
															"src": "4931:65:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "4946:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "4946:4:7"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "4964:1:7",
																										"nodeType": "YulLiteral",
																										"src": "4964:1:7",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nativeSrc": "4967:3:7",
																										"nodeType": "YulIdentifier",
																										"src": "4967:3:7"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "4960:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "4960:3:7"
																								},
																								"nativeSrc": "4960:11:7",
																								"nodeType": "YulFunctionCall",
																								"src": "4960:11:7"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "4977:1:7",
																										"nodeType": "YulLiteral",
																										"src": "4977:1:7",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "4973:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "4973:3:7"
																								},
																								"nativeSrc": "4973:6:7",
																								"nodeType": "YulFunctionCall",
																								"src": "4973:6:7"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nativeSrc": "4956:3:7",
																							"nodeType": "YulIdentifier",
																							"src": "4956:3:7"
																						},
																						"nativeSrc": "4956:24:7",
																						"nodeType": "YulFunctionCall",
																						"src": "4956:24:7"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4952:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "4952:3:7"
																				},
																				"nativeSrc": "4952:29:7",
																				"nodeType": "YulFunctionCall",
																				"src": "4952:29:7"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4942:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4942:3:7"
																		},
																		"nativeSrc": "4942:40:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4942:40:7"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4988:1:7",
																				"nodeType": "YulLiteral",
																				"src": "4988:1:7",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "4991:3:7",
																				"nodeType": "YulIdentifier",
																				"src": "4991:3:7"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "4984:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "4984:3:7"
																		},
																		"nativeSrc": "4984:11:7",
																		"nodeType": "YulFunctionCall",
																		"src": "4984:11:7"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "4939:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "4939:2:7"
																},
																"nativeSrc": "4939:57:7",
																"nodeType": "YulFunctionCall",
																"src": "4939:57:7"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "4931:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "4931:4:7"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "4836:166:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "4898:4:7",
														"nodeType": "YulTypedName",
														"src": "4898:4:7",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "4904:3:7",
														"nodeType": "YulTypedName",
														"src": "4904:3:7",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "4912:4:7",
														"nodeType": "YulTypedName",
														"src": "4912:4:7",
														"type": ""
													}
												],
												"src": "4836:166:7"
											},
											{
												"body": {
													"nativeSrc": "5103:1203:7",
													"nodeType": "YulBlock",
													"src": "5103:1203:7",
													"statements": [
														{
															"nativeSrc": "5113:24:7",
															"nodeType": "YulVariableDeclaration",
															"src": "5113:24:7",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "5133:3:7",
																		"nodeType": "YulIdentifier",
																		"src": "5133:3:7"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5127:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "5127:5:7"
																},
																"nativeSrc": "5127:10:7",
																"nodeType": "YulFunctionCall",
																"src": "5127:10:7"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "5117:6:7",
																	"nodeType": "YulTypedName",
																	"src": "5117:6:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5180:22:7",
																"nodeType": "YulBlock",
																"src": "5180:22:7",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "5182:16:7",
																				"nodeType": "YulIdentifier",
																				"src": "5182:16:7"
																			},
																			"nativeSrc": "5182:18:7",
																			"nodeType": "YulFunctionCall",
																			"src": "5182:18:7"
																		},
																		"nativeSrc": "5182:18:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "5182:18:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5152:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "5152:6:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5160:18:7",
																		"nodeType": "YulLiteral",
																		"src": "5160:18:7",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5149:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "5149:2:7"
																},
																"nativeSrc": "5149:30:7",
																"nodeType": "YulFunctionCall",
																"src": "5149:30:7"
															},
															"nativeSrc": "5146:56:7",
															"nodeType": "YulIf",
															"src": "5146:56:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5255:4:7",
																		"nodeType": "YulIdentifier",
																		"src": "5255:4:7"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "5293:4:7",
																						"nodeType": "YulIdentifier",
																						"src": "5293:4:7"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "5287:5:7",
																					"nodeType": "YulIdentifier",
																					"src": "5287:5:7"
																				},
																				"nativeSrc": "5287:11:7",
																				"nodeType": "YulFunctionCall",
																				"src": "5287:11:7"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nativeSrc": "5261:25:7",
																			"nodeType": "YulIdentifier",
																			"src": "5261:25:7"
																		},
																		"nativeSrc": "5261:38:7",
																		"nodeType": "YulFunctionCall",
																		"src": "5261:38:7"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "5301:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "5301:6:7"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nativeSrc": "5211:43:7",
																	"nodeType": "YulIdentifier",
																	"src": "5211:43:7"
																},
																"nativeSrc": "5211:97:7",
																"nodeType": "YulFunctionCall",
																"src": "5211:97:7"
															},
															"nativeSrc": "5211:97:7",
															"nodeType": "YulExpressionStatement",
															"src": "5211:97:7"
														},
														{
															"nativeSrc": "5317:18:7",
															"nodeType": "YulVariableDeclaration",
															"src": "5317:18:7",
															"value": {
																"kind": "number",
																"nativeSrc": "5334:1:7",
																"nodeType": "YulLiteral",
																"src": "5334:1:7",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5321:9:7",
																	"nodeType": "YulTypedName",
																	"src": "5321:9:7",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5344:17:7",
															"nodeType": "YulAssignment",
															"src": "5344:17:7",
															"value": {
																"kind": "number",
																"nativeSrc": "5357:4:7",
																"nodeType": "YulLiteral",
																"src": "5357:4:7",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5344:9:7",
																	"nodeType": "YulIdentifier",
																	"src": "5344:9:7"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "5407:642:7",
																		"nodeType": "YulBlock",
																		"src": "5407:642:7",
																		"statements": [
																			{
																				"nativeSrc": "5421:35:7",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5421:35:7",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "5440:6:7",
																							"nodeType": "YulIdentifier",
																							"src": "5440:6:7"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5452:2:7",
																									"nodeType": "YulLiteral",
																									"src": "5452:2:7",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "5448:3:7",
																								"nodeType": "YulIdentifier",
																								"src": "5448:3:7"
																							},
																							"nativeSrc": "5448:7:7",
																							"nodeType": "YulFunctionCall",
																							"src": "5448:7:7"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "5436:3:7",
																						"nodeType": "YulIdentifier",
																						"src": "5436:3:7"
																					},
																					"nativeSrc": "5436:20:7",
																					"nodeType": "YulFunctionCall",
																					"src": "5436:20:7"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "5425:7:7",
																						"nodeType": "YulTypedName",
																						"src": "5425:7:7",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5469:49:7",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5469:49:7",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "5513:4:7",
																							"nodeType": "YulIdentifier",
																							"src": "5513:4:7"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nativeSrc": "5483:29:7",
																						"nodeType": "YulIdentifier",
																						"src": "5483:29:7"
																					},
																					"nativeSrc": "5483:35:7",
																					"nodeType": "YulFunctionCall",
																					"src": "5483:35:7"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "5473:6:7",
																						"nodeType": "YulTypedName",
																						"src": "5473:6:7",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5531:10:7",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5531:10:7",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "5540:1:7",
																					"nodeType": "YulLiteral",
																					"src": "5540:1:7",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "5535:1:7",
																						"nodeType": "YulTypedName",
																						"src": "5535:1:7",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "5611:165:7",
																					"nodeType": "YulBlock",
																					"src": "5611:165:7",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5636:6:7",
																										"nodeType": "YulIdentifier",
																										"src": "5636:6:7"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "5654:3:7",
																														"nodeType": "YulIdentifier",
																														"src": "5654:3:7"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "5659:9:7",
																														"nodeType": "YulIdentifier",
																														"src": "5659:9:7"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "5650:3:7",
																													"nodeType": "YulIdentifier",
																													"src": "5650:3:7"
																												},
																												"nativeSrc": "5650:19:7",
																												"nodeType": "YulFunctionCall",
																												"src": "5650:19:7"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "5644:5:7",
																											"nodeType": "YulIdentifier",
																											"src": "5644:5:7"
																										},
																										"nativeSrc": "5644:26:7",
																										"nodeType": "YulFunctionCall",
																										"src": "5644:26:7"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "5629:6:7",
																									"nodeType": "YulIdentifier",
																									"src": "5629:6:7"
																								},
																								"nativeSrc": "5629:42:7",
																								"nodeType": "YulFunctionCall",
																								"src": "5629:42:7"
																							},
																							"nativeSrc": "5629:42:7",
																							"nodeType": "YulExpressionStatement",
																							"src": "5629:42:7"
																						},
																						{
																							"nativeSrc": "5688:24:7",
																							"nodeType": "YulAssignment",
																							"src": "5688:24:7",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5702:6:7",
																										"nodeType": "YulIdentifier",
																										"src": "5702:6:7"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5710:1:7",
																										"nodeType": "YulLiteral",
																										"src": "5710:1:7",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5698:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "5698:3:7"
																								},
																								"nativeSrc": "5698:14:7",
																								"nodeType": "YulFunctionCall",
																								"src": "5698:14:7"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "5688:6:7",
																									"nodeType": "YulIdentifier",
																									"src": "5688:6:7"
																								}
																							]
																						},
																						{
																							"nativeSrc": "5729:33:7",
																							"nodeType": "YulAssignment",
																							"src": "5729:33:7",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "5746:9:7",
																										"nodeType": "YulIdentifier",
																										"src": "5746:9:7"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5757:4:7",
																										"nodeType": "YulLiteral",
																										"src": "5757:4:7",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5742:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "5742:3:7"
																								},
																								"nativeSrc": "5742:20:7",
																								"nodeType": "YulFunctionCall",
																								"src": "5742:20:7"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "5729:9:7",
																									"nodeType": "YulIdentifier",
																									"src": "5729:9:7"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "5565:1:7",
																							"nodeType": "YulIdentifier",
																							"src": "5565:1:7"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5568:7:7",
																							"nodeType": "YulIdentifier",
																							"src": "5568:7:7"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5562:2:7",
																						"nodeType": "YulIdentifier",
																						"src": "5562:2:7"
																					},
																					"nativeSrc": "5562:14:7",
																					"nodeType": "YulFunctionCall",
																					"src": "5562:14:7"
																				},
																				"nativeSrc": "5554:222:7",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "5577:21:7",
																					"nodeType": "YulBlock",
																					"src": "5577:21:7",
																					"statements": [
																						{
																							"nativeSrc": "5579:17:7",
																							"nodeType": "YulAssignment",
																							"src": "5579:17:7",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "5588:1:7",
																										"nodeType": "YulIdentifier",
																										"src": "5588:1:7"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5591:4:7",
																										"nodeType": "YulLiteral",
																										"src": "5591:4:7",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5584:3:7",
																									"nodeType": "YulIdentifier",
																									"src": "5584:3:7"
																								},
																								"nativeSrc": "5584:12:7",
																								"nodeType": "YulFunctionCall",
																								"src": "5584:12:7"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "5579:1:7",
																									"nodeType": "YulIdentifier",
																									"src": "5579:1:7"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "5558:3:7",
																					"nodeType": "YulBlock",
																					"src": "5558:3:7",
																					"statements": []
																				},
																				"src": "5554:222:7"
																			},
																			{
																				"body": {
																					"nativeSrc": "5824:166:7",
																					"nodeType": "YulBlock",
																					"src": "5824:166:7",
																					"statements": [
																						{
																							"nativeSrc": "5842:43:7",
																							"nodeType": "YulVariableDeclaration",
																							"src": "5842:43:7",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "5869:3:7",
																												"nodeType": "YulIdentifier",
																												"src": "5869:3:7"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "5874:9:7",
																												"nodeType": "YulIdentifier",
																												"src": "5874:9:7"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "5865:3:7",
																											"nodeType": "YulIdentifier",
																											"src": "5865:3:7"
																										},
																										"nativeSrc": "5865:19:7",
																										"nodeType": "YulFunctionCall",
																										"src": "5865:19:7"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "5859:5:7",
																									"nodeType": "YulIdentifier",
																									"src": "5859:5:7"
																								},
																								"nativeSrc": "5859:26:7",
																								"nodeType": "YulFunctionCall",
																								"src": "5859:26:7"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "5846:9:7",
																									"nodeType": "YulTypedName",
																									"src": "5846:9:7",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5909:6:7",
																										"nodeType": "YulIdentifier",
																										"src": "5909:6:7"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "5921:9:7",
																												"nodeType": "YulIdentifier",
																												"src": "5921:9:7"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nativeSrc": "5948:1:7",
																																				"nodeType": "YulLiteral",
																																				"src": "5948:1:7",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nativeSrc": "5951:6:7",
																																				"nodeType": "YulIdentifier",
																																				"src": "5951:6:7"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nativeSrc": "5944:3:7",
																																			"nodeType": "YulIdentifier",
																																			"src": "5944:3:7"
																																		},
																																		"nativeSrc": "5944:14:7",
																																		"nodeType": "YulFunctionCall",
																																		"src": "5944:14:7"
																																	},
																																	{
																																		"kind": "number",
																																		"nativeSrc": "5960:3:7",
																																		"nodeType": "YulLiteral",
																																		"src": "5960:3:7",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nativeSrc": "5940:3:7",
																																	"nodeType": "YulIdentifier",
																																	"src": "5940:3:7"
																																},
																																"nativeSrc": "5940:24:7",
																																"nodeType": "YulFunctionCall",
																																"src": "5940:24:7"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nativeSrc": "5970:1:7",
																																		"nodeType": "YulLiteral",
																																		"src": "5970:1:7",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nativeSrc": "5966:3:7",
																																	"nodeType": "YulIdentifier",
																																	"src": "5966:3:7"
																																},
																																"nativeSrc": "5966:6:7",
																																"nodeType": "YulFunctionCall",
																																"src": "5966:6:7"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nativeSrc": "5936:3:7",
																															"nodeType": "YulIdentifier",
																															"src": "5936:3:7"
																														},
																														"nativeSrc": "5936:37:7",
																														"nodeType": "YulFunctionCall",
																														"src": "5936:37:7"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nativeSrc": "5932:3:7",
																													"nodeType": "YulIdentifier",
																													"src": "5932:3:7"
																												},
																												"nativeSrc": "5932:42:7",
																												"nodeType": "YulFunctionCall",
																												"src": "5932:42:7"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nativeSrc": "5917:3:7",
																											"nodeType": "YulIdentifier",
																											"src": "5917:3:7"
																										},
																										"nativeSrc": "5917:58:7",
																										"nodeType": "YulFunctionCall",
																										"src": "5917:58:7"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "5902:6:7",
																									"nodeType": "YulIdentifier",
																									"src": "5902:6:7"
																								},
																								"nativeSrc": "5902:74:7",
																								"nodeType": "YulFunctionCall",
																								"src": "5902:74:7"
																							},
																							"nativeSrc": "5902:74:7",
																							"nodeType": "YulExpressionStatement",
																							"src": "5902:74:7"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5795:7:7",
																							"nodeType": "YulIdentifier",
																							"src": "5795:7:7"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "5804:6:7",
																							"nodeType": "YulIdentifier",
																							"src": "5804:6:7"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5792:2:7",
																						"nodeType": "YulIdentifier",
																						"src": "5792:2:7"
																					},
																					"nativeSrc": "5792:19:7",
																					"nodeType": "YulFunctionCall",
																					"src": "5792:19:7"
																				},
																				"nativeSrc": "5789:201:7",
																				"nodeType": "YulIf",
																				"src": "5789:201:7"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6010:4:7",
																							"nodeType": "YulIdentifier",
																							"src": "6010:4:7"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "6024:1:7",
																											"nodeType": "YulLiteral",
																											"src": "6024:1:7",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nativeSrc": "6027:6:7",
																											"nodeType": "YulIdentifier",
																											"src": "6027:6:7"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nativeSrc": "6020:3:7",
																										"nodeType": "YulIdentifier",
																										"src": "6020:3:7"
																									},
																									"nativeSrc": "6020:14:7",
																									"nodeType": "YulFunctionCall",
																									"src": "6020:14:7"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "6036:1:7",
																									"nodeType": "YulLiteral",
																									"src": "6036:1:7",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "6016:3:7",
																								"nodeType": "YulIdentifier",
																								"src": "6016:3:7"
																							},
																							"nativeSrc": "6016:22:7",
																							"nodeType": "YulFunctionCall",
																							"src": "6016:22:7"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6003:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "6003:6:7"
																					},
																					"nativeSrc": "6003:36:7",
																					"nodeType": "YulFunctionCall",
																					"src": "6003:36:7"
																				},
																				"nativeSrc": "6003:36:7",
																				"nodeType": "YulExpressionStatement",
																				"src": "6003:36:7"
																			}
																		]
																	},
																	"nativeSrc": "5400:649:7",
																	"nodeType": "YulCase",
																	"src": "5400:649:7",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5405:1:7",
																		"nodeType": "YulLiteral",
																		"src": "5405:1:7",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "6066:234:7",
																		"nodeType": "YulBlock",
																		"src": "6066:234:7",
																		"statements": [
																			{
																				"nativeSrc": "6080:14:7",
																				"nodeType": "YulVariableDeclaration",
																				"src": "6080:14:7",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "6093:1:7",
																					"nodeType": "YulLiteral",
																					"src": "6093:1:7",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "6084:5:7",
																						"nodeType": "YulTypedName",
																						"src": "6084:5:7",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "6129:67:7",
																					"nodeType": "YulBlock",
																					"src": "6129:67:7",
																					"statements": [
																						{
																							"nativeSrc": "6147:35:7",
																							"nodeType": "YulAssignment",
																							"src": "6147:35:7",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6166:3:7",
																												"nodeType": "YulIdentifier",
																												"src": "6166:3:7"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6171:9:7",
																												"nodeType": "YulIdentifier",
																												"src": "6171:9:7"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6162:3:7",
																											"nodeType": "YulIdentifier",
																											"src": "6162:3:7"
																										},
																										"nativeSrc": "6162:19:7",
																										"nodeType": "YulFunctionCall",
																										"src": "6162:19:7"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "6156:5:7",
																									"nodeType": "YulIdentifier",
																									"src": "6156:5:7"
																								},
																								"nativeSrc": "6156:26:7",
																								"nodeType": "YulFunctionCall",
																								"src": "6156:26:7"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "6147:5:7",
																									"nodeType": "YulIdentifier",
																									"src": "6147:5:7"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "6110:6:7",
																					"nodeType": "YulIdentifier",
																					"src": "6110:6:7"
																				},
																				"nativeSrc": "6107:89:7",
																				"nodeType": "YulIf",
																				"src": "6107:89:7"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6216:4:7",
																							"nodeType": "YulIdentifier",
																							"src": "6216:4:7"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "6275:5:7",
																									"nodeType": "YulIdentifier",
																									"src": "6275:5:7"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "6282:6:7",
																									"nodeType": "YulIdentifier",
																									"src": "6282:6:7"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "6222:52:7",
																								"nodeType": "YulIdentifier",
																								"src": "6222:52:7"
																							},
																							"nativeSrc": "6222:67:7",
																							"nodeType": "YulFunctionCall",
																							"src": "6222:67:7"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6209:6:7",
																						"nodeType": "YulIdentifier",
																						"src": "6209:6:7"
																					},
																					"nativeSrc": "6209:81:7",
																					"nodeType": "YulFunctionCall",
																					"src": "6209:81:7"
																				},
																				"nativeSrc": "6209:81:7",
																				"nodeType": "YulExpressionStatement",
																				"src": "6209:81:7"
																			}
																		]
																	},
																	"nativeSrc": "6058:242:7",
																	"nodeType": "YulCase",
																	"src": "6058:242:7",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5380:6:7",
																		"nodeType": "YulIdentifier",
																		"src": "5380:6:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5388:2:7",
																		"nodeType": "YulLiteral",
																		"src": "5388:2:7",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5377:2:7",
																	"nodeType": "YulIdentifier",
																	"src": "5377:2:7"
																},
																"nativeSrc": "5377:14:7",
																"nodeType": "YulFunctionCall",
																"src": "5377:14:7"
															},
															"nativeSrc": "5370:930:7",
															"nodeType": "YulSwitch",
															"src": "5370:930:7"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "5007:1299:7",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "5088:4:7",
														"nodeType": "YulTypedName",
														"src": "5088:4:7",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "5094:3:7",
														"nodeType": "YulTypedName",
														"src": "5094:3:7",
														"type": ""
													}
												],
												"src": "5007:1299:7"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        mcopy(add(headStart, 64), add(value0, 32), length)\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_0e6aa9e82df9ed735f6dba8fe33ecac07fe34e5696eb7e317a220817b24d3a2b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Invalid community wallet\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}",
									"id": 7,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f5ffd5b506004361061009b575f3560e01c806370a082311161006357806370a082311461013357806395d89b4114610167578063a9059cbb1461016f578063c4d66de814610182578063dd62ed3e14610197575f5ffd5b806306fdde031461009f578063095ea7b3146100bd57806318160ddd146100e057806323b872dd14610111578063313ce56714610124575b5f5ffd5b6100a76101aa565b6040516100b491906108cb565b60405180910390f35b6100d06100cb36600461091b565b61026a565b60405190151581526020016100b4565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02545b6040519081526020016100b4565b6100d061011f366004610943565b610283565b604051601281526020016100b4565b61010361014136600461097d565b6001600160a01b03165f9081525f516020610b395f395f51905f52602052604090205490565b6100a76102a6565b6100d061017d36600461091b565b6102e4565b61019561019036600461097d565b6102f1565b005b6101036101a536600461099d565b6104ae565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0380546060915f516020610b395f395f51905f52916101e8906109ce565b80601f0160208091040260200160405190810160405280929190818152602001828054610214906109ce565b801561025f5780601f106102365761010080835404028352916020019161025f565b820191905f5260205f20905b81548152906001019060200180831161024257829003601f168201915b505050505091505090565b5f336102778185856104f7565b60019150505b92915050565b5f33610290858285610509565b61029b85858561056c565b506001949350505050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060915f516020610b395f395f51905f52916101e8906109ce565b5f3361027781858561056c565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff165f811580156103365750825b90505f8267ffffffffffffffff1660011480156103525750303b155b905081158015610360575080155b1561037e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156103a857845460ff60401b1916600160401b1785555b6001600160a01b0386166104035760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420636f6d6d756e6974792077616c6c6574000000000000000060448201526064015b60405180910390fd5b61044b604051806040016040528060098152602001685248454d20566f746560b81b8152506040518060400160405280600581526020016452564f544560d81b8152506105c9565b610460866a52b7d2dcc80cd2e40000006105df565b83156104a657845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6001600160a01b039182165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b6105048383836001610613565b505050565b5f61051484846104ae565b90505f198114610566578181101561055857604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103fa565b61056684848484035f610613565b50505050565b6001600160a01b03831661059557604051634b637e8f60e11b81525f60048201526024016103fa565b6001600160a01b0382166105be5760405163ec442f0560e01b81525f60048201526024016103fa565b6105048383836106f7565b6105d1610830565b6105db828261087b565b5050565b6001600160a01b0382166106085760405163ec442f0560e01b81525f60048201526024016103fa565b6105db5f83836106f7565b5f516020610b395f395f51905f526001600160a01b03851661064a5760405163e602df0560e01b81525f60048201526024016103fa565b6001600160a01b03841661067357604051634a1406b160e11b81525f60048201526024016103fa565b6001600160a01b038086165f908152600183016020908152604080832093881683529290522083905581156106f057836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516106e791815260200190565b60405180910390a35b5050505050565b5f516020610b395f395f51905f526001600160a01b0384166107315781816002015f8282546107269190610a06565b909155506107a19050565b6001600160a01b0384165f90815260208290526040902054828110156107835760405163391434e360e21b81526001600160a01b038616600482015260248101829052604481018490526064016103fa565b6001600160a01b0385165f9081526020839052604090209083900390555b6001600160a01b0383166107bf5760028101805483900390556107dd565b6001600160a01b0383165f9081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161082291815260200190565b60405180910390a350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661087957604051631afcd79f60e31b815260040160405180910390fd5b565b610883610830565b5f516020610b395f395f51905f527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace036108bc8482610a7d565b50600481016105668382610a7d565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610916575f5ffd5b919050565b5f5f6040838503121561092c575f5ffd5b61093583610900565b946020939093013593505050565b5f5f5f60608486031215610955575f5ffd5b61095e84610900565b925061096c60208501610900565b929592945050506040919091013590565b5f6020828403121561098d575f5ffd5b61099682610900565b9392505050565b5f5f604083850312156109ae575f5ffd5b6109b783610900565b91506109c560208401610900565b90509250929050565b600181811c908216806109e257607f821691505b602082108103610a0057634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561027d57634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b601f82111561050457805f5260205f20601f840160051c81016020851015610a5e5750805b601f840160051c820191505b818110156106f0575f8155600101610a6a565b815167ffffffffffffffff811115610a9757610a97610a25565b610aab81610aa584546109ce565b84610a39565b6020601f821160018114610add575f8315610ac65750848201515b5f19600385901b1c1916600184901b1784556106f0565b5f84815260208120601f198516915b82811015610b0c5787850151825560209485019460019092019101610aec565b5084821015610b2957868401515f19600387901b60f8161c191681555b50505050600190811b0190555056fe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00a264697066735822122068907af953dc9a836a664d7f0a328e8d1d810148587e0be7bafb63237201c08564736f6c634300081d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 PUSH0 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9B JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x197 JUMPI PUSH0 PUSH0 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x124 JUMPI JUMPDEST PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0xA7 PUSH2 0x1AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB4 SWAP2 SWAP1 PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xD0 PUSH2 0xCB CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x26A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH2 0xD0 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0x943 JUMP JUMPDEST PUSH2 0x283 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xB4 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0x97D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xA7 PUSH2 0x2A6 JUMP JUMPDEST PUSH2 0xD0 PUSH2 0x17D CALLDATASIZE PUSH1 0x4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x2E4 JUMP JUMPDEST PUSH2 0x195 PUSH2 0x190 CALLDATASIZE PUSH1 0x4 PUSH2 0x97D JUMP JUMPDEST PUSH2 0x2F1 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x103 PUSH2 0x1A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x99D JUMP JUMPDEST PUSH2 0x4AE JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 PUSH2 0x1E8 SWAP1 PUSH2 0x9CE JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x214 SWAP1 PUSH2 0x9CE JUMP JUMPDEST DUP1 ISZERO PUSH2 0x25F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x236 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x25F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x242 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x277 DUP2 DUP6 DUP6 PUSH2 0x4F7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x290 DUP6 DUP3 DUP6 PUSH2 0x509 JUMP JUMPDEST PUSH2 0x29B DUP6 DUP6 DUP6 PUSH2 0x56C JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE04 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SWAP2 PUSH2 0x1E8 SWAP1 PUSH2 0x9CE JUMP JUMPDEST PUSH0 CALLER PUSH2 0x277 DUP2 DUP6 DUP6 PUSH2 0x56C JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x336 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x352 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x360 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x37E JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x3A8 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x403 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6D6D756E6974792077616C6C65740000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x44B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x5248454D20566F7465 PUSH1 0xB8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x52564F5445 PUSH1 0xD8 SHL DUP2 MSTORE POP PUSH2 0x5C9 JUMP JUMPDEST PUSH2 0x460 DUP7 PUSH11 0x52B7D2DCC80CD2E4000000 PUSH2 0x5DF JUMP JUMPDEST DUP4 ISZERO PUSH2 0x4A6 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE01 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x504 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x613 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x514 DUP5 DUP5 PUSH2 0x4AE JUMP JUMPDEST SWAP1 POP PUSH0 NOT DUP2 EQ PUSH2 0x566 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH2 0x566 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x613 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x595 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BE JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH2 0x504 DUP4 DUP4 DUP4 PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0x5D1 PUSH2 0x830 JUMP JUMPDEST PUSH2 0x5DB DUP3 DUP3 PUSH2 0x87B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x608 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH2 0x5DB PUSH0 DUP4 DUP4 PUSH2 0x6F7 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x64A JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x673 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP4 SWAP1 SSTORE DUP2 ISZERO PUSH2 0x6F0 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0x6E7 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x731 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x726 SWAP2 SWAP1 PUSH2 0xA06 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x7A1 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x783 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3FA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP4 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x7BF JUMPI PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH2 0x7DD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x822 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x879 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x883 PUSH2 0x830 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0xB39 PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 PUSH2 0x8BC DUP5 DUP3 PUSH2 0xA7D JUMP JUMPDEST POP PUSH1 0x4 DUP2 ADD PUSH2 0x566 DUP4 DUP3 PUSH2 0xA7D JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x916 JUMPI PUSH0 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x92C JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x935 DUP4 PUSH2 0x900 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x955 JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x95E DUP5 PUSH2 0x900 JUMP JUMPDEST SWAP3 POP PUSH2 0x96C PUSH1 0x20 DUP6 ADD PUSH2 0x900 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x98D JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x996 DUP3 PUSH2 0x900 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH0 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9AE JUMPI PUSH0 PUSH0 REVERT JUMPDEST PUSH2 0x9B7 DUP4 PUSH2 0x900 JUMP JUMPDEST SWAP2 POP PUSH2 0x9C5 PUSH1 0x20 DUP5 ADD PUSH2 0x900 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x9E2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xA00 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x27D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x504 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0xA5E JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6F0 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xA6A JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA97 JUMPI PUSH2 0xA97 PUSH2 0xA25 JUMP JUMPDEST PUSH2 0xAAB DUP2 PUSH2 0xAA5 DUP5 SLOAD PUSH2 0x9CE JUMP JUMPDEST DUP5 PUSH2 0xA39 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0xADD JUMPI PUSH0 DUP4 ISZERO PUSH2 0xAC6 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x6F0 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB0C JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0xAEC JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0xB29 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID MSTORE 0xC6 ORIGIN SELFBALANCE RJUMPI 0xF47D 0xB1 SWAP14 TLOAD RJUMP 0x4600 ADDRESS 0xC4 SWAP8 CREATE PUSH8 0xCA4CEBF71BA98EEA 0xDA 0xBE KECCAK256 0xBA 0xCE STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH9 0x907AF953DC9A836A66 0x4D PUSH32 0xA328E8D1D810148587E0BE7BAFB63237201C08564736F6C634300081D003300 ",
							"sourceMap": "346:312:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3011:144:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5505:186;;;;;;:::i;:::-;;:::i;:::-;;;1085:14:7;;1078:22;1060:41;;1048:2;1033:18;5505:186:5;920:187:7;4191:152:5;4322:14;;4191:152;;;1258:25:7;;;1246:2;1231:18;4191:152:5;1112:177:7;6251:244:5;;;;;;:::i;:::-;;:::i;4049:82::-;;;4122:2;1815:36:7;;1803:2;1788:18;4049:82:5;1673:184:7;4401:171:5;;;;;;:::i;:::-;-1:-1:-1;;;;;4545:20:5;4466:7;4545:20;;;-1:-1:-1;;;;;;;;;;;4545:20:5;;;;;;;4401:171;3268:148;;;:::i;4767:178::-;;;;;;:::i;:::-;;:::i;406:249:3:-;;;;;;:::i;:::-;;:::i;:::-;;5003:195:5;;;;;;:::i;:::-;;:::i;3011:144::-;3141:7;3134:14;;3056:13;;-1:-1:-1;;;;;;;;;;;2359:20:5;3134:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3011:144;:::o;5505:186::-;5578:4;966:10:6;5632:31:5;966:10:6;5648:7:5;5657:5;5632:8;:31::i;:::-;5680:4;5673:11;;;5505:186;;;;;:::o;6251:244::-;6338:4;966:10:6;6394:37:5;6410:4;966:10:6;6425:5:5;6394:15;:37::i;:::-;6441:26;6451:4;6457:2;6461:5;6441:9;:26::i;:::-;-1:-1:-1;6484:4:5;;6251:244;-1:-1:-1;;;;6251:244:5:o;3268:148::-;3400:9;3393:16;;3315:13;;-1:-1:-1;;;;;;;;;;;2359:20:5;3393:16;;;:::i;4767:178::-;4836:4;966:10:6;4890:27:5;966:10:6;4907:2:5;4911:5;4890:9;:27::i;406:249:3:-;8870:21:4;4302:15;;-1:-1:-1;;;4302:15:4;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:4;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:4;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:4;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:4;-1:-1:-1;;;5013:22:4;;;4979:67;-1:-1:-1;;;;;489:29:3;::::1;481:66;;;::::0;-1:-1:-1;;;481:66:3;;2905:2:7;481:66:3::1;::::0;::::1;2887:21:7::0;2944:2;2924:18;;;2917:30;2983:26;2963:18;;;2956:54;3027:18;;481:66:3::1;;;;;;;;;558:34;;;;;;;;;;;;;;-1:-1:-1::0;;;558:34:3::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;558:34:3::1;;::::0;:12:::1;:34::i;:::-;603:44;609:15;626:20;603:5;:44::i;:::-;5070:14:4::0;5066:101;;;5100:23;;-1:-1:-1;;;;5100:23:4;;;5142:14;;-1:-1:-1;3209:50:7;;5142:14:4;;3197:2:7;3182:18;5142:14:4;;;;;;;5066:101;4092:1081;;;;;406:249:3;:::o;5003:195:5:-;-1:-1:-1;;;;;5162:20:5;;;5083:7;5162:20;;;:13;:20;;;;;;;;:29;;;;;;;;;;;;;5003:195::o;10264:128::-;10348:37;10357:5;10364:7;10373:5;10380:4;10348:8;:37::i;:::-;10264:128;;;:::o;11993:477::-;12092:24;12119:25;12129:5;12136:7;12119:9;:25::i;:::-;12092:52;;-1:-1:-1;;12158:16:5;:37;12154:310;;12234:5;12215:16;:24;12211:130;;;12266:60;;-1:-1:-1;;;12266:60:5;;-1:-1:-1;;;;;3490:32:7;;12266:60:5;;;3472:51:7;3539:18;;;3532:34;;;3582:18;;;3575:34;;;3445:18;;12266:60:5;3270:345:7;12211:130:5;12382:57;12391:5;12398:7;12426:5;12407:16;:24;12433:5;12382:8;:57::i;:::-;12082:388;11993:477;;;:::o;6868:300::-;-1:-1:-1;;;;;6951:18:5;;6947:86;;6992:30;;-1:-1:-1;;;6992:30:5;;7019:1;6992:30;;;3766:51:7;3739:18;;6992:30:5;3620:203:7;6947:86:5;-1:-1:-1;;;;;7046:16:5;;7042:86;;7085:32;;-1:-1:-1;;;7085:32:5;;7114:1;7085:32;;;3766:51:7;3739:18;;7085:32:5;3620:203:7;7042:86:5;7137:24;7145:4;7151:2;7155:5;7137:7;:24::i;2577:147::-;6931:20:4;:18;:20::i;:::-;2679:38:5::1;2702:5;2709:7;2679:22;:38::i;:::-;2577:147:::0;;:::o;8996:208::-;-1:-1:-1;;;;;9066:21:5;;9062:91;;9110:32;;-1:-1:-1;;;9110:32:5;;9139:1;9110:32;;;3766:51:7;3739:18;;9110:32:5;3620:203:7;9062:91:5;9162:35;9178:1;9182:7;9191:5;9162:7;:35::i;11224:487::-;-1:-1:-1;;;;;;;;;;;;;;;;11389:19:5;;11385:89;;11431:32;;-1:-1:-1;;;11431:32:5;;11460:1;11431:32;;;3766:51:7;3739:18;;11431:32:5;3620:203:7;11385:89:5;-1:-1:-1;;;;;11487:21:5;;11483:90;;11531:31;;-1:-1:-1;;;11531:31:5;;11559:1;11531:31;;;3766:51:7;3739:18;;11531:31:5;3620:203:7;11483:90:5;-1:-1:-1;;;;;11582:20:5;;;;;;;:13;;;:20;;;;;;;;:29;;;;;;;;;:37;;;11629:76;;;;11679:7;-1:-1:-1;;;;;11663:31:5;11672:5;-1:-1:-1;;;;;11663:31:5;;11688:5;11663:31;;;;1258:25:7;;1246:2;1231:18;;1112:177;11663:31:5;;;;;;;;11629:76;11322:389;11224:487;;;;:::o;7483:1170::-;-1:-1:-1;;;;;;;;;;;;;;;;7625:18:5;;7621:546;;7779:5;7761:1;:14;;;:23;;;;;;;:::i;:::-;;;;-1:-1:-1;7621:546:5;;-1:-1:-1;7621:546:5;;-1:-1:-1;;;;;7837:17:5;;7815:19;7837:17;;;;;;;;;;;7872:19;;;7868:115;;;7918:50;;-1:-1:-1;;;7918:50:5;;-1:-1:-1;;;;;3490:32:7;;7918:50:5;;;3472:51:7;3539:18;;;3532:34;;;3582:18;;;3575:34;;;3445:18;;7918:50:5;3270:345:7;7868:115:5;-1:-1:-1;;;;;8103:17:5;;:11;:17;;;;;;;;;;8123:19;;;;8103:39;;7621:546;-1:-1:-1;;;;;8181:16:5;;8177:429;;8344:14;;;:23;;;;;;;8177:429;;;-1:-1:-1;;;;;8557:15:5;;:11;:15;;;;;;;;;;:24;;;;;;8177:429;8636:2;-1:-1:-1;;;;;8621:25:5;8630:4;-1:-1:-1;;;;;8621:25:5;;8640:5;8621:25;;;;1258::7;;1246:2;1231:18;;1112:177;8621:25:5;;;;;;;;7558:1095;7483:1170;;;:::o;7084:141:4:-;8870:21;8560:40;-1:-1:-1;;;8560:40:4;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:4;;;;;;;;;;;7146:73;7084:141::o;2730:216:5:-;6931:20:4;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;2895:7:5;:15:::1;2905:5:::0;2895:7;:15:::1;:::i;:::-;-1:-1:-1::0;2920:9:5::1;::::0;::::1;:19;2932:7:::0;2920:9;:19:::1;:::i;14:418:7:-:0;163:2;152:9;145:21;126:4;195:6;189:13;238:6;233:2;222:9;218:18;211:34;297:6;292:2;284:6;280:15;275:2;264:9;260:18;254:50;353:1;348:2;339:6;328:9;324:22;320:31;313:42;423:2;416;412:7;407:2;399:6;395:15;391:29;380:9;376:45;372:54;364:62;;;14:418;;;;:::o;437:173::-;505:20;;-1:-1:-1;;;;;554:31:7;;544:42;;534:70;;600:1;597;590:12;534:70;437:173;;;:::o;615:300::-;683:6;691;744:2;732:9;723:7;719:23;715:32;712:52;;;760:1;757;750:12;712:52;783:29;802:9;783:29;:::i;:::-;773:39;881:2;866:18;;;;853:32;;-1:-1:-1;;;615:300:7:o;1294:374::-;1371:6;1379;1387;1440:2;1428:9;1419:7;1415:23;1411:32;1408:52;;;1456:1;1453;1446:12;1408:52;1479:29;1498:9;1479:29;:::i;:::-;1469:39;;1527:38;1561:2;1550:9;1546:18;1527:38;:::i;:::-;1294:374;;1517:48;;-1:-1:-1;;;1634:2:7;1619:18;;;;1606:32;;1294:374::o;1862:186::-;1921:6;1974:2;1962:9;1953:7;1949:23;1945:32;1942:52;;;1990:1;1987;1980:12;1942:52;2013:29;2032:9;2013:29;:::i;:::-;2003:39;1862:186;-1:-1:-1;;;1862:186:7:o;2053:260::-;2121:6;2129;2182:2;2170:9;2161:7;2157:23;2153:32;2150:52;;;2198:1;2195;2188:12;2150:52;2221:29;2240:9;2221:29;:::i;:::-;2211:39;;2269:38;2303:2;2292:9;2288:18;2269:38;:::i;:::-;2259:48;;2053:260;;;;;:::o;2318:380::-;2397:1;2393:12;;;;2440;;;2461:61;;2515:4;2507:6;2503:17;2493:27;;2461:61;2568:2;2560:6;2557:14;2537:18;2534:38;2531:161;;2614:10;2609:3;2605:20;2602:1;2595:31;2649:4;2646:1;2639:15;2677:4;2674:1;2667:15;2531:161;;2318:380;;;:::o;3828:222::-;3893:9;;;3914:10;;;3911:133;;;3966:10;3961:3;3957:20;3954:1;3947:31;4001:4;3998:1;3991:15;4029:4;4026:1;4019:15;4055:127;4116:10;4111:3;4107:20;4104:1;4097:31;4147:4;4144:1;4137:15;4171:4;4168:1;4161:15;4313:518;4415:2;4410:3;4407:11;4404:421;;;4451:5;4448:1;4441:16;4495:4;4492:1;4482:18;4565:2;4553:10;4549:19;4546:1;4542:27;4536:4;4532:38;4601:4;4589:10;4586:20;4583:47;;;-1:-1:-1;4624:4:7;4583:47;4679:2;4674:3;4670:12;4667:1;4663:20;4657:4;4653:31;4643:41;;4734:81;4752:2;4745:5;4742:13;4734:81;;;4811:1;4797:16;;4778:1;4767:13;4734:81;;5007:1299;5133:3;5127:10;5160:18;5152:6;5149:30;5146:56;;;5182:18;;:::i;:::-;5211:97;5301:6;5261:38;5293:4;5287:11;5261:38;:::i;:::-;5255:4;5211:97;:::i;:::-;5357:4;5388:2;5377:14;;5405:1;5400:649;;;;6093:1;6110:6;6107:89;;;-1:-1:-1;6162:19:7;;;6156:26;6107:89;-1:-1:-1;;4964:1:7;4960:11;;;4956:24;4952:29;4942:40;4988:1;4984:11;;;4939:57;6209:81;;5370:930;;5400:649;4260:1;4253:14;;;4297:4;4284:18;;-1:-1:-1;;5436:20:7;;;5554:222;5568:7;5565:1;5562:14;5554:222;;;5650:19;;;5644:26;5629:42;;5757:4;5742:20;;;;5710:1;5698:14;;;;5584:12;5554:222;;;5558:3;5804:6;5795:7;5792:19;5789:201;;;5865:19;;;5859:26;-1:-1:-1;;5948:1:7;5944:14;;;5960:3;5940:24;5936:37;5932:42;5917:58;5902:74;;5789:201;-1:-1:-1;;;;6036:1:7;6020:14;;;6016:22;6003:36;;-1:-1:-1;5007:1299:7:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "591600",
								"executionCost": "623",
								"totalCost": "592223"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "infinite",
								"decimals()": "265",
								"initialize(address)": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2325",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 346,
									"end": 658,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 346,
									"end": 658,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 346,
									"end": 658,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122068907af953dc9a836a664d7f0a328e8d1d810148587e0be7bafb63237201c08564736f6c634300081d0033",
									".code": [
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "70A08231"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "70A08231"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "95D89B41"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "C4D66DE8"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "DD62ED3E"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "6FDDE03"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "95EA7B3"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "18160DDD"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "313CE567"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 346,
											"end": 658,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 3011,
											"end": 3155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 3011,
											"end": 3155,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1085,
											"end": 1099,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1085,
											"end": 1099,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1078,
											"end": 1100,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1060,
											"end": 1101,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1060,
											"end": 1101,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1048,
											"end": 1050,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1033,
											"end": 1051,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 920,
											"end": 1107,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4322,
											"end": 4336,
											"name": "PUSH",
											"source": 5,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02"
										},
										{
											"begin": 4322,
											"end": 4336,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4191,
											"end": 4343,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 1112,
											"end": 1289,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 4122,
											"end": 4124,
											"name": "PUSH",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 1815,
											"end": 1851,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1815,
											"end": 1851,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1803,
											"end": 1805,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1788,
											"end": 1806,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4049,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 1673,
											"end": 1857,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 4401,
											"end": 4572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "tag",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 4466,
											"end": 4473,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 4545,
											"end": 4565,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4401,
											"end": 4572,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 3268,
											"end": 3416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 4767,
											"end": 4945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 406,
											"end": 655,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 406,
											"end": 655,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 406,
											"end": 655,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 406,
											"end": 655,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 406,
											"end": 655,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 406,
											"end": 655,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 406,
											"end": 655,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 406,
											"end": 655,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 406,
											"end": 655,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 406,
											"end": 655,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 406,
											"end": 655,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 406,
											"end": 655,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 406,
											"end": 655,
											"name": "tag",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 406,
											"end": 655,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 406,
											"end": 655,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3141,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3056,
											"end": 3069,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3056,
											"end": 3069,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2359,
											"end": 2379,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 3134,
											"end": 3148,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 3134,
											"end": 3148,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MUL",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3134,
											"end": 3148,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3011,
											"end": 3155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5578,
											"end": 5582,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5632,
											"end": 5663,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5648,
											"end": 5655,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5657,
											"end": 5662,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 5632,
											"end": 5640,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 5632,
											"end": 5663,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5632,
											"end": 5663,
											"name": "tag",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 5632,
											"end": 5663,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5680,
											"end": 5684,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 5673,
											"end": 5684,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5673,
											"end": 5684,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5673,
											"end": 5684,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "tag",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5505,
											"end": 5691,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "tag",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6338,
											"end": 6342,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6394,
											"end": 6431,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 6410,
											"end": 6414,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 966,
											"end": 976,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6425,
											"end": 6430,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 6394,
											"end": 6409,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 6394,
											"end": 6431,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6394,
											"end": 6431,
											"name": "tag",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 6394,
											"end": 6431,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6441,
											"end": 6467,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 6451,
											"end": 6455,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 6457,
											"end": 6459,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 6461,
											"end": 6466,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 6441,
											"end": 6450,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 6441,
											"end": 6467,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6441,
											"end": 6467,
											"name": "tag",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 6441,
											"end": 6467,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6484,
											"end": 6488,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 6484,
											"end": 6488,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 6251,
											"end": 6495,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6251,
											"end": 6495,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "tag",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 3268,
											"end": 3416,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3400,
											"end": 3409,
											"name": "PUSH",
											"source": 5,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE04"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 3315,
											"end": 3328,
											"name": "PUSH",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3315,
											"end": 3328,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2359,
											"end": 2379,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3393,
											"end": 3409,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 3393,
											"end": 3409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "tag",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 4767,
											"end": 4945,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4836,
											"end": 4840,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4890,
											"end": 4917,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 966,
											"end": 976,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4907,
											"end": 4909,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4911,
											"end": 4916,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4890,
											"end": 4899,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 4890,
											"end": 4917,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 406,
											"end": 655,
											"name": "tag",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 406,
											"end": 655,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8870,
											"end": 8891,
											"name": "PUSH",
											"source": 4,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4158,
											"end": 4188,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4746,
											"end": 4760,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "tag",
											"source": 4,
											"value": "95"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4787,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4790,
											"end": 4801,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4805,
											"end": 4806,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4818,
											"end": 4822,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 4810,
											"end": 4840,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "tag",
											"source": 4,
											"value": "96"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4856,
											"end": 4868,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4873,
											"end": 4885,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "tag",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F92EE8A9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "tag",
											"source": 4,
											"value": "98"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 4968,
											"end": 4969,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "AND",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "tag",
											"source": 4,
											"value": "99"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 489,
											"end": 518,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 489,
											"end": 518,
											"modifierDepth": 1,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 481,
											"end": 547,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 481,
											"end": 547,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2905,
											"end": 2907,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 481,
											"end": 547,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2887,
											"end": 2908,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2944,
											"end": 2946,
											"name": "PUSH",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 2924,
											"end": 2942,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2924,
											"end": 2942,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2924,
											"end": 2942,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2917,
											"end": 2947,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2983,
											"end": 3009,
											"name": "PUSH",
											"source": 7,
											"value": "496E76616C696420636F6D6D756E6974792077616C6C65740000000000000000"
										},
										{
											"begin": 2963,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2963,
											"end": 2981,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2963,
											"end": 2981,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2956,
											"end": 3010,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3027,
											"end": 3045,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3027,
											"end": 3045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 481,
											"end": 547,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "104"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5248454D20566F7465"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "52564F5445"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 558,
											"end": 570,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 558,
											"end": 592,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "104"
										},
										{
											"begin": 558,
											"end": 592,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 603,
											"end": 647,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 609,
											"end": 624,
											"modifierDepth": 1,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 626,
											"end": 646,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "52B7D2DCC80CD2E4000000"
										},
										{
											"begin": 603,
											"end": 608,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 603,
											"end": 647,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 603,
											"end": 647,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 603,
											"end": 647,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5070,
											"end": 5084,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "108"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 3209,
											"end": 3259,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3209,
											"end": 3259,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 4,
											"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 3197,
											"end": 3199,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3182,
											"end": 3200,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "LOG1",
											"source": 4
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "tag",
											"source": 4,
											"value": "108"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 406,
											"end": 655,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 406,
											"end": 655,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "tag",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 5003,
											"end": 5198,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5083,
											"end": 5090,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5175,
											"name": "PUSH",
											"source": 5,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE01"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5182,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 5162,
											"end": 5191,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5003,
											"end": 5198,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "tag",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10348,
											"end": 10385,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 10357,
											"end": 10362,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 10364,
											"end": 10371,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 10373,
											"end": 10378,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 10380,
											"end": 10384,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 10348,
											"end": 10356,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 10348,
											"end": 10385,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10348,
											"end": 10385,
											"name": "tag",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 10348,
											"end": 10385,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10264,
											"end": 10392,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 10264,
											"end": 10392,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12092,
											"end": 12116,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 12119,
											"end": 12144,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 12129,
											"end": 12134,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12136,
											"end": 12143,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12119,
											"end": 12128,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 12119,
											"end": 12144,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 12119,
											"end": 12144,
											"name": "tag",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 12119,
											"end": 12144,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12092,
											"end": 12144,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 12092,
											"end": 12144,
											"name": "POP",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12158,
											"end": 12174,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 12158,
											"end": 12195,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 12154,
											"end": 12464,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 12234,
											"end": 12239,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 12215,
											"end": 12231,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 12215,
											"end": 12239,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3490,
											"end": 3522,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3490,
											"end": 3522,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3472,
											"end": 3523,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3532,
											"end": 3566,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3532,
											"end": 3566,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3532,
											"end": 3566,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3575,
											"end": 3609,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3575,
											"end": 3609,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3575,
											"end": 3609,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3445,
											"end": 3463,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3445,
											"end": 3463,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12266,
											"end": 12326,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 3270,
											"end": 3615,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "tag",
											"source": 5,
											"value": "121"
										},
										{
											"begin": 12211,
											"end": 12341,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12382,
											"end": 12439,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 12391,
											"end": 12396,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12398,
											"end": 12405,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12426,
											"end": 12431,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12407,
											"end": 12423,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 12407,
											"end": 12431,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 12433,
											"end": 12438,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 12382,
											"end": 12390,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 12382,
											"end": 12439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 12382,
											"end": 12439,
											"name": "tag",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 12382,
											"end": 12439,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 12082,
											"end": 12470,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11993,
											"end": 12470,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11993,
											"end": 12470,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "tag",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 6868,
											"end": 7168,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6951,
											"end": 6969,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7019,
											"end": 7020,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3766,
											"end": 3817,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6992,
											"end": 7022,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 3620,
											"end": 3823,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "tag",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 6947,
											"end": 7033,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7046,
											"end": 7062,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7114,
											"end": 7115,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3766,
											"end": 3817,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7085,
											"end": 7117,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 3620,
											"end": 3823,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "tag",
											"source": 5,
											"value": "129"
										},
										{
											"begin": 7042,
											"end": 7128,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7137,
											"end": 7161,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "116"
										},
										{
											"begin": 7145,
											"end": 7149,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7151,
											"end": 7153,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7155,
											"end": 7160,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7137,
											"end": 7144,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 7137,
											"end": 7161,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "tag",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 4,
											"value": "135"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2679,
											"end": 2717,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 2702,
											"end": 2707,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2709,
											"end": 2716,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2679,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 2679,
											"end": 2717,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2679,
											"end": 2717,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 2679,
											"end": 2717,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2577,
											"end": 2724,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2577,
											"end": 2724,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "tag",
											"source": 5,
											"value": "107"
										},
										{
											"begin": 8996,
											"end": 9204,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9066,
											"end": 9087,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "141"
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 9139,
											"end": 9140,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3766,
											"end": 3817,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9110,
											"end": 9142,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 3620,
											"end": 3823,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "tag",
											"source": 5,
											"value": "141"
										},
										{
											"begin": 9062,
											"end": 9153,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9162,
											"end": 9197,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 9178,
											"end": 9179,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 9182,
											"end": 9189,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9191,
											"end": 9196,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 9162,
											"end": 9169,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 9162,
											"end": 9197,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "tag",
											"source": 5,
											"value": "117"
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 11389,
											"end": 11408,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "146"
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 11460,
											"end": 11461,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3766,
											"end": 3817,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11431,
											"end": 11463,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 3620,
											"end": 3823,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "tag",
											"source": 5,
											"value": "146"
										},
										{
											"begin": 11385,
											"end": 11474,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 11487,
											"end": 11508,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 11559,
											"end": 11560,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3766,
											"end": 3817,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3739,
											"end": 3757,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11531,
											"end": 11562,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 3620,
											"end": 3823,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "tag",
											"source": 5,
											"value": "148"
										},
										{
											"begin": 11483,
											"end": 11573,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11595,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 11582,
											"end": 11595,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11595,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11602,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11611,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 11582,
											"end": 11619,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "150"
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 11679,
											"end": 11686,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11672,
											"end": 11677,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 5,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11688,
											"end": 11693,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "151"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1289,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "tag",
											"source": 5,
											"value": "151"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 11663,
											"end": 11694,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "tag",
											"source": 5,
											"value": "150"
										},
										{
											"begin": 11629,
											"end": 11705,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11322,
											"end": 11711,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11224,
											"end": 11711,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 11224,
											"end": 11711,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "tag",
											"source": 5,
											"value": "132"
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 7625,
											"end": 7643,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "154"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7779,
											"end": 7784,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7762,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7775,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "155"
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "156"
										},
										{
											"begin": 7761,
											"end": 7784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "tag",
											"source": 5,
											"value": "155"
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7761,
											"end": 7784,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "tag",
											"source": 5,
											"value": "154"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 7815,
											"end": 7834,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 7837,
											"end": 7854,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 7872,
											"end": 7891,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7872,
											"end": 7891,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7872,
											"end": 7891,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "158"
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3490,
											"end": 3522,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3490,
											"end": 3522,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 3472,
											"end": 3523,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3539,
											"end": 3557,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3532,
											"end": 3566,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3532,
											"end": 3566,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3532,
											"end": 3566,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "PUSH",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3582,
											"end": 3600,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3575,
											"end": 3609,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3575,
											"end": 3609,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3575,
											"end": 3609,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3445,
											"end": 3463,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3445,
											"end": 3463,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7918,
											"end": 7968,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "102"
										},
										{
											"begin": 3270,
											"end": 3615,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "tag",
											"source": 5,
											"value": "158"
										},
										{
											"begin": 7868,
											"end": 7983,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8114,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8120,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 8123,
											"end": 8142,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8123,
											"end": 8142,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8123,
											"end": 8142,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8123,
											"end": 8142,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8103,
											"end": 8142,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "tag",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 7621,
											"end": 8167,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8181,
											"end": 8197,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "160"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 8344,
											"end": 8358,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 8344,
											"end": 8358,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8344,
											"end": 8358,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8344,
											"end": 8367,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "161"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "tag",
											"source": 5,
											"value": "160"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8568,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8572,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8557,
											"end": 8581,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "tag",
											"source": 5,
											"value": "161"
										},
										{
											"begin": 8177,
											"end": 8606,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8636,
											"end": 8638,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8630,
											"end": 8634,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 5,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8640,
											"end": 8645,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "162"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1258,
											"end": 1283,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1246,
											"end": 1248,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1231,
											"end": 1249,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1112,
											"end": 1289,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "tag",
											"source": 5,
											"value": "162"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 8621,
											"end": 8646,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 7558,
											"end": 8653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7483,
											"end": 8653,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 7483,
											"end": 8653,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "tag",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8870,
											"end": 8891,
											"name": "PUSH",
											"source": 4,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "DIV",
											"source": 4
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 4,
											"value": "FF"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "166"
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1AFCD79F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "tag",
											"source": 4,
											"value": "166"
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7084,
											"end": 7225,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "tag",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 2730,
											"end": 2946,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "168"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "136"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 4,
											"value": "168"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 2895,
											"end": 2902,
											"name": "PUSH",
											"source": 5,
											"value": "52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03"
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "171"
										},
										{
											"begin": 2905,
											"end": 2910,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2895,
											"end": 2902,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "172"
										},
										{
											"begin": 2895,
											"end": 2910,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "tag",
											"source": 5,
											"value": "171"
										},
										{
											"begin": 2895,
											"end": 2910,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2920,
											"end": 2929,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2920,
											"end": 2929,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2920,
											"end": 2929,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "124"
										},
										{
											"begin": 2932,
											"end": 2939,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2920,
											"end": 2929,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2920,
											"end": 2939,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "172"
										},
										{
											"begin": 2920,
											"end": 2939,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 14,
											"end": 432,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 14,
											"end": 432,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 163,
											"end": 165,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 152,
											"end": 161,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 145,
											"end": 166,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 201,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 189,
											"end": 202,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 238,
											"end": 244,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 233,
											"end": 235,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 222,
											"end": 231,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 218,
											"end": 236,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 211,
											"end": 245,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 297,
											"end": 303,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 292,
											"end": 294,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 284,
											"end": 290,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 280,
											"end": 295,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 275,
											"end": 277,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 264,
											"end": 273,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 260,
											"end": 278,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 254,
											"end": 304,
											"name": "MCOPY",
											"source": 7
										},
										{
											"begin": 353,
											"end": 354,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 350,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 339,
											"end": 345,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 328,
											"end": 337,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 324,
											"end": 346,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 320,
											"end": 351,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 313,
											"end": 355,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 423,
											"end": 425,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 416,
											"end": 418,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 412,
											"end": 419,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 407,
											"end": 409,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 399,
											"end": 405,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 395,
											"end": 410,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 391,
											"end": 420,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 380,
											"end": 389,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 376,
											"end": 421,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 372,
											"end": 426,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 364,
											"end": 426,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 364,
											"end": 426,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 364,
											"end": 426,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 432,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 14,
											"end": 432,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 14,
											"end": 432,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 432,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 14,
											"end": 432,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 437,
											"end": 610,
											"name": "tag",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 437,
											"end": 610,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 505,
											"end": 525,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 505,
											"end": 525,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 554,
											"end": 585,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 554,
											"end": 585,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 544,
											"end": 586,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 544,
											"end": 586,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 534,
											"end": 604,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 534,
											"end": 604,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 600,
											"end": 601,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 597,
											"end": 598,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 590,
											"end": 602,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 534,
											"end": 604,
											"name": "tag",
											"source": 7,
											"value": "184"
										},
										{
											"begin": 534,
											"end": 604,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 437,
											"end": 610,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 437,
											"end": 610,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 437,
											"end": 610,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 437,
											"end": 610,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 615,
											"end": 915,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 615,
											"end": 915,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 683,
											"end": 689,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 691,
											"end": 697,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 744,
											"end": 746,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 732,
											"end": 741,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 723,
											"end": 730,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 719,
											"end": 742,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 715,
											"end": 747,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 712,
											"end": 764,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 712,
											"end": 764,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 712,
											"end": 764,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 760,
											"end": 761,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 757,
											"end": 758,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 750,
											"end": 762,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 712,
											"end": 764,
											"name": "tag",
											"source": 7,
											"value": "186"
										},
										{
											"begin": 712,
											"end": 764,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 783,
											"end": 812,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 802,
											"end": 811,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 783,
											"end": 812,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 783,
											"end": 812,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 783,
											"end": 812,
											"name": "tag",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 783,
											"end": 812,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 773,
											"end": 812,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 881,
											"end": 883,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 866,
											"end": 884,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 866,
											"end": 884,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 866,
											"end": 884,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 866,
											"end": 884,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 853,
											"end": 885,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 853,
											"end": 885,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 615,
											"end": 915,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1371,
											"end": 1377,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1379,
											"end": 1385,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1387,
											"end": 1393,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1440,
											"end": 1442,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1428,
											"end": 1437,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1419,
											"end": 1426,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1415,
											"end": 1438,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1411,
											"end": 1443,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1456,
											"end": 1457,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1453,
											"end": 1454,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1446,
											"end": 1458,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "tag",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 1408,
											"end": 1460,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 1479,
											"end": 1508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "tag",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 1479,
											"end": 1508,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1469,
											"end": 1508,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1469,
											"end": 1508,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "193"
										},
										{
											"begin": 1561,
											"end": 1563,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1550,
											"end": 1559,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1546,
											"end": 1564,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 1527,
											"end": 1565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "tag",
											"source": 7,
											"value": "193"
										},
										{
											"begin": 1527,
											"end": 1565,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1294,
											"end": 1668,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 1517,
											"end": 1565,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1517,
											"end": 1565,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1634,
											"end": 1636,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1619,
											"end": 1637,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1606,
											"end": 1638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1606,
											"end": 1638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1294,
											"end": 1668,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1862,
											"end": 2048,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 1862,
											"end": 2048,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1921,
											"end": 1927,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1974,
											"end": 1976,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1962,
											"end": 1971,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1953,
											"end": 1960,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1949,
											"end": 1972,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1945,
											"end": 1977,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1990,
											"end": 1991,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1987,
											"end": 1988,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1980,
											"end": 1992,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "tag",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 1942,
											"end": 1994,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2013,
											"end": 2042,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 2032,
											"end": 2041,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2013,
											"end": 2042,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 2013,
											"end": 2042,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2013,
											"end": 2042,
											"name": "tag",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 2013,
											"end": 2042,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2003,
											"end": 2042,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1862,
											"end": 2048,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1862,
											"end": 2048,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2053,
											"end": 2313,
											"name": "tag",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 2053,
											"end": 2313,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2121,
											"end": 2127,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2129,
											"end": 2135,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2182,
											"end": 2184,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2170,
											"end": 2179,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2161,
											"end": 2168,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2157,
											"end": 2180,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2153,
											"end": 2185,
											"name": "SLT",
											"source": 7
										},
										{
											"begin": 2150,
											"end": 2202,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2150,
											"end": 2202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 2150,
											"end": 2202,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2199,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2195,
											"end": 2196,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2188,
											"end": 2200,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2150,
											"end": 2202,
											"name": "tag",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 2150,
											"end": 2202,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2221,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 2240,
											"end": 2249,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2221,
											"end": 2250,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 2221,
											"end": 2250,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2221,
											"end": 2250,
											"name": "tag",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 2221,
											"end": 2250,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2211,
											"end": 2250,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2211,
											"end": 2250,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2307,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "201"
										},
										{
											"begin": 2303,
											"end": 2305,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2292,
											"end": 2301,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2288,
											"end": 2306,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2307,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 2269,
											"end": 2307,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2269,
											"end": 2307,
											"name": "tag",
											"source": 7,
											"value": "201"
										},
										{
											"begin": 2269,
											"end": 2307,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2259,
											"end": 2307,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2259,
											"end": 2307,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2053,
											"end": 2313,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2053,
											"end": 2313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2053,
											"end": 2313,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2053,
											"end": 2313,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2053,
											"end": 2313,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2053,
											"end": 2313,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2318,
											"end": 2698,
											"name": "tag",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 2318,
											"end": 2698,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2397,
											"end": 2398,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2393,
											"end": 2405,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2393,
											"end": 2405,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2393,
											"end": 2405,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 2393,
											"end": 2405,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2440,
											"end": 2452,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2440,
											"end": 2452,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2440,
											"end": 2452,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2461,
											"end": 2522,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 2461,
											"end": 2522,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2515,
											"end": 2519,
											"name": "PUSH",
											"source": 7,
											"value": "7F"
										},
										{
											"begin": 2507,
											"end": 2513,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2503,
											"end": 2520,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2520,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2493,
											"end": 2520,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2461,
											"end": 2522,
											"name": "tag",
											"source": 7,
											"value": "203"
										},
										{
											"begin": 2461,
											"end": 2522,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2568,
											"end": 2570,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2566,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2557,
											"end": 2571,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 2537,
											"end": 2555,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2534,
											"end": 2572,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2531,
											"end": 2692,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 2531,
											"end": 2692,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2614,
											"end": 2624,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 2609,
											"end": 2612,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 2605,
											"end": 2625,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2603,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2595,
											"end": 2626,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2649,
											"end": 2653,
											"name": "PUSH",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 2646,
											"end": 2647,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2639,
											"end": 2654,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2677,
											"end": 2681,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2674,
											"end": 2675,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2667,
											"end": 2682,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2531,
											"end": 2692,
											"name": "tag",
											"source": 7,
											"value": "204"
										},
										{
											"begin": 2531,
											"end": 2692,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2531,
											"end": 2692,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2318,
											"end": 2698,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2318,
											"end": 2698,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2318,
											"end": 2698,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2318,
											"end": 2698,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3828,
											"end": 4050,
											"name": "tag",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 3828,
											"end": 4050,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3893,
											"end": 3902,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3893,
											"end": 3902,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3893,
											"end": 3902,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3914,
											"end": 3924,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3914,
											"end": 3924,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3914,
											"end": 3924,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3911,
											"end": 4044,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3911,
											"end": 4044,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 3911,
											"end": 4044,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3966,
											"end": 3976,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 3961,
											"end": 3964,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 3957,
											"end": 3977,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 3954,
											"end": 3955,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3947,
											"end": 3978,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4001,
											"end": 4005,
											"name": "PUSH",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 3998,
											"end": 3999,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3991,
											"end": 4006,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4029,
											"end": 4033,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4026,
											"end": 4027,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4019,
											"end": 4034,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4055,
											"end": 4182,
											"name": "tag",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 4055,
											"end": 4182,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4116,
											"end": 4126,
											"name": "PUSH",
											"source": 7,
											"value": "4E487B71"
										},
										{
											"begin": 4111,
											"end": 4114,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 4107,
											"end": 4127,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 4104,
											"end": 4105,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4097,
											"end": 4128,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4147,
											"end": 4151,
											"name": "PUSH",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 4144,
											"end": 4145,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4137,
											"end": 4152,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4171,
											"end": 4175,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 4168,
											"end": 4169,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4161,
											"end": 4176,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4313,
											"end": 4831,
											"name": "tag",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 4313,
											"end": 4831,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4415,
											"end": 4417,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 4410,
											"end": 4413,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4407,
											"end": 4418,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 4404,
											"end": 4825,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4404,
											"end": 4825,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "116"
										},
										{
											"begin": 4404,
											"end": 4825,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4451,
											"end": 4456,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4448,
											"end": 4449,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4441,
											"end": 4457,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4495,
											"end": 4499,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4492,
											"end": 4493,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4482,
											"end": 4500,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4565,
											"end": 4567,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 4553,
											"end": 4563,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4549,
											"end": 4568,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4546,
											"end": 4547,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 4542,
											"end": 4569,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 4536,
											"end": 4540,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4532,
											"end": 4570,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4601,
											"end": 4605,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4589,
											"end": 4599,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4586,
											"end": 4606,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 4583,
											"end": 4630,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4583,
											"end": 4630,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "215"
										},
										{
											"begin": 4583,
											"end": 4630,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4624,
											"end": 4628,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4583,
											"end": 4630,
											"name": "tag",
											"source": 7,
											"value": "215"
										},
										{
											"begin": 4583,
											"end": 4630,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4679,
											"end": 4681,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 4674,
											"end": 4677,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4670,
											"end": 4682,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4667,
											"end": 4668,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 4663,
											"end": 4683,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 4657,
											"end": 4661,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4653,
											"end": 4684,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4643,
											"end": 4684,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4643,
											"end": 4684,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4734,
											"end": 4815,
											"name": "tag",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 4734,
											"end": 4815,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4752,
											"end": 4754,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4745,
											"end": 4750,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4742,
											"end": 4755,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 4734,
											"end": 4815,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4734,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 4734,
											"end": 4815,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4811,
											"end": 4812,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4797,
											"end": 4813,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4797,
											"end": 4813,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4778,
											"end": 4779,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4767,
											"end": 4780,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4734,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "216"
										},
										{
											"begin": 4734,
											"end": 4815,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5007,
											"end": 6306,
											"name": "tag",
											"source": 7,
											"value": "172"
										},
										{
											"begin": 5007,
											"end": 6306,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5133,
											"end": 5136,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5127,
											"end": 5137,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5160,
											"end": 5178,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5152,
											"end": 5158,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5149,
											"end": 5179,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5202,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5146,
											"end": 5202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 5146,
											"end": 5202,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5182,
											"end": 5200,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 5182,
											"end": 5200,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 5182,
											"end": 5200,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5182,
											"end": 5200,
											"name": "tag",
											"source": 7,
											"value": "222"
										},
										{
											"begin": 5182,
											"end": 5200,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5211,
											"end": 5308,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 5301,
											"end": 5307,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5261,
											"end": 5299,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 5293,
											"end": 5297,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5287,
											"end": 5298,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5261,
											"end": 5299,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "61"
										},
										{
											"begin": 5261,
											"end": 5299,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5261,
											"end": 5299,
											"name": "tag",
											"source": 7,
											"value": "224"
										},
										{
											"begin": 5261,
											"end": 5299,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5255,
											"end": 5259,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5211,
											"end": 5308,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 5211,
											"end": 5308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5211,
											"end": 5308,
											"name": "tag",
											"source": 7,
											"value": "223"
										},
										{
											"begin": 5211,
											"end": 5308,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5357,
											"end": 5361,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5388,
											"end": 5390,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 5377,
											"end": 5391,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5377,
											"end": 5391,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 5405,
											"end": 5406,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5400,
											"end": 6049,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5400,
											"end": 6049,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5400,
											"end": 6049,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "226"
										},
										{
											"begin": 5400,
											"end": 6049,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6093,
											"end": 6094,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6110,
											"end": 6116,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6107,
											"end": 6196,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6107,
											"end": 6196,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 6107,
											"end": 6196,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6162,
											"end": 6181,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6162,
											"end": 6181,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6162,
											"end": 6181,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6156,
											"end": 6182,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6107,
											"end": 6196,
											"name": "tag",
											"source": 7,
											"value": "227"
										},
										{
											"begin": 6107,
											"end": 6196,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4964,
											"end": 4965,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4960,
											"end": 4971,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 4956,
											"end": 4980,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 4952,
											"end": 4981,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 4942,
											"end": 4982,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4988,
											"end": 4989,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4984,
											"end": 4995,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4984,
											"end": 4995,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4984,
											"end": 4995,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 4939,
											"end": 4996,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 6209,
											"end": 6290,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6209,
											"end": 6290,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5370,
											"end": 6300,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 5370,
											"end": 6300,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5400,
											"end": 6049,
											"name": "tag",
											"source": 7,
											"value": "226"
										},
										{
											"begin": 5400,
											"end": 6049,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4260,
											"end": 4261,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4253,
											"end": 4267,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4253,
											"end": 4267,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4253,
											"end": 4267,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4297,
											"end": 4301,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4284,
											"end": 4302,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4284,
											"end": 4302,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5436,
											"end": 5456,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5436,
											"end": 5456,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5436,
											"end": 5456,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5554,
											"end": 5776,
											"name": "tag",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 5554,
											"end": 5776,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5568,
											"end": 5575,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5565,
											"end": 5566,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5562,
											"end": 5576,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 5554,
											"end": 5776,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5554,
											"end": 5776,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "232"
										},
										{
											"begin": 5554,
											"end": 5776,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5650,
											"end": 5669,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5650,
											"end": 5669,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5650,
											"end": 5669,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5644,
											"end": 5670,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5629,
											"end": 5671,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5629,
											"end": 5671,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5757,
											"end": 5761,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5742,
											"end": 5762,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 5742,
											"end": 5762,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5742,
											"end": 5762,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5742,
											"end": 5762,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 5710,
											"end": 5711,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5698,
											"end": 5712,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5698,
											"end": 5712,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5698,
											"end": 5712,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5698,
											"end": 5712,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5584,
											"end": 5596,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5554,
											"end": 5776,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "230"
										},
										{
											"begin": 5554,
											"end": 5776,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 5554,
											"end": 5776,
											"name": "tag",
											"source": 7,
											"value": "232"
										},
										{
											"begin": 5554,
											"end": 5776,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5558,
											"end": 5561,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5804,
											"end": 5810,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5795,
											"end": 5802,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5792,
											"end": 5811,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 5789,
											"end": 5990,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5789,
											"end": 5990,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "233"
										},
										{
											"begin": 5789,
											"end": 5990,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5865,
											"end": 5884,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 5865,
											"end": 5884,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5865,
											"end": 5884,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5859,
											"end": 5885,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5948,
											"end": 5949,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 5944,
											"end": 5958,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 5944,
											"end": 5958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5944,
											"end": 5958,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 5960,
											"end": 5963,
											"name": "PUSH",
											"source": 7,
											"value": "F8"
										},
										{
											"begin": 5940,
											"end": 5964,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5936,
											"end": 5973,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 5932,
											"end": 5974,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 5917,
											"end": 5975,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5902,
											"end": 5976,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5902,
											"end": 5976,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 5789,
											"end": 5990,
											"name": "tag",
											"source": 7,
											"value": "233"
										},
										{
											"begin": 5789,
											"end": 5990,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6036,
											"end": 6037,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 6020,
											"end": 6034,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6020,
											"end": 6034,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6020,
											"end": 6034,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 6016,
											"end": 6038,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6003,
											"end": 6039,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6003,
											"end": 6039,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5007,
											"end": 6306,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										}
									],
									".data": {
										"3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B": "52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00"
									}
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"contracts/RHEMVote.sol",
								"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol",
								"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol",
								"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"initialize(address)": "c4d66de8",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RHEMVote.sol\":\"RHEMVote\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"contracts/RHEMVote.sol\":{\"keccak256\":\"0xa61b58e7aa37076017bf9b3db86312fc875cff336f554f7195099b1fd22f0ad2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://88f9be7443849408874cc3f5f1b3d521073196ed672d4201e8efc17fd9ce2a95\",\"dweb:/ipfs/QmQ3ykPRApuXvhoxmNU2LfVRSGcz7ZbADzF2L4P87rXcuQ\"]},\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.29+commit.ab55807c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							136
						],
						"IERC20Errors": [
							41
						],
						"IERC721Errors": [
							89
						]
					},
					"id": 137,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "138:141:0",
								"text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
							},
							"fullyImplemented": true,
							"id": 41,
							"linearizedBaseContracts": [
								41
							],
							"name": "IERC20Errors",
							"nameLocation": "290:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "309:309:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 11,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "629:24:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "662:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "654:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "654:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "678:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "670:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "695:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "687:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "653:49:0"
									},
									"src": "623:80:0"
								},
								{
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "709:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 16,
									"name": "ERC20InvalidSender",
									"nameLocation": "872:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "899:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "891:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:16:0"
									},
									"src": "866:41:0"
								},
								{
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "913:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 21,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1083:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1112:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "1104:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:18:0"
									},
									"src": "1077:45:0"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "1128:345:0",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 30,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1484:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1519:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1511:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1511:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1536:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1528:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1555:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1547:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:52:0"
									},
									"src": "1478:85:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1569:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 35,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1754:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1783:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1775:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1775:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1774:18:0"
									},
									"src": "1748:45:0"
								},
								{
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1799:195:0",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 40,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2005:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2033:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2025:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 37,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2025:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2024:17:0"
									},
									"src": "1999:43:0"
								}
							],
							"scope": 137,
							"src": "280:1764:0",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 42,
								"nodeType": "StructuredDocumentation",
								"src": "2046:143:0",
								"text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
							},
							"fullyImplemented": true,
							"id": 89,
							"linearizedBaseContracts": [
								89
							],
							"name": "IERC721Errors",
							"nameLocation": "2200:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2220:219:0",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 47,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2450:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2477:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "2469:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2468:15:0"
									},
									"src": "2444:40:0"
								},
								{
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "2490:132:0",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 52,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2633:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2664:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2656:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2656:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:17:0"
									},
									"src": "2627:46:0"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2679:289:0",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 61,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2979:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3008:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3000:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3000:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3024:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3016:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3041:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3033:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 58,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2999:48:0"
									},
									"src": "2973:75:0"
								},
								{
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "3054:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 66,
									"name": "ERC721InvalidSender",
									"nameLocation": "3217:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3245:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 66,
												"src": "3237:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 63,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3236:16:0"
									},
									"src": "3211:42:0"
								},
								{
									"documentation": {
										"id": 67,
										"nodeType": "StructuredDocumentation",
										"src": "3259:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 71,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3429:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3459:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "3451:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:18:0"
									},
									"src": "3423:46:0"
								},
								{
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "3475:247:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 78,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3733:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3768:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3760:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3760:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3786:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3778:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3778:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3759:35:0"
									},
									"src": "3727:68:0"
								},
								{
									"documentation": {
										"id": 79,
										"nodeType": "StructuredDocumentation",
										"src": "3801:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 83,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3986:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4016:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "4008:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4007:18:0"
									},
									"src": "3980:46:0"
								},
								{
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "4032:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 88,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4240:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4270:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "4262:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:18:0"
									},
									"src": "4234:46:0"
								}
							],
							"scope": 137,
							"src": "2190:2092:0",
							"usedErrors": [
								47,
								52,
								61,
								66,
								71,
								78,
								83,
								88
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 90,
								"nodeType": "StructuredDocumentation",
								"src": "4284:145:0",
								"text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
							},
							"fullyImplemented": true,
							"id": 136,
							"linearizedBaseContracts": [
								136
							],
							"name": "IERC1155Errors",
							"nameLocation": "4440:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "4461:361:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 101,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4833:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4868:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4860:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4884:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4876:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 94,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4901:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4893:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4917:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4909:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4909:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:66:0"
									},
									"src": "4827:99:0"
								},
								{
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "4932:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 106,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5095:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5124:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "5116:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5116:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5115:16:0"
									},
									"src": "5089:43:0"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "5138:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 111,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5308:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5339:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "5331:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5331:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5330:18:0"
									},
									"src": "5302:47:0"
								},
								{
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "5355:256:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 118,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5622:28:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5659:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5651:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5651:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5677:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5669:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5669:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5650:33:0"
									},
									"src": "5616:68:0"
								},
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "5690:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 123,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5875:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5906:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5898:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:18:0"
									},
									"src": "5869:47:0"
								},
								{
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "5922:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 128,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6130:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6161:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "6153:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6153:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6152:18:0"
									},
									"src": "6124:47:0"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "6177:280:0",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 135,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6468:25:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6502:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6494:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6494:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6521:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6513:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6513:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6493:41:0"
									},
									"src": "6462:73:0"
								}
							],
							"scope": 137,
							"src": "4430:2107:0",
							"usedErrors": [
								101,
								106,
								111,
								118,
								123,
								128,
								135
							],
							"usedEvents": []
						}
					],
					"src": "112:6426:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							214
						]
					},
					"id": 215,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 138,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 139,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:1",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 214,
							"linearizedBaseContracts": [
								214
							],
							"name": "IERC20",
							"nameLocation": "214:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 140,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 148,
									"name": "Transfer",
									"nameLocation": "396:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "405:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 144,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "427:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 146,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "447:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:1"
									},
									"src": "390:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 157,
									"name": "Approval",
									"nameLocation": "627:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "636:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "659:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 157,
												"src": "684:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:1"
									},
									"src": "621:78:1"
								},
								{
									"documentation": {
										"id": 158,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:1",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:1"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 163,
												"src": "821:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:1"
									},
									"scope": 214,
									"src": "775:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 164,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:1",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "931:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 165,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:1"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "971:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:1"
									},
									"scope": 214,
									"src": "912:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:1",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 181,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1222:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1234:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:1"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "1267:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 178,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:1"
									},
									"scope": 214,
									"src": "1204:69:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1567:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1582:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:1"
									},
									"returnParameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1622:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:1"
									},
									"scope": 214,
									"src": "1548:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:1",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 201,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "2326:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "2343:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:1"
									},
									"returnParameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "2376:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 198,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:1"
									},
									"scope": 214,
									"src": "2309:73:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 213,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "2712:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "2726:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "2738:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 207,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:1"
									},
									"returnParameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "2771:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 210,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:1"
									},
									"scope": 214,
									"src": "2690:87:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 215,
							"src": "204:2575:1",
							"usedErrors": [],
							"usedEvents": [
								148,
								157
							]
						}
					],
					"src": "106:2674:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							214
						],
						"IERC20Metadata": [
							240
						]
					},
					"id": 241,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 216,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 218,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 241,
							"sourceUnit": 215,
							"src": "151:37:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 217,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 214,
										"src": "159:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 220,
										"name": "IERC20",
										"nameLocations": [
											"306:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 214,
										"src": "306:6:2"
									},
									"id": 221,
									"nodeType": "InheritanceSpecifier",
									"src": "306:6:2"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 219,
								"nodeType": "StructuredDocumentation",
								"src": "190:87:2",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 240,
							"linearizedBaseContracts": [
								240,
								214
							],
							"name": "IERC20Metadata",
							"nameLocation": "288:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 222,
										"nodeType": "StructuredDocumentation",
										"src": "319:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 227,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "387:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:2"
									},
									"returnParameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 227,
												"src": "417:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 224,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "417:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:15:2"
									},
									"scope": 240,
									"src": "378:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 228,
										"nodeType": "StructuredDocumentation",
										"src": "438:56:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 233,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "508:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:2"
									},
									"returnParameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 231,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "540:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 230,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "540:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:15:2"
									},
									"scope": 240,
									"src": "499:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 234,
										"nodeType": "StructuredDocumentation",
										"src": "561:65:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 239,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "640:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:2"
									},
									"returnParameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "674:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 236,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:7:2"
									},
									"scope": 240,
									"src": "631:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 241,
							"src": "278:405:2",
							"usedErrors": [],
							"usedEvents": [
								148,
								157
							]
						}
					],
					"src": "125:559:2"
				},
				"id": 2
			},
			"contracts/RHEMVote.sol": {
				"ast": {
					"absolutePath": "contracts/RHEMVote.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1198
						],
						"ERC20Upgradeable": [
							1152
						],
						"IERC20": [
							214
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							240
						],
						"Initializable": [
							535
						],
						"RHEMVote": [
							281
						]
					},
					"id": 282,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 242,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".26"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:3"
						},
						{
							"absolutePath": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol",
							"file": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol",
							"id": 243,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 282,
							"sourceUnit": 1153,
							"src": "61:141:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol",
							"file": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol",
							"id": 244,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 282,
							"sourceUnit": 536,
							"src": "204:138:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 245,
										"name": "Initializable",
										"nameLocations": [
											"367:13:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 535,
										"src": "367:13:3"
									},
									"id": 246,
									"nodeType": "InheritanceSpecifier",
									"src": "367:13:3"
								},
								{
									"baseName": {
										"id": 247,
										"name": "ERC20Upgradeable",
										"nameLocations": [
											"382:16:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1152,
										"src": "382:16:3"
									},
									"id": 248,
									"nodeType": "InheritanceSpecifier",
									"src": "382:16:3"
								}
							],
							"canonicalName": "RHEMVote",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 281,
							"linearizedBaseContracts": [
								281,
								1152,
								41,
								240,
								214,
								1198,
								535
							],
							"name": "RHEMVote",
							"nameLocation": "355:8:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 279,
										"nodeType": "Block",
										"src": "470:185:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 261,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 256,
																"name": "communityWallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 250,
																"src": "489:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 259,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "516:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 258,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "508:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 257,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "508:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 260,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "508:10:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "489:29:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420636f6d6d756e6974792077616c6c6574",
															"id": 262,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "520:26:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0e6aa9e82df9ed735f6dba8fe33ecac07fe34e5696eb7e317a220817b24d3a2b",
																"typeString": "literal_string \"Invalid community wallet\""
															},
															"value": "Invalid community wallet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0e6aa9e82df9ed735f6dba8fe33ecac07fe34e5696eb7e317a220817b24d3a2b",
																"typeString": "literal_string \"Invalid community wallet\""
															}
														],
														"id": 255,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "481:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "481:66:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 264,
												"nodeType": "ExpressionStatement",
												"src": "481:66:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "5248454d20566f7465",
															"id": 266,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "571:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_00bc292880d37cb3dd65df67dd0f2fd07d5482b4e309cf40f8572043b94766f7",
																"typeString": "literal_string \"RHEM Vote\""
															},
															"value": "RHEM Vote"
														},
														{
															"hexValue": "52564f5445",
															"id": 267,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "584:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0711e0b3428204b273604516f1b5d67f30987520c41e3b0d919381216696f9f7",
																"typeString": "literal_string \"RVOTE\""
															},
															"value": "RVOTE"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_00bc292880d37cb3dd65df67dd0f2fd07d5482b4e309cf40f8572043b94766f7",
																"typeString": "literal_string \"RHEM Vote\""
															},
															{
																"typeIdentifier": "t_stringliteral_0711e0b3428204b273604516f1b5d67f30987520c41e3b0d919381216696f9f7",
																"typeString": "literal_string \"RVOTE\""
															}
														],
														"id": 265,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 603,
														"src": "558:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "558:34:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 269,
												"nodeType": "ExpressionStatement",
												"src": "558:34:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 271,
															"name": "communityWallet",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 250,
															"src": "609:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
																"typeString": "int_const 100000000000000000000000000"
															},
															"id": 276,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3130305f3030305f303030",
																"id": 272,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "626:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"value": "100_000_000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"id": 275,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 273,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "640:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3138",
																	"id": 274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "644:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_18_by_1",
																		"typeString": "int_const 18"
																	},
																	"value": "18"
																},
																"src": "640:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																}
															},
															"src": "626:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
																"typeString": "int_const 100000000000000000000000000"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_rational_100000000000000000000000000_by_1",
																"typeString": "int_const 100000000000000000000000000"
															}
														],
														"id": 270,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 984,
														"src": "603:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 277,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "603:44:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 278,
												"nodeType": "ExpressionStatement",
												"src": "603:44:3"
											}
										]
									},
									"functionSelector": "c4d66de8",
									"id": 280,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 253,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 252,
												"name": "initializer",
												"nameLocations": [
													"458:11:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 389,
												"src": "458:11:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "458:11:3"
										}
									],
									"name": "initialize",
									"nameLocation": "415:10:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "communityWallet",
												"nameLocation": "434:15:3",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "426:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "425:25:3"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "470:0:3"
									},
									"scope": 281,
									"src": "406:249:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 282,
							"src": "346:312:3",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40,
								298,
								301
							],
							"usedEvents": [
								148,
								157,
								306
							]
						}
					],
					"src": "33:625:3"
				},
				"id": 3
			},
			"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							535
						]
					},
					"id": 536,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 283,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 284,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:4",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 535,
							"linearizedBaseContracts": [
								535
							],
							"name": "Initializable",
							"nameLocation": "2367:13:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "2387:293:4",
										"text": " @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"
									},
									"id": 292,
									"members": [
										{
											"constant": false,
											"id": 288,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:4",
											"nodeType": "VariableDeclaration",
											"scope": 292,
											"src": "2813:19:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 287,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 291,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:4",
											"nodeType": "VariableDeclaration",
											"scope": 292,
											"src": "2950:18:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 290,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:4",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:4",
									"nodeType": "StructDefinition",
									"scope": 535,
									"src": "2685:290:4",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 295,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:4",
									"nodeType": "VariableDeclaration",
									"scope": 535,
									"src": "3098:115:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 293,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 294,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:4",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 298,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:4"
									},
									"src": "3285:30:4"
								},
								{
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:4",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 301,
									"name": "NotInitializing",
									"nameLocation": "3389:15:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:4"
									},
									"src": "3383:24:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 302,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:4",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 306,
									"name": "Initialized",
									"nameLocation": "3514:11:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "3526:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 303,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:4"
									},
									"src": "3508:34:4"
								},
								{
									"body": {
										"id": 388,
										"nodeType": "Block",
										"src": "4092:1081:4",
										"statements": [
											{
												"assignments": [
													311
												],
												"declarations": [
													{
														"constant": false,
														"id": 311,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 388,
														"src": "4158:30:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 310,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 309,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 292,
																"src": "4158:20:4"
															},
															"referencedDeclaration": 292,
															"src": "4158:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 314,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 312,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "4191:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$292_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:4"
											},
											{
												"assignments": [
													316
												],
												"declarations": [
													{
														"constant": false,
														"id": 316,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:4",
														"nodeType": "VariableDeclaration",
														"scope": 388,
														"src": "4279:19:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 315,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 320,
												"initialValue": {
													"id": 319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:4",
													"subExpression": {
														"expression": {
															"id": 317,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "4302:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 318,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:4",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 291,
														"src": "4302:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:4"
											},
											{
												"assignments": [
													322
												],
												"declarations": [
													{
														"constant": false,
														"id": 322,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:4",
														"nodeType": "VariableDeclaration",
														"scope": 388,
														"src": "4327:18:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 321,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 325,
												"initialValue": {
													"expression": {
														"id": 323,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 311,
														"src": "4348:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 324,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:4",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 288,
													"src": "4348:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:4"
											},
											{
												"assignments": [
													327
												],
												"declarations": [
													{
														"constant": false,
														"id": 327,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4711:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 388,
														"src": "4706:17:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 326,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4706:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 333,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 330,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 328,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "4726:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 329,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4741:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4726:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 331,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 316,
														"src": "4746:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4726:34:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4706:54:4"
											},
											{
												"assignments": [
													335
												],
												"declarations": [
													{
														"constant": false,
														"id": 335,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4775:12:4",
														"nodeType": "VariableDeclaration",
														"scope": 388,
														"src": "4770:17:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 334,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4770:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 348,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 338,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 336,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 322,
															"src": "4790:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 337,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4805:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4790:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 346,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 341,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4818:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$535",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$535",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 340,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4810:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 339,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4810:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 342,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4810:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 343,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4824:4:4",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4810:18:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4829:6:4",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4810:25:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4839:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4810:30:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4790:50:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4770:70:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 350,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4855:13:4",
														"subExpression": {
															"id": 349,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 327,
															"src": "4856:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 352,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4872:13:4",
														"subExpression": {
															"id": 351,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 335,
															"src": "4873:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4855:30:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 358,
												"nodeType": "IfStatement",
												"src": "4851:91:4",
												"trueBody": {
													"id": 357,
													"nodeType": "Block",
													"src": "4887:55:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 354,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 298,
																	"src": "4908:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4908:23:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 356,
															"nodeType": "RevertStatement",
															"src": "4901:30:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 363,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 359,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "4951:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 361,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4953:12:4",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 288,
														"src": "4951:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 362,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4968:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4951:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 364,
												"nodeType": "ExpressionStatement",
												"src": "4951:18:4"
											},
											{
												"condition": {
													"id": 365,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 316,
													"src": "4983:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 373,
												"nodeType": "IfStatement",
												"src": "4979:67:4",
												"trueBody": {
													"id": 372,
													"nodeType": "Block",
													"src": "4999:47:4",
													"statements": [
														{
															"expression": {
																"id": 370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 366,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 311,
																		"src": "5013:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 368,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5015:13:4",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 291,
																	"src": "5013:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5031:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5013:22:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 371,
															"nodeType": "ExpressionStatement",
															"src": "5013:22:4"
														}
													]
												}
											},
											{
												"id": 374,
												"nodeType": "PlaceholderStatement",
												"src": "5055:1:4"
											},
											{
												"condition": {
													"id": 375,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 316,
													"src": "5070:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 387,
												"nodeType": "IfStatement",
												"src": "5066:101:4",
												"trueBody": {
													"id": 386,
													"nodeType": "Block",
													"src": "5086:81:4",
													"statements": [
														{
															"expression": {
																"id": 380,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 376,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 311,
																		"src": "5100:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 378,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5102:13:4",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 291,
																	"src": "5100:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 379,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5118:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5100:23:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 381,
															"nodeType": "ExpressionStatement",
															"src": "5100:23:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 383,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5154:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 382,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "5142:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 384,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5142:14:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 385,
															"nodeType": "EmitStatement",
															"src": "5137:19:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 307,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:4",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 389,
									"name": "initializer",
									"nameLocation": "4078:11:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 308,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:4"
									},
									"src": "4069:1104:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 435,
										"nodeType": "Block",
										"src": "6291:392:4",
										"statements": [
											{
												"assignments": [
													396
												],
												"declarations": [
													{
														"constant": false,
														"id": 396,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6386:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 435,
														"src": "6357:30:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 395,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 394,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6357:20:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 292,
																"src": "6357:20:4"
															},
															"referencedDeclaration": 292,
															"src": "6357:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 399,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 397,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "6390:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$292_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 398,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6357:59:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 406,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 400,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "6431:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 401,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6433:13:4",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 291,
														"src": "6431:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 405,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 402,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 396,
																"src": "6450:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6452:12:4",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 288,
															"src": "6450:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 404,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 392,
															"src": "6468:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6450:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6431:44:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 411,
												"nodeType": "IfStatement",
												"src": "6427:105:4",
												"trueBody": {
													"id": 410,
													"nodeType": "Block",
													"src": "6477:55:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 407,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 298,
																	"src": "6498:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 408,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6498:23:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 409,
															"nodeType": "RevertStatement",
															"src": "6491:30:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 412,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "6541:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 414,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6543:12:4",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 288,
														"src": "6541:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 415,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 392,
														"src": "6558:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6541:24:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 417,
												"nodeType": "ExpressionStatement",
												"src": "6541:24:4"
											},
											{
												"expression": {
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 418,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "6575:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 420,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6577:13:4",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 291,
														"src": "6575:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 421,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6593:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6575:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 423,
												"nodeType": "ExpressionStatement",
												"src": "6575:22:4"
											},
											{
												"id": 424,
												"nodeType": "PlaceholderStatement",
												"src": "6607:1:4"
											},
											{
												"expression": {
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 425,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "6618:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 427,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6620:13:4",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 291,
														"src": "6618:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6636:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6618:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "6618:23:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 432,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 392,
															"src": "6668:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 431,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 306,
														"src": "6656:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6656:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 434,
												"nodeType": "EmitStatement",
												"src": "6651:25:4"
											}
										]
									},
									"documentation": {
										"id": 390,
										"nodeType": "StructuredDocumentation",
										"src": "5179:1068:4",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 436,
									"name": "reinitializer",
									"nameLocation": "6261:13:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6282:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "6275:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 391,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6275:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6274:16:4"
									},
									"src": "6252:431:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 443,
										"nodeType": "Block",
										"src": "6921:48:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 439,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 457,
														"src": "6931:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6931:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 441,
												"nodeType": "ExpressionStatement",
												"src": "6931:20:4"
											},
											{
												"id": 442,
												"nodeType": "PlaceholderStatement",
												"src": "6961:1:4"
											}
										]
									},
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "6689:199:4",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 444,
									"name": "onlyInitializing",
									"nameLocation": "6902:16:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6918:2:4"
									},
									"src": "6893:76:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 456,
										"nodeType": "Block",
										"src": "7136:89:4",
										"statements": [
											{
												"condition": {
													"id": 450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7150:18:4",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 448,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 525,
															"src": "7151:15:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 449,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7151:17:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 455,
												"nodeType": "IfStatement",
												"src": "7146:73:4",
												"trueBody": {
													"id": 454,
													"nodeType": "Block",
													"src": "7170:49:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 451,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "7191:15:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 452,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7191:17:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 453,
															"nodeType": "RevertStatement",
															"src": "7184:24:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "6975:104:4",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 457,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7093:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7111:2:4"
									},
									"returnParameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7136:0:4"
									},
									"scope": 535,
									"src": "7084:141:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 502,
										"nodeType": "Block",
										"src": "7760:373:4",
										"statements": [
											{
												"assignments": [
													463
												],
												"declarations": [
													{
														"constant": false,
														"id": 463,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7855:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 502,
														"src": "7826:30:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 462,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 461,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7826:20:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 292,
																"src": "7826:20:4"
															},
															"referencedDeclaration": 292,
															"src": "7826:20:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 466,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 464,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "7859:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$292_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 465,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7859:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7826:59:4"
											},
											{
												"condition": {
													"expression": {
														"id": 467,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 463,
														"src": "7900:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 468,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7902:13:4",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 291,
													"src": "7900:15:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 473,
												"nodeType": "IfStatement",
												"src": "7896:76:4",
												"trueBody": {
													"id": 472,
													"nodeType": "Block",
													"src": "7917:55:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 469,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 298,
																	"src": "7938:21:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 470,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7938:23:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 471,
															"nodeType": "RevertStatement",
															"src": "7931:30:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 474,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "7985:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 475,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7987:12:4",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 288,
														"src": "7985:14:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 478,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8008:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 477,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8008:6:4",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 476,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8003:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 479,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8003:12:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 480,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8016:3:4",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8003:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7985:34:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 501,
												"nodeType": "IfStatement",
												"src": "7981:146:4",
												"trueBody": {
													"id": 500,
													"nodeType": "Block",
													"src": "8021:106:4",
													"statements": [
														{
															"expression": {
																"id": 490,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 482,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 463,
																		"src": "8035:1:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 484,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8037:12:4",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 288,
																	"src": "8035:14:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 487,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8057:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 486,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8057:6:4",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 485,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8052:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 488,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8052:12:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 489,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8065:3:4",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8052:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8035:33:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 491,
															"nodeType": "ExpressionStatement",
															"src": "8035:33:4"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 495,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8104:6:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 494,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8104:6:4",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 493,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8099:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 496,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8099:12:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 497,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8112:3:4",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8099:16:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 492,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 306,
																	"src": "8087:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 498,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8087:29:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 499,
															"nodeType": "EmitStatement",
															"src": "8082:34:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 458,
										"nodeType": "StructuredDocumentation",
										"src": "7231:475:4",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 503,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7720:20:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7740:2:4"
									},
									"returnParameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7760:0:4"
									},
									"scope": 535,
									"src": "7711:422:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 513,
										"nodeType": "Block",
										"src": "8308:63:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 509,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "8325:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$292_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 510,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8325:26:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 511,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8352:12:4",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 288,
													"src": "8325:39:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 508,
												"id": 512,
												"nodeType": "Return",
												"src": "8318:46:4"
											}
										]
									},
									"documentation": {
										"id": 504,
										"nodeType": "StructuredDocumentation",
										"src": "8139:99:4",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 514,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8252:22:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8274:2:4"
									},
									"returnParameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 514,
												"src": "8300:6:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 506,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8300:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8299:8:4"
									},
									"scope": 535,
									"src": "8243:128:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 524,
										"nodeType": "Block",
										"src": "8543:64:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 520,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "8560:24:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$292_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8560:26:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 522,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8587:13:4",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 291,
													"src": "8560:40:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 519,
												"id": 523,
												"nodeType": "Return",
												"src": "8553:47:4"
											}
										]
									},
									"documentation": {
										"id": 515,
										"nodeType": "StructuredDocumentation",
										"src": "8377:105:4",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8496:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8511:2:4"
									},
									"returnParameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 525,
												"src": "8537:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 517,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8537:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8536:6:4"
									},
									"scope": 535,
									"src": "8487:120:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 533,
										"nodeType": "Block",
										"src": "8827:80:4",
										"statements": [
											{
												"AST": {
													"nativeSrc": "8846:55:4",
													"nodeType": "YulBlock",
													"src": "8846:55:4",
													"statements": [
														{
															"nativeSrc": "8860:31:4",
															"nodeType": "YulAssignment",
															"src": "8860:31:4",
															"value": {
																"name": "INITIALIZABLE_STORAGE",
																"nativeSrc": "8870:21:4",
																"nodeType": "YulIdentifier",
																"src": "8870:21:4"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "8860:6:4",
																	"nodeType": "YulIdentifier",
																	"src": "8860:6:4"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 530,
														"isOffset": false,
														"isSlot": true,
														"src": "8860:6:4",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 295,
														"isOffset": false,
														"isSlot": false,
														"src": "8870:21:4",
														"valueSize": 1
													}
												],
												"id": 532,
												"nodeType": "InlineAssembly",
												"src": "8837:64:4"
											}
										]
									},
									"documentation": {
										"id": 526,
										"nodeType": "StructuredDocumentation",
										"src": "8613:67:4",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 534,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "8746:24:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 527,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8770:2:4"
									},
									"returnParameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "8824:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 534,
												"src": "8795:30:4",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 529,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 528,
														"name": "InitializableStorage",
														"nameLocations": [
															"8795:20:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 292,
														"src": "8795:20:4"
													},
													"referencedDeclaration": 292,
													"src": "8795:20:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$292_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8794:32:4"
									},
									"scope": 535,
									"src": "8737:170:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 536,
							"src": "2349:6560:4",
							"usedErrors": [
								298,
								301
							],
							"usedEvents": [
								306
							]
						}
					],
					"src": "113:8797:4"
				},
				"id": 4
			},
			"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1198
						],
						"ERC20Upgradeable": [
							1152
						],
						"IERC20": [
							214
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							240
						],
						"Initializable": [
							535
						]
					},
					"id": 1153,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 537,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 539,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1153,
							"sourceUnit": 215,
							"src": "131:70:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 538,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 214,
										"src": "139:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"id": 541,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1153,
							"sourceUnit": 241,
							"src": "202:97:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 540,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 240,
										"src": "210:14:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 543,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1153,
							"sourceUnit": 1199,
							"src": "300:70:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 542,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1198,
										"src": "308:18:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"id": 545,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1153,
							"sourceUnit": 137,
							"src": "371:83:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 544,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 41,
										"src": "379:12:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 547,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1153,
							"sourceUnit": 536,
							"src": "455:66:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 546,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 535,
										"src": "463:13:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 549,
										"name": "Initializable",
										"nameLocations": [
											"1614:13:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 535,
										"src": "1614:13:5"
									},
									"id": 550,
									"nodeType": "InheritanceSpecifier",
									"src": "1614:13:5"
								},
								{
									"baseName": {
										"id": 551,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"1629:18:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1198,
										"src": "1629:18:5"
									},
									"id": 552,
									"nodeType": "InheritanceSpecifier",
									"src": "1629:18:5"
								},
								{
									"baseName": {
										"id": 553,
										"name": "IERC20",
										"nameLocations": [
											"1649:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 214,
										"src": "1649:6:5"
									},
									"id": 554,
									"nodeType": "InheritanceSpecifier",
									"src": "1649:6:5"
								},
								{
									"baseName": {
										"id": 555,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1657:14:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 240,
										"src": "1657:14:5"
									},
									"id": 556,
									"nodeType": "InheritanceSpecifier",
									"src": "1657:14:5"
								},
								{
									"baseName": {
										"id": 557,
										"name": "IERC20Errors",
										"nameLocations": [
											"1673:12:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 41,
										"src": "1673:12:5"
									},
									"id": 558,
									"nodeType": "InheritanceSpecifier",
									"src": "1673:12:5"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 548,
								"nodeType": "StructuredDocumentation",
								"src": "523:1052:5",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 1152,
							"linearizedBaseContracts": [
								1152,
								41,
								240,
								214,
								1198,
								535
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1594:16:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ERC20Upgradeable.ERC20Storage",
									"documentation": {
										"id": 559,
										"nodeType": "StructuredDocumentation",
										"src": "1692:63:5",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.ERC20"
									},
									"id": 576,
									"members": [
										{
											"constant": false,
											"id": 563,
											"mutability": "mutable",
											"name": "_balances",
											"nameLocation": "1826:9:5",
											"nodeType": "VariableDeclaration",
											"scope": 576,
											"src": "1790:45:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"typeName": {
												"id": 562,
												"keyName": "account",
												"keyNameLocation": "1806:7:5",
												"keyType": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1798:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1790:35:5",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
													"typeString": "mapping(address => uint256)"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1817:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 569,
											"mutability": "mutable",
											"name": "_allowances",
											"nameLocation": "1910:11:5",
											"nodeType": "VariableDeclaration",
											"scope": 576,
											"src": "1846:75:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
												"typeString": "mapping(address => mapping(address => uint256))"
											},
											"typeName": {
												"id": 568,
												"keyName": "account",
												"keyNameLocation": "1862:7:5",
												"keyType": {
													"id": 564,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1854:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "Mapping",
												"src": "1846:63:5",
												"typeDescriptions": {
													"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
													"typeString": "mapping(address => mapping(address => uint256))"
												},
												"valueName": "",
												"valueNameLocation": "-1:-1:-1",
												"valueType": {
													"id": 567,
													"keyName": "spender",
													"keyNameLocation": "1889:7:5",
													"keyType": {
														"id": 565,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1881:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Mapping",
													"src": "1873:35:5",
													"typeDescriptions": {
														"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
														"typeString": "mapping(address => uint256)"
													},
													"valueName": "",
													"valueNameLocation": "-1:-1:-1",
													"valueType": {
														"id": 566,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1900:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													}
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 571,
											"mutability": "mutable",
											"name": "_totalSupply",
											"nameLocation": "1940:12:5",
											"nodeType": "VariableDeclaration",
											"scope": 576,
											"src": "1932:20:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 570,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1932:7:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 573,
											"mutability": "mutable",
											"name": "_name",
											"nameLocation": "1970:5:5",
											"nodeType": "VariableDeclaration",
											"scope": 576,
											"src": "1963:12:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 572,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1963:6:5",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 575,
											"mutability": "mutable",
											"name": "_symbol",
											"nameLocation": "1992:7:5",
											"nodeType": "VariableDeclaration",
											"scope": 576,
											"src": "1985:14:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 574,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1985:6:5",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ERC20Storage",
									"nameLocation": "1767:12:5",
									"nodeType": "StructDefinition",
									"scope": 1152,
									"src": "1760:246:5",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 579,
									"mutability": "constant",
									"name": "ERC20StorageLocation",
									"nameLocation": "2146:20:5",
									"nodeType": "VariableDeclaration",
									"scope": 1152,
									"src": "2121:114:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 577,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2121:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307835326336333234376531663437646231396435636530343630303330633439376630363763613463656266373162613938656561646162653230626163653030",
										"id": 578,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2169:66:5",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_37439836327923360225337895871394760624280537466773280374265222508165906222592_by_1",
											"typeString": "int_const 3743...(69 digits omitted)...2592"
										},
										"value": "0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 586,
										"nodeType": "Block",
										"src": "2316:79:5",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2335:54:5",
													"nodeType": "YulBlock",
													"src": "2335:54:5",
													"statements": [
														{
															"nativeSrc": "2349:30:5",
															"nodeType": "YulAssignment",
															"src": "2349:30:5",
															"value": {
																"name": "ERC20StorageLocation",
																"nativeSrc": "2359:20:5",
																"nodeType": "YulIdentifier",
																"src": "2359:20:5"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "2349:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "2349:6:5"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 583,
														"isOffset": false,
														"isSlot": true,
														"src": "2349:6:5",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 579,
														"isOffset": false,
														"isSlot": false,
														"src": "2359:20:5",
														"valueSize": 1
													}
												],
												"id": 585,
												"nodeType": "InlineAssembly",
												"src": "2326:63:5"
											}
										]
									},
									"id": 587,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getERC20Storage",
									"nameLocation": "2251:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2267:2:5"
									},
									"returnParameters": {
										"id": 584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "2313:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 587,
												"src": "2292:22:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
													"typeString": "struct ERC20Upgradeable.ERC20Storage"
												},
												"typeName": {
													"id": 582,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 581,
														"name": "ERC20Storage",
														"nameLocations": [
															"2292:12:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 576,
														"src": "2292:12:5"
													},
													"referencedDeclaration": 576,
													"src": "2292:12:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2291:24:5"
									},
									"scope": 1152,
									"src": "2242:153:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 602,
										"nodeType": "Block",
										"src": "2669:55:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 598,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "2702:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 599,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 592,
															"src": "2709:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 597,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "2679:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2679:38:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 601,
												"nodeType": "ExpressionStatement",
												"src": "2679:38:5"
											}
										]
									},
									"documentation": {
										"id": 588,
										"nodeType": "StructuredDocumentation",
										"src": "2401:171:5",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 603,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 595,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 594,
												"name": "onlyInitializing",
												"nameLocations": [
													"2652:16:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 444,
												"src": "2652:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2652:16:5"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2586:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2613:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 603,
												"src": "2599:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 589,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2599:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2634:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 603,
												"src": "2620:21:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 591,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2620:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2598:44:5"
									},
									"returnParameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2669:0:5"
									},
									"scope": 1152,
									"src": "2577:147:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 630,
										"nodeType": "Block",
										"src": "2832:114:5",
										"statements": [
											{
												"assignments": [
													614
												],
												"declarations": [
													{
														"constant": false,
														"id": 614,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2863:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 630,
														"src": "2842:22:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 613,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 612,
																"name": "ERC20Storage",
																"nameLocations": [
																	"2842:12:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 576,
																"src": "2842:12:5"
															},
															"referencedDeclaration": 576,
															"src": "2842:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 617,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 615,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 587,
														"src": "2867:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$576_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2867:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2842:43:5"
											},
											{
												"expression": {
													"id": 622,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 618,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 614,
															"src": "2895:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 620,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2897:5:5",
														"memberName": "_name",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 573,
														"src": "2895:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 621,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 605,
														"src": "2905:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2895:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 623,
												"nodeType": "ExpressionStatement",
												"src": "2895:15:5"
											},
											{
												"expression": {
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 624,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 614,
															"src": "2920:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 626,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "2922:7:5",
														"memberName": "_symbol",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 575,
														"src": "2920:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 627,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 607,
														"src": "2932:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2920:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 629,
												"nodeType": "ExpressionStatement",
												"src": "2920:19:5"
											}
										]
									},
									"id": 631,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 610,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 609,
												"name": "onlyInitializing",
												"nameLocations": [
													"2815:16:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 444,
												"src": "2815:16:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "2815:16:5"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2739:22:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2776:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "2762:19:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 604,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2762:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2797:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "2783:21:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 606,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2783:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2761:44:5"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2832:0:5"
									},
									"scope": 1152,
									"src": "2730:216:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										227
									],
									"body": {
										"id": 646,
										"nodeType": "Block",
										"src": "3071:84:5",
										"statements": [
											{
												"assignments": [
													639
												],
												"declarations": [
													{
														"constant": false,
														"id": 639,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3102:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 646,
														"src": "3081:22:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 638,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 637,
																"name": "ERC20Storage",
																"nameLocations": [
																	"3081:12:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 576,
																"src": "3081:12:5"
															},
															"referencedDeclaration": 576,
															"src": "3081:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 642,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 640,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 587,
														"src": "3106:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$576_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3106:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3081:43:5"
											},
											{
												"expression": {
													"expression": {
														"id": 643,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "3141:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 644,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3143:5:5",
													"memberName": "_name",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 573,
													"src": "3141:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 636,
												"id": 645,
												"nodeType": "Return",
												"src": "3134:14:5"
											}
										]
									},
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "2952:54:5",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 647,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "3020:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3024:2:5"
									},
									"returnParameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "3056:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 634,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3056:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3055:15:5"
									},
									"scope": 1152,
									"src": "3011:144:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										233
									],
									"body": {
										"id": 662,
										"nodeType": "Block",
										"src": "3330:86:5",
										"statements": [
											{
												"assignments": [
													655
												],
												"declarations": [
													{
														"constant": false,
														"id": 655,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3361:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 662,
														"src": "3340:22:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 654,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 653,
																"name": "ERC20Storage",
																"nameLocations": [
																	"3340:12:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 576,
																"src": "3340:12:5"
															},
															"referencedDeclaration": 576,
															"src": "3340:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 658,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 656,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 587,
														"src": "3365:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$576_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3365:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3340:43:5"
											},
											{
												"expression": {
													"expression": {
														"id": 659,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 655,
														"src": "3400:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 660,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3402:7:5",
													"memberName": "_symbol",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 575,
													"src": "3400:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 652,
												"id": 661,
												"nodeType": "Return",
												"src": "3393:16:5"
											}
										]
									},
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "3161:102:5",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 663,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3277:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3283:2:5"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "3315:13:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 650,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3315:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3314:15:5"
									},
									"scope": 1152,
									"src": "3268:148:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										239
									],
									"body": {
										"id": 671,
										"nodeType": "Block",
										"src": "4105:26:5",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 669,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4122:2:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 668,
												"id": 670,
												"nodeType": "Return",
												"src": "4115:9:5"
											}
										]
									},
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "3422:622:5",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "4058:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4066:2:5"
									},
									"returnParameters": {
										"id": 668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "4098:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 666,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4098:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4097:7:5"
									},
									"scope": 1152,
									"src": "4049:82:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										163
									],
									"body": {
										"id": 687,
										"nodeType": "Block",
										"src": "4252:91:5",
										"statements": [
											{
												"assignments": [
													680
												],
												"declarations": [
													{
														"constant": false,
														"id": 680,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4283:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 687,
														"src": "4262:22:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 679,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 678,
																"name": "ERC20Storage",
																"nameLocations": [
																	"4262:12:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 576,
																"src": "4262:12:5"
															},
															"referencedDeclaration": 576,
															"src": "4262:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 683,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 681,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 587,
														"src": "4287:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$576_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4287:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4262:43:5"
											},
											{
												"expression": {
													"expression": {
														"id": 684,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 680,
														"src": "4322:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
														}
													},
													"id": 685,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4324:12:5",
													"memberName": "_totalSupply",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 571,
													"src": "4322:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 677,
												"id": 686,
												"nodeType": "Return",
												"src": "4315:21:5"
											}
										]
									},
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "4137:49:5",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "4200:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4211:2:5"
									},
									"returnParameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 688,
												"src": "4243:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4243:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4242:9:5"
									},
									"scope": 1152,
									"src": "4191:152:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										171
									],
									"body": {
										"id": 707,
										"nodeType": "Block",
										"src": "4475:97:5",
										"statements": [
											{
												"assignments": [
													698
												],
												"declarations": [
													{
														"constant": false,
														"id": 698,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4506:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 707,
														"src": "4485:22:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 697,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 696,
																"name": "ERC20Storage",
																"nameLocations": [
																	"4485:12:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 576,
																"src": "4485:12:5"
															},
															"referencedDeclaration": 576,
															"src": "4485:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 701,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 699,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 587,
														"src": "4510:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$576_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 700,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4510:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4485:43:5"
											},
											{
												"expression": {
													"baseExpression": {
														"expression": {
															"id": 702,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 698,
															"src": "4545:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
															}
														},
														"id": 703,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4547:9:5",
														"memberName": "_balances",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 563,
														"src": "4545:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 705,
													"indexExpression": {
														"id": 704,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 691,
														"src": "4557:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4545:20:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 695,
												"id": 706,
												"nodeType": "Return",
												"src": "4538:27:5"
											}
										]
									},
									"documentation": {
										"id": 689,
										"nodeType": "StructuredDocumentation",
										"src": "4349:47:5",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 708,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "4410:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "4428:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 708,
												"src": "4420:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 690,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4420:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4419:17:5"
									},
									"returnParameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 708,
												"src": "4466:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4466:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4465:9:5"
									},
									"scope": 1152,
									"src": "4401:171:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										181
									],
									"body": {
										"id": 731,
										"nodeType": "Block",
										"src": "4842:103:5",
										"statements": [
											{
												"assignments": [
													719
												],
												"declarations": [
													{
														"constant": false,
														"id": 719,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4860:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 731,
														"src": "4852:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 718,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4852:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 722,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 720,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1180,
														"src": "4868:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4868:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4852:28:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 724,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 719,
															"src": "4900:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 725,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "4907:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 726,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 713,
															"src": "4911:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 723,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 859,
														"src": "4890:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 727,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4890:27:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 728,
												"nodeType": "ExpressionStatement",
												"src": "4890:27:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4934:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 717,
												"id": 730,
												"nodeType": "Return",
												"src": "4927:11:5"
											}
										]
									},
									"documentation": {
										"id": 709,
										"nodeType": "StructuredDocumentation",
										"src": "4578:184:5",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 732,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4776:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4793:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "4785:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 710,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4805:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "4797:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 712,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4797:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4784:27:5"
									},
									"returnParameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 732,
												"src": "4836:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 715,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4836:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4835:6:5"
									},
									"scope": 1152,
									"src": "4767:178:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										191
									],
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "5092:106:5",
										"statements": [
											{
												"assignments": [
													744
												],
												"declarations": [
													{
														"constant": false,
														"id": 744,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "5123:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 755,
														"src": "5102:22:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 743,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 742,
																"name": "ERC20Storage",
																"nameLocations": [
																	"5102:12:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 576,
																"src": "5102:12:5"
															},
															"referencedDeclaration": 576,
															"src": "5102:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 747,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 745,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 587,
														"src": "5127:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$576_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5127:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5102:43:5"
											},
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"expression": {
																"id": 748,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 744,
																"src": "5162:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																	"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																}
															},
															"id": 749,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5164:11:5",
															"memberName": "_allowances",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 569,
															"src": "5162:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 751,
														"indexExpression": {
															"id": 750,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 735,
															"src": "5176:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5162:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 753,
													"indexExpression": {
														"id": 752,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 737,
														"src": "5183:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5162:29:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 741,
												"id": 754,
												"nodeType": "Return",
												"src": "5155:36:5"
											}
										]
									},
									"documentation": {
										"id": 733,
										"nodeType": "StructuredDocumentation",
										"src": "4951:47:5",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "5012:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 735,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5030:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "5022:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 734,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5022:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5045:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "5037:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 736,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5037:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5021:32:5"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "5083:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 739,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5083:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5082:9:5"
									},
									"scope": 1152,
									"src": "5003:195:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										201
									],
									"body": {
										"id": 779,
										"nodeType": "Block",
										"src": "5584:107:5",
										"statements": [
											{
												"assignments": [
													767
												],
												"declarations": [
													{
														"constant": false,
														"id": 767,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5602:5:5",
														"nodeType": "VariableDeclaration",
														"scope": 779,
														"src": "5594:13:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 766,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5594:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 770,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 768,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1180,
														"src": "5610:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5610:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5594:28:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 772,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "5641:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 773,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "5648:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 774,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 761,
															"src": "5657:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 771,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1035,
															1103
														],
														"referencedDeclaration": 1035,
														"src": "5632:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5632:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 776,
												"nodeType": "ExpressionStatement",
												"src": "5632:31:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 777,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5680:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 765,
												"id": 778,
												"nodeType": "Return",
												"src": "5673:11:5"
											}
										]
									},
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "5204:296:5",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 780,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "5514:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5530:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "5522:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 758,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5522:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5547:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "5539:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 760,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5539:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5521:32:5"
									},
									"returnParameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "5578:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 763,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5578:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5577:6:5"
									},
									"scope": 1152,
									"src": "5505:186:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										213
									],
									"body": {
										"id": 811,
										"nodeType": "Block",
										"src": "6344:151:5",
										"statements": [
											{
												"assignments": [
													793
												],
												"declarations": [
													{
														"constant": false,
														"id": 793,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "6362:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 811,
														"src": "6354:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 792,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6354:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 796,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 794,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1180,
														"src": "6372:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6372:12:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6354:30:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 798,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "6410:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 799,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "6416:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 800,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "6425:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 797,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1151,
														"src": "6394:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6394:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 802,
												"nodeType": "ExpressionStatement",
												"src": "6394:37:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 804,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "6451:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 805,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "6457:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 806,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "6461:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 803,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 859,
														"src": "6441:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 807,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6441:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 808,
												"nodeType": "ExpressionStatement",
												"src": "6441:26:5"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 809,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6484:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 791,
												"id": 810,
												"nodeType": "Return",
												"src": "6477:11:5"
											}
										]
									},
									"documentation": {
										"id": 781,
										"nodeType": "StructuredDocumentation",
										"src": "5697:549:5",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 812,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6260:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6281:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "6273:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6273:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6295:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "6287:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6287:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6307:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "6299:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6299:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6272:41:5"
									},
									"returnParameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 812,
												"src": "6338:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 789,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6338:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6337:6:5"
									},
									"scope": 1152,
									"src": "6251:244:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 858,
										"nodeType": "Block",
										"src": "6937:231:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 822,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 815,
														"src": "6951:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 825,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6967:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 824,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6959:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 823,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6959:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 826,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6959:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6951:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 836,
												"nodeType": "IfStatement",
												"src": "6947:86:5",
												"trueBody": {
													"id": 835,
													"nodeType": "Block",
													"src": "6971:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 831,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7019:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 830,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7011:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 829,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7011:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 832,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7011:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 828,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "6992:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 833,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6992:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 834,
															"nodeType": "RevertStatement",
															"src": "6985:37:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 842,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 837,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 817,
														"src": "7046:2:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 840,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7060:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 839,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7052:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 838,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7052:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 841,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7052:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7046:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 851,
												"nodeType": "IfStatement",
												"src": "7042:86:5",
												"trueBody": {
													"id": 850,
													"nodeType": "Block",
													"src": "7064:64:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 846,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7114:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 845,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7106:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 844,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7106:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 847,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7106:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 843,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "7085:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 848,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7085:32:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 849,
															"nodeType": "RevertStatement",
															"src": "7078:39:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 853,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 815,
															"src": "7145:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 854,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 817,
															"src": "7151:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 855,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 819,
															"src": "7155:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 852,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 951,
														"src": "7137:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 856,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7137:24:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 857,
												"nodeType": "ExpressionStatement",
												"src": "7137:24:5"
											}
										]
									},
									"documentation": {
										"id": 813,
										"nodeType": "StructuredDocumentation",
										"src": "6501:362:5",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 859,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "6877:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 820,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 815,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6895:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "6887:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 814,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6887:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6909:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "6901:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 816,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6901:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6921:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "6913:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 818,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6913:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6886:41:5"
									},
									"returnParameters": {
										"id": 821,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6937:0:5"
									},
									"scope": 1152,
									"src": "6868:300:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 950,
										"nodeType": "Block",
										"src": "7558:1095:5",
										"statements": [
											{
												"assignments": [
													871
												],
												"declarations": [
													{
														"constant": false,
														"id": 871,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7589:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 950,
														"src": "7568:22:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 870,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 869,
																"name": "ERC20Storage",
																"nameLocations": [
																	"7568:12:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 576,
																"src": "7568:12:5"
															},
															"referencedDeclaration": 576,
															"src": "7568:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 874,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 872,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 587,
														"src": "7593:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$576_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 873,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7593:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7568:43:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 880,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 875,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 862,
														"src": "7625:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 878,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7641:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 877,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7633:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 876,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7633:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 879,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7633:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7625:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 917,
													"nodeType": "Block",
													"src": "7801:366:5",
													"statements": [
														{
															"assignments": [
																889
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 889,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "7823:11:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 917,
																	"src": "7815:19:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 888,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7815:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 894,
															"initialValue": {
																"baseExpression": {
																	"expression": {
																		"id": 890,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 871,
																		"src": "7837:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																			"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																		}
																	},
																	"id": 891,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7839:9:5",
																	"memberName": "_balances",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 563,
																	"src": "7837:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 893,
																"indexExpression": {
																	"id": 892,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 862,
																	"src": "7849:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "7837:17:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7815:39:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 897,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 895,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 889,
																	"src": "7872:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 896,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 866,
																	"src": "7886:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7872:19:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 905,
															"nodeType": "IfStatement",
															"src": "7868:115:5",
															"trueBody": {
																"id": 904,
																"nodeType": "Block",
																"src": "7893:90:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 899,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 862,
																					"src": "7943:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 900,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 889,
																					"src": "7949:11:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 901,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 866,
																					"src": "7962:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 898,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 11,
																				"src": "7918:24:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 902,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7918:50:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 903,
																		"nodeType": "RevertStatement",
																		"src": "7911:57:5"
																	}
																]
															}
														},
														{
															"id": 916,
															"nodeType": "UncheckedBlock",
															"src": "7996:161:5",
															"statements": [
																{
																	"expression": {
																		"id": 914,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 906,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 871,
																					"src": "8103:1:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																						"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																					}
																				},
																				"id": 909,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "8105:9:5",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 563,
																				"src": "8103:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 910,
																			"indexExpression": {
																				"id": 908,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 862,
																				"src": "8115:4:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "8103:17:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 913,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 911,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 889,
																				"src": "8123:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 912,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 866,
																				"src": "8137:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "8123:19:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8103:39:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 915,
																	"nodeType": "ExpressionStatement",
																	"src": "8103:39:5"
																}
															]
														}
													]
												},
												"id": 918,
												"nodeType": "IfStatement",
												"src": "7621:546:5",
												"trueBody": {
													"id": 887,
													"nodeType": "Block",
													"src": "7645:150:5",
													"statements": [
														{
															"expression": {
																"id": 885,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 881,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 871,
																		"src": "7761:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																			"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																		}
																	},
																	"id": 883,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "7763:12:5",
																	"memberName": "_totalSupply",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 571,
																	"src": "7761:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 884,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 866,
																	"src": "7779:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7761:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 886,
															"nodeType": "ExpressionStatement",
															"src": "7761:23:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 919,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 864,
														"src": "8181:2:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 922,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8195:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 921,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8187:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 920,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8187:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 923,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8187:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8181:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 942,
													"nodeType": "Block",
													"src": "8398:208:5",
													"statements": [
														{
															"id": 941,
															"nodeType": "UncheckedBlock",
															"src": "8412:184:5",
															"statements": [
																{
																	"expression": {
																		"id": 939,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"expression": {
																					"id": 933,
																					"name": "$",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 871,
																					"src": "8557:1:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																						"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																					}
																				},
																				"id": 936,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "8559:9:5",
																				"memberName": "_balances",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 563,
																				"src": "8557:11:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 937,
																			"indexExpression": {
																				"id": 935,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 864,
																				"src": "8569:2:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "8557:15:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 938,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 866,
																			"src": "8576:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8557:24:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 940,
																	"nodeType": "ExpressionStatement",
																	"src": "8557:24:5"
																}
															]
														}
													]
												},
												"id": 943,
												"nodeType": "IfStatement",
												"src": "8177:429:5",
												"trueBody": {
													"id": 932,
													"nodeType": "Block",
													"src": "8199:193:5",
													"statements": [
														{
															"id": 931,
															"nodeType": "UncheckedBlock",
															"src": "8213:169:5",
															"statements": [
																{
																	"expression": {
																		"id": 929,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"expression": {
																				"id": 925,
																				"name": "$",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 871,
																				"src": "8344:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																					"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																				}
																			},
																			"id": 927,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"memberLocation": "8346:12:5",
																			"memberName": "_totalSupply",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 571,
																			"src": "8344:14:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 928,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 866,
																			"src": "8362:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "8344:23:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 930,
																	"nodeType": "ExpressionStatement",
																	"src": "8344:23:5"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 945,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 862,
															"src": "8630:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 946,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 864,
															"src": "8636:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 947,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 866,
															"src": "8640:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 944,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 148,
														"src": "8621:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8621:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 949,
												"nodeType": "EmitStatement",
												"src": "8616:30:5"
											}
										]
									},
									"documentation": {
										"id": 860,
										"nodeType": "StructuredDocumentation",
										"src": "7174:304:5",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 951,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "7492:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 867,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7508:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "7500:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7500:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7522:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "7514:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 863,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7514:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 866,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7534:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "7526:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 865,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7526:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7499:41:5"
									},
									"returnParameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7558:0:5"
									},
									"scope": 1152,
									"src": "7483:1170:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 983,
										"nodeType": "Block",
										"src": "9052:152:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 959,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 954,
														"src": "9066:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 962,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9085:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 961,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9077:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 960,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9077:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 963,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9077:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9066:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 973,
												"nodeType": "IfStatement",
												"src": "9062:91:5",
												"trueBody": {
													"id": 972,
													"nodeType": "Block",
													"src": "9089:64:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 968,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9139:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 967,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9131:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 966,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9131:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 969,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9131:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 965,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "9110:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 970,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9110:32:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 971,
															"nodeType": "RevertStatement",
															"src": "9103:39:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 977,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9178:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 976,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9170:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 975,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9170:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 978,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9170:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 979,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 954,
															"src": "9182:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 980,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 956,
															"src": "9191:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 974,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 951,
														"src": "9162:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 981,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9162:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 982,
												"nodeType": "ExpressionStatement",
												"src": "9162:35:5"
											}
										]
									},
									"documentation": {
										"id": 952,
										"nodeType": "StructuredDocumentation",
										"src": "8659:332:5",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 984,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9005:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9019:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "9011:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 953,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9011:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9036:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "9028:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 955,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9028:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9010:32:5"
									},
									"returnParameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9052:0:5"
									},
									"scope": 1152,
									"src": "8996:208:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1016,
										"nodeType": "Block",
										"src": "9578:150:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 992,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 987,
														"src": "9592:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 995,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9611:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 994,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9603:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 993,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9603:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 996,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9603:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9592:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1006,
												"nodeType": "IfStatement",
												"src": "9588:89:5",
												"trueBody": {
													"id": 1005,
													"nodeType": "Block",
													"src": "9615:62:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1001,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9663:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1000,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9655:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 999,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9655:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1002,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9655:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 998,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "9636:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1003,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9636:30:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1004,
															"nodeType": "RevertStatement",
															"src": "9629:37:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1008,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 987,
															"src": "9694:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9711:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1010,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9703:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1009,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9703:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1012,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9703:10:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1013,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 989,
															"src": "9715:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1007,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 951,
														"src": "9686:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9686:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1015,
												"nodeType": "ExpressionStatement",
												"src": "9686:35:5"
											}
										]
									},
									"documentation": {
										"id": 985,
										"nodeType": "StructuredDocumentation",
										"src": "9210:307:5",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 1017,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9531:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9545:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "9537:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 986,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9537:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9562:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1017,
												"src": "9554:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 988,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9554:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9536:32:5"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9578:0:5"
									},
									"scope": 1152,
									"src": "9522:206:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1034,
										"nodeType": "Block",
										"src": "10338:54:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1028,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1020,
															"src": "10357:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1029,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1022,
															"src": "10364:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1030,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1024,
															"src": "10373:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1031,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10380:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1027,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1035,
															1103
														],
														"referencedDeclaration": 1103,
														"src": "10348:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 1032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10348:37:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1033,
												"nodeType": "ExpressionStatement",
												"src": "10348:37:5"
											}
										]
									},
									"documentation": {
										"id": 1018,
										"nodeType": "StructuredDocumentation",
										"src": "9734:525:5",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 1035,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10273:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1020,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10290:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "10282:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1019,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10282:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10305:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "10297:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1021,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10297:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10322:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1035,
												"src": "10314:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1023,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10314:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10281:47:5"
									},
									"returnParameters": {
										"id": 1026,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10338:0:5"
									},
									"scope": 1152,
									"src": "10264:128:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1102,
										"nodeType": "Block",
										"src": "11322:389:5",
										"statements": [
											{
												"assignments": [
													1049
												],
												"declarations": [
													{
														"constant": false,
														"id": 1049,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "11353:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 1102,
														"src": "11332:22:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
															"typeString": "struct ERC20Upgradeable.ERC20Storage"
														},
														"typeName": {
															"id": 1048,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1047,
																"name": "ERC20Storage",
																"nameLocations": [
																	"11332:12:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 576,
																"src": "11332:12:5"
															},
															"referencedDeclaration": 576,
															"src": "11332:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																"typeString": "struct ERC20Upgradeable.ERC20Storage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1052,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1050,
														"name": "_getERC20Storage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 587,
														"src": "11357:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_ERC20Storage_$576_storage_ptr_$",
															"typeString": "function () pure returns (struct ERC20Upgradeable.ERC20Storage storage pointer)"
														}
													},
													"id": 1051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11357:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
														"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11332:43:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1053,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1038,
														"src": "11389:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1056,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11406:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1055,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11398:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1054,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11398:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1057,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11398:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11389:19:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1067,
												"nodeType": "IfStatement",
												"src": "11385:89:5",
												"trueBody": {
													"id": 1066,
													"nodeType": "Block",
													"src": "11410:64:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1062,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11460:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1061,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11452:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1060,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11452:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1063,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11452:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1059,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "11431:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1064,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11431:32:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1065,
															"nodeType": "RevertStatement",
															"src": "11424:39:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1073,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1068,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "11487:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1071,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11506:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1070,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11498:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1069,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11498:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 1072,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11498:10:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11487:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1082,
												"nodeType": "IfStatement",
												"src": "11483:90:5",
												"trueBody": {
													"id": 1081,
													"nodeType": "Block",
													"src": "11510:63:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1077,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11559:1:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1076,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "11551:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1075,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "11551:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1078,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11551:10:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1074,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "11531:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1079,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11531:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1080,
															"nodeType": "RevertStatement",
															"src": "11524:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"expression": {
																	"id": 1083,
																	"name": "$",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1049,
																	"src": "11582:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ERC20Storage_$576_storage_ptr",
																		"typeString": "struct ERC20Upgradeable.ERC20Storage storage pointer"
																	}
																},
																"id": 1087,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11584:11:5",
																"memberName": "_allowances",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 569,
																"src": "11582:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1088,
															"indexExpression": {
																"id": 1085,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1038,
																"src": "11596:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11582:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1089,
														"indexExpression": {
															"id": 1086,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1040,
															"src": "11603:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11582:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1090,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1042,
														"src": "11614:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11582:37:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1092,
												"nodeType": "ExpressionStatement",
												"src": "11582:37:5"
											},
											{
												"condition": {
													"id": 1093,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1044,
													"src": "11633:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1101,
												"nodeType": "IfStatement",
												"src": "11629:76:5",
												"trueBody": {
													"id": 1100,
													"nodeType": "Block",
													"src": "11644:61:5",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 1095,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "11672:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1096,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1040,
																		"src": "11679:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1097,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1042,
																		"src": "11688:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1094,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 157,
																	"src": "11663:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1098,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11663:31:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1099,
															"nodeType": "EmitStatement",
															"src": "11658:36:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1036,
										"nodeType": "StructuredDocumentation",
										"src": "10398:821:5",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 1103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "11233:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11250:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "11242:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1037,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11242:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11265:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "11257:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1039,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11257:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11282:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "11274:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1041,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11274:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "11294:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "11289:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1043,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11289:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11241:63:5"
									},
									"returnParameters": {
										"id": 1046,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11322:0:5"
									},
									"scope": 1152,
									"src": "11224:487:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1150,
										"nodeType": "Block",
										"src": "12082:388:5",
										"statements": [
											{
												"assignments": [
													1114
												],
												"declarations": [
													{
														"constant": false,
														"id": 1114,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "12100:16:5",
														"nodeType": "VariableDeclaration",
														"scope": 1150,
														"src": "12092:24:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1113,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12092:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1119,
												"initialValue": {
													"arguments": [
														{
															"id": 1116,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1106,
															"src": "12129:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1117,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1108,
															"src": "12136:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1115,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 756,
														"src": "12119:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12119:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12092:52:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1120,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1114,
														"src": "12158:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1123,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12183:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 1122,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "12183:7:5",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 1121,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "12178:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1124,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12178:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 1125,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "12192:3:5",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "12178:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12158:37:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1149,
												"nodeType": "IfStatement",
												"src": "12154:310:5",
												"trueBody": {
													"id": 1148,
													"nodeType": "Block",
													"src": "12197:267:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1129,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1127,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1114,
																	"src": "12215:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 1128,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1110,
																	"src": "12234:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "12215:24:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1137,
															"nodeType": "IfStatement",
															"src": "12211:130:5",
															"trueBody": {
																"id": 1136,
																"nodeType": "Block",
																"src": "12241:100:5",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1131,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1108,
																					"src": "12293:7:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1132,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1114,
																					"src": "12302:16:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 1133,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1110,
																					"src": "12320:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1130,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 30,
																				"src": "12266:26:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 1134,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "12266:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1135,
																		"nodeType": "RevertStatement",
																		"src": "12259:67:5"
																	}
																]
															}
														},
														{
															"id": 1147,
															"nodeType": "UncheckedBlock",
															"src": "12354:100:5",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 1139,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1106,
																				"src": "12391:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1140,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1108,
																				"src": "12398:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1143,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1141,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1114,
																					"src": "12407:16:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 1142,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1110,
																					"src": "12426:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12407:24:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 1144,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12433:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 1138,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				1035,
																				1103
																			],
																			"referencedDeclaration": 1103,
																			"src": "12382:8:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 1145,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12382:57:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1146,
																	"nodeType": "ExpressionStatement",
																	"src": "12382:57:5"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1104,
										"nodeType": "StructuredDocumentation",
										"src": "11717:271:5",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 1151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "12002:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "12026:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "12018:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12018:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "12041:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "12033:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12033:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12058:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "12050:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12050:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12017:47:5"
									},
									"returnParameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12082:0:5"
									},
									"scope": 1152,
									"src": "11993:477:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1153,
							"src": "1576:10896:5",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40,
								298,
								301
							],
							"usedEvents": [
								148,
								157,
								306
							]
						}
					],
					"src": "105:12368:5"
				},
				"id": 5
			},
			"https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							1198
						],
						"Initializable": [
							535
						]
					},
					"id": 1199,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1154,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"absolutePath": "https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts-upgradeable/v5.0.2/contracts/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1156,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1199,
							"sourceUnit": 536,
							"src": "126:63:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1155,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 535,
										"src": "134:13:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1158,
										"name": "Initializable",
										"nameLocations": [
											"728:13:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 535,
										"src": "728:13:6"
									},
									"id": 1159,
									"nodeType": "InheritanceSpecifier",
									"src": "728:13:6"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1157,
								"nodeType": "StructuredDocumentation",
								"src": "191:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1198,
							"linearizedBaseContracts": [
								1198,
								535
							],
							"name": "ContextUpgradeable",
							"nameLocation": "706:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1164,
										"nodeType": "Block",
										"src": "800:7:6",
										"statements": []
									},
									"id": 1165,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1162,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1161,
												"name": "onlyInitializing",
												"nameLocations": [
													"783:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 444,
												"src": "783:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "783:16:6"
										}
									],
									"name": "__Context_init",
									"nameLocation": "757:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "771:2:6"
									},
									"returnParameters": {
										"id": 1163,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:0:6"
									},
									"scope": 1198,
									"src": "748:59:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1170,
										"nodeType": "Block",
										"src": "875:7:6",
										"statements": []
									},
									"id": 1171,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1168,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1167,
												"name": "onlyInitializing",
												"nameLocations": [
													"858:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 444,
												"src": "858:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "858:16:6"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "822:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "846:2:6"
									},
									"returnParameters": {
										"id": 1169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:0:6"
									},
									"scope": 1198,
									"src": "813:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1179,
										"nodeType": "Block",
										"src": "949:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1176,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "966:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "970:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "966:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1175,
												"id": 1178,
												"nodeType": "Return",
												"src": "959:17:6"
											}
										]
									},
									"id": 1180,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "896:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:2:6"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "940:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:9:6"
									},
									"scope": 1198,
									"src": "887:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1188,
										"nodeType": "Block",
										"src": "1056:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1185,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1073:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1077:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1073:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1184,
												"id": 1187,
												"nodeType": "Return",
												"src": "1066:15:6"
											}
										]
									},
									"id": 1189,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "998:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:6"
									},
									"returnParameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1183,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1189,
												"src": "1040:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1182,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1040:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1039:16:6"
									},
									"scope": 1198,
									"src": "989:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1196,
										"nodeType": "Block",
										"src": "1166:25:6",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1194,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1183:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1193,
												"id": 1195,
												"nodeType": "Return",
												"src": "1176:8:6"
											}
										]
									},
									"id": 1197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1103:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:6"
									},
									"returnParameters": {
										"id": 1193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "1157:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:9:6"
									},
									"scope": 1198,
									"src": "1094:97:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1199,
							"src": "688:505:6",
							"usedErrors": [
								298,
								301
							],
							"usedEvents": [
								306
							]
						}
					],
					"src": "101:1093:6"
				},
				"id": 6
			}
		}
	}
}